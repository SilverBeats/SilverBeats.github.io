<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LearnForever</title>
  <icon>https://www.gravatar.com/avatar/92d41ced912974c19d6701831ab0718c</icon>
  
  <link href="blog.silverbeats.cn/atom.xml" rel="self"/>
  
  <link href="blog.silverbeats.cn/"/>
  <updated>2020-11-09T08:18:38.923Z</updated>
  <id>blog.silverbeats.cn/</id>
  
  <author>
    <name>silverbeats</name>
    <email>418116014@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理模式</title>
    <link href="blog.silverbeats.cn/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>blog.silverbeats.cn/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-11-09T05:31:01.000Z</published>
    <updated>2020-11-09T08:18:38.923Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式，就是给一个<strong>对象</strong>提供一种<strong>代理对象</strong>以控制该对象的访问。在这个模式中，通过创建代理对象作为“替身”替代了原有对象，完成一些本该由原有对象做事情，从而达到控制对象访问的目的。</p><p>通俗来讲：代理 = 代替处理，是由另一个对象来代替原对象来处理某些逻辑</p><p>例子：房产中介、代跑腿业务、送外卖……</p><p>在一些情况下，一个对象的某些方法想要进行评比或者某种逻辑控制，则我们可以通过代理的方式进行。再此能力上，引申出来的作用，也是目前在开发中经常使用的一个作用，就是：“在不修改原对象代码的基础上，对原对象功能进行修改或者增强”，比如AOP。</p><p>分类：</p><ul><li>静态代理</li><li>基于JDK（接口）的动态代理</li><li>基于CGLIB（父类）的动态代理</li></ul><p>相关概念：</p><ul><li>目标类：原对象，需要代理对象控制它的访问，扩展其功能</li><li>代理类：代理模式产生的对象，是原对象的替身，已经在原有基础上修改了逻辑，对目标类进行功能增强</li></ul><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png" alt="代理模式两种方式" /></p><ol><li>代理模式在Java开发中广泛应用，特别是在框架中底层原理经常涉及到代理模式（尤其是动态代理）</li><li>静态代理和动态代理，实际使用还是动态代理较多，原因是静态代理需要自行手写代码、维护、修改十分麻烦，会额外引入很多工作量，也不能很好的使用配置完成逻辑的指定</li><li>基于JDK和基于cglib，实际使用都会用到。<ul><li>Spring中两种都支持。指定的目标类实现了接口，spring就会自动选择jdk的动态代理。而如果目标类没有实现接口，会使用cglib</li><li>开发中，基于JDK使用要求较多，cglib更通用。</li><li>如果使用dubbo+zookeeper，底层进行代理时，最好配置cglib代理。因为dubbo会使用基于包名的扫描方式进行类的处理，而JDK的代理类生成的包名类似于com.sun.proxy…格式。实际上需要让代理类和目标类保持同样的包名，所以cglib能保持原包名不变生成代理类</li></ul></li></ol><h1 id="1-静态代理"><a class="markdownIt-Anchor" href="#1-静态代理"></a> 1 静态代理</h1><p>使用代理对象替代原来的对象，完成原来对象的功能，并实现功能增强</p><p><strong>示例：点外卖</strong></p><p>顾客下单，外卖小哥接收订单、取餐、送餐。</p><p>顾客是目标对象，被代理。</p><p>外卖小哥是代理对象，代理顾客进行取餐，以及将餐送到顾客手中。</p><ul><li>点外卖接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 点餐接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrder</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">String</span> foodName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>目标对象（被代理的对象）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">IOrder</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">String</span> foodName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"已经下单"</span> <span class="token operator">+</span> foodName<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代理对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 代理对象，外卖小哥</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeliveryMan</span> <span class="token keyword">implements</span> <span class="token class-name">IOrder</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 目标类对象</span>  <span class="token keyword">private</span> <span class="token class-name">IOrder</span> customer<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">DeliveryMan2</span><span class="token punctuation">(</span><span class="token class-name">IOrder</span> customer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">String</span> foodName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> order <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>foodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 目标对象只有一个点餐功能，通过外卖小哥代理，对目标对象的功能进行了增强丰富</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经接收到订单，正前往取餐途中……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在派送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  order <span class="token operator">+</span> <span class="token string">"已经送达"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个顾客对象</span>  <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建代理对象,代理这个顾客</span>  <span class="token class-name">IOrder</span> deliveryMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeliveryMan2</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> result <span class="token operator">=</span> deliveryMan<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token string">"千叶豆腐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缺点：</strong></p><p>静态代理虽然能够实现代理模式，完成解耦，但是静态代理类的代码维护依然非常复杂，一旦接口或者父类发生变动，则代理类的代码就得随之修改，代理类多的时候维护困难，所以实际上动态代理用的更多。</p><h1 id="2-动态代理"><a class="markdownIt-Anchor" href="#2-动态代理"></a> 2 动态代理</h1><p>动态代理技术，是在<strong>内存</strong>中生成代理对象的一种技术，也就是整个代理过程在内存中进行，不需要手写代理类的代码，也不会存在代理类编写的过程，而是直接在运行期，在JVM中“凭空”创造出的代理类对象供使用，一般使用的动态代理技术是以下两种：</p><h2 id="21-基于jdk接口的动态代理"><a class="markdownIt-Anchor" href="#21-基于jdk接口的动态代理"></a> 2.1 基于JDK（接口）的动态代理</h2><p>JDK自带的动态代理技术，需要使用一个静态方法来创建代理对象。<strong><mark>它要求被代理对象，也就是目标类，必须实现接口</mark></strong>。生成的代理对象和原对象实现的是相同的接口，是兄弟关系</p><ul><li>IOrder接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 点餐接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrder</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">String</span> foodName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>目标类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">IOrder</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">String</span> foodName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"已经下单"</span> <span class="token operator">+</span> foodName<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 准备一个目标对象</span>  <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用jdk的API，动态生成一个代理对象</span>  <span class="token class-name">IOrder</span> deliveryMan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IOrder</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>    customer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    customer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>      <span class="token comment">// 调用目标对象的对应方法</span>      <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 进行代理类的一些增强逻辑</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经接收到订单，正前往取餐途中……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在派送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"已经送达"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用代理对象,执行对应方法</span>  <span class="token class-name">String</span> result <span class="token operator">=</span> deliveryMan<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token string">"麻婆豆腐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span><span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>ClassLoader loader：固定写法，指定目标类对象的类加载器，用于加载目标类及其接口的字节码文件，通过**<mark>对象.getClass().getClassLoader()</mark>**获得</p><p>Class&lt;?&gt;[] interfaces： 固定写法，指定目标类的实现的所有接口的字节码对象的数组，通过**<mark>对象.getClass().getInterfaces()</mark>**获得<br />InvocationHandler h：InvocationHandler 是个接口，其中只有一个invoke方法。它会在代理类对象调用方法时执行，也就是说，在代理类对象中调用接口中任何方法时，都会执行到invoke中。所以，在此方法中完成对增强或扩展代码逻辑的编写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * proxy: 代理类对象的引用，也就是Proxy.newProxyInstance的返回值   * method: 对应的是触发invoke执行的方法的Method对象，比如上面调用了接口的order方法，这个method就是order的反射对象   * args: method中传递的参数   */</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知道了Method、args，那么就可以进行增强操作了。</p></blockquote><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%9F%BA%E4%BA%8EJDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="基于JDK动态代理流程" /></p><p>将上面的动态代理转化为静态代理，相当于如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 省略接口定义和Customer类，详情见上面</span><span class="token comment">// 代理对象，外卖小哥，这是在运行中动态创建的代理类，因为在创建时，传递的参数中有给到目标类的实现接口，如果创建的代理类也能够实现同样的接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeliveryMan</span> <span class="token keyword">implements</span> <span class="token class-name">IOrder</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 目标类对象</span>  <span class="token keyword">private</span> <span class="token class-name">IOrder</span> customer<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">DeliveryMan</span><span class="token punctuation">(</span><span class="token class-name">IOrder</span> customer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">String</span> foodName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 相当于method.invoke(customer, args)，得到目标类的该方法返回结果</span>    <span class="token class-name">String</span> order <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>foodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 目标对象只有一个点餐功能，通过外卖小哥代理，对目标对象的功能进行了增强丰富</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经接收到订单，正前往取餐途中……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在派送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回代理对象的order方法结果</span>    <span class="token keyword">return</span>  order <span class="token operator">+</span> <span class="token string">"已经送达"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-基于cglib父类的动态代理"><a class="markdownIt-Anchor" href="#22-基于cglib父类的动态代理"></a> 2.2 基于CGLIB（父类）的动态代理</h2><p>在内存中，生成一个代理对象，它继承了目标对象。</p><ul><li>导包：cglib和asm</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.ow2.asm/asm --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.ow2.asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Class</span> type<span class="token punctuation">,</span> <span class="token class-name">Callback</span> callback<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Class type：目标类的class属性</p><p>Callback callback：回调，提供一个方法，它会在合适的时候调用。由于Callback接口只是作为名称定义的作用，不包含方法声明，所以在使用的时候，大多使用其子接口MethodInterceptor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">Callback</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span><span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 准备一个目标对象</span>  <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用cglib创建代理类对象</span>  <span class="token class-name">Customer</span> deliveryMan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">)</span><span class="token class-name">Enhancer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 调用目标对象的对应方法</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 进行代理类的一些增强逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经接收到订单，正前往取餐途中……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在派送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result <span class="token operator">+</span> <span class="token string">"已经送达"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 反射调用原来的逻辑</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用代理对象,执行对应方法</span>  <span class="token class-name">String</span> result <span class="token operator">=</span> deliveryMan<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token string">"麻婆豆腐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">代理模式，静态代理，动态代理</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    <category term="设计模式" scheme="blog.silverbeats.cn/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="blog.silverbeats.cn/tags/java/"/>
    
    <category term="设计模式" scheme="blog.silverbeats.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java高级(续)</title>
    <link href="blog.silverbeats.cn/java%E9%AB%98%E7%BA%A7%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>blog.silverbeats.cn/java%E9%AB%98%E7%BA%A7%EF%BC%88%E7%BB%AD%EF%BC%89/</id>
    <published>2020-11-05T11:36:10.000Z</published>
    <updated>2020-11-05T11:53:10.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-java常用工具类"><a class="markdownIt-Anchor" href="#5-java常用工具类"></a> 5 Java常用工具类</h1><h2 id="51-uuid类"><a class="markdownIt-Anchor" href="#51-uuid类"></a> 5.1 UUID类</h2><p>UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，是一种软件建构的标准，亦为分布式计算环境领域的一部分。其目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID</p><p><strong>UUID由以下几部分的组合：</strong></p><p>（1）当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。</p><p>（2）时钟序列。</p><p>（3）全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。</p><p>（4）在 hibernate（Java orm框架）中， 采用 IP-JVM启动时间-当前时间右移32位-当前时间-内部计数（8-8-4-8-4）来组成UUID</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UUID</span> <span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取UUID对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UUID</span> <span class="token function">fromString</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据字符串获取UUID内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="52-optional类"><a class="markdownIt-Anchor" href="#52-optional类"></a> 5.2 Optional类</h2><p>在接受对象的一方，往往需要做判空处理，为了解决这个情况，在<strong>JDK1.8</strong>提供了Optional类，可以实现null的处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 返回空数据</span><span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 获取数据</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 保存数据,但是不允许出现null,出现null会出现空指针异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保存数据允许为空</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 空的时候返回其他数据</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">T</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/Optional.png" alt="Optional" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MessageUtil</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MessageUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IMessage</span><span class="token punctuation">></span></span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 倘若Optional中保存null需要用ofNullable,如果使用of会出现空指针异常</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useMessage</span><span class="token punctuation">(</span><span class="token class-name">IMessage</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IMessage</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MessageImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IMessage</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"hahhah"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取数据,倘若数据为null,在get的时候会出现java.util.NoSuchElementException</span><span class="token class-name">IMessage</span> message <span class="token operator">=</span> <span class="token class-name">MessageUtil</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 改进上面的写法,使用orElse,倘若Optional中保存为null,则创建</span>    message <span class="token operator">=</span> <span class="token class-name">MessageUtil</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MessageUtil</span><span class="token punctuation">.</span><span class="token function">useMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="53-threadlocal类"><a class="markdownIt-Anchor" href="#53-threadlocal类"></a> 5.3 ThreadLocal类</h2><p>在了解之前，先看下面的例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 要发送的消息</span><span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 消息的发送通道</span><span class="token keyword">class</span> <span class="token class-name">Channel</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> message<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"消息发送：】"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Channel</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化消息主体对象</span>msg<span class="token punctuation">.</span><span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置发送内容</span><span class="token class-name">Channel</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置要发送的消息</span><span class="token class-name">Channel</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送消息</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上面的例子，采用的是单线程模式来进行处理的。那么在多线程的情况下，能否实现同样的效果？为此，启动30个线程进行处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化消息主体对象</span>    msg<span class="token punctuation">.</span><span class="token function">setInfo</span><span class="token punctuation">(</span>x <span class="token operator">+</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置发送内容</span>    <span class="token class-name">Channel</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置要发送的消息</span>    <span class="token class-name">Channel</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送消息</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"消息发送者"</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="测试结果" /></p><p>测试后发现，线程发送的消息出现混乱。因为每个线程都会对静态对象message设置其中的info内容，当其中一个线程修改其内容还没有进行发送，另一个线程就将内容修改，所以会出现数据覆盖，不同步的问题。</p><p>在Channel核心结构不改变的情况下，要考虑每个线程独立操作问题，发现对于Channel类而言除了保留发送消息之外，还应该多存放一个每个线程的标记，<strong>JDK1.2</strong>后可以通过ThreadLocal类来进行存放。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 构造方法</span><span class="token keyword">public</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 取出数据</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除数据，@since:1.5</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/ThreadLocal%E7%A4%BA%E4%BE%8B%E7%BB%93%E6%9E%84.png" alt="ThreadLocal示例结构" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Channel</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span> THREAD_LOCAL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通过get获取ThreadLocal存放的对象,此获取是通过当前线程currentThread做key来获取的</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"消息发送：】"</span> <span class="token operator">+</span> THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 向THREAD_LOCAL中保存数据,同时也会保存Thread.currentThread</span>    THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ThreadLocal.get获取当前线程存储的对象，是将当前线程做key，对象做value，因为ThreadLocal类有内部类ThreadLocalMap，用于存放key-value</p></blockquote><h2 id="54-定时调度"><a class="markdownIt-Anchor" href="#54-定时调度"></a> 5.4 定时调度</h2><p>定时器主要操作是进行定时任务的处理，不过在java中提供定时任务支持，不过只是实现了一种间隔触发的操作。</p><p>如果想要实现定时操作的主体类，以及一个定时任务的控制，<strong>JDK1.3</strong>后可以使用两个类实现：</p><ul><li>TimerTask抽象类：实现Runnable接口，实现定时任务处理</li><li>Timer类：进行任务的启动<ul><li>启动方法：<code>public void schedule(TimerTask task, long delay)</code>，延迟单位毫秒</li><li>间隔触发：<code>public void schedule(TimerTask task, long delay, long period)</code></li></ul></li></ul><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6.png" alt="定时调度" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"定时任务当前时间"</span><span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// timer.schedule(new MyTask(), 0);</span>    timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="55-base64加密"><a class="markdownIt-Anchor" href="#55-base64加密"></a> 5.5 Base64加密</h2><p>倘若需要解密，需要知道加密的规则，在J<strong>DK1.8</strong>开始，提供一种新的加密处理操作类，即Base64类，里面有两个内部类，Encoder和Decoder。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"haha,silverbeats"</span><span class="token punctuation">;</span><span class="token comment">// 得到加密后的byte数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将byte数组转为String</span><span class="token class-name">String</span> encMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印加密结果</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将加密的encMsg解密</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为Base64是公版加密算法，直接对数据加密不安全，可以对原始数据加上盐值，如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> salt <span class="token operator">=</span> <span class="token string">"learn"</span><span class="token punctuation">;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"haha,silverbeats"</span> <span class="token operator">+</span> <span class="token string">"&#123;"</span><span class="token operator">+</span> salt <span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最好的方法是多次加密</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StringUtil</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 公共盐值</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SALT <span class="token operator">=</span> <span class="token string">"learn"</span><span class="token punctuation">;</span>  <span class="token comment">// 加密次数</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> REPEAT_TIMES <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">/** * @param pwd:需要加密的数据 * @return: 返回加密后的String字符串 * @description: 对数据进行加密 */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">enCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 拼接盐值</span>    <span class="token class-name">String</span> temp <span class="token operator">=</span> pwd <span class="token operator">+</span> <span class="token string">"&#123;"</span> <span class="token operator">+</span> SALT <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">;</span>    <span class="token comment">// 转字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempBytes <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 多次加密</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> REPEAT_TIMES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      tempBytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>tempBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回结果</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>tempBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">deCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取加密后的字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codeBytes <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 多次解密</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> REPEAT_TIMES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      codeBytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>codeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 转字符串</span>    <span class="token class-name">String</span> tempRes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>codeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 去掉尾部盐值</span>    <span class="token keyword">return</span> tempRes<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempRes<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="56-comparable比较器"><a class="markdownIt-Anchor" href="#56-comparable比较器"></a> 5.6 Comparable比较器</h2><p>所谓比较器指的就是进行大小关系的判断。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>      <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码运行报错：java.lang.ClassCastException: Thread.Person cannot be cast to java.lang.Comparable</p><p>任意一个类默认情况下无法进行数组排序或比较需求的，可以实现Comparable接口，自定义实现比较规则。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当前数据比传入的对象小：返回负数</span>    <span class="token comment">// 当前数据比传入的对象大：返回正数</span>    <span class="token comment">// 当前数据比传入的对象等：返回0</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> o<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="57-comparator比较器"><a class="markdownIt-Anchor" href="#57-comparator比较器"></a> 5.7 Comparator比较器</h2><p>Comparator属于一种挽救的比较器支持，其主要目的是解决一些没有使用Comparable排序的类的对象数组排序。</p><p>比如上面的Person类，没有想过排序，但是过了几天后，需要对Person进行排序，但是不能修改Person类，就是说不能重写compareTo方法。在Arrays类里面排序有另外一种基于Comparator实现方式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/java/Comparator.png" alt="Comparator" /><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PersonComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o1<span class="token punctuation">,</span> <span class="token class-name">Person</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PersonComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-io流"><a class="markdownIt-Anchor" href="#7-io流"></a> 7 IO流</h1><h2 id="71-file类"><a class="markdownIt-Anchor" href="#71-file类"></a> 7.1 File类</h2><p>File类是Comparable接口的之类，所以File类可排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个file对象</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:"</span><span class="token punctuation">,</span> <span class="token string">"图片/t.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个file对象，父路径+子路径</span>f<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改名字</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>file类方法</th><th>说明</th></tr></thead><tbody><tr><td>exists()</td><td>boolean 文件是否存在</td></tr><tr><td>length()</td><td>long类型 文件的大小，单位字节</td></tr><tr><td>isFile()</td><td>boolean 是否是文件</td></tr><tr><td>isDirectory()</td><td>boolean 是否是目录</td></tr><tr><td>getName()</td><td>获取文件名</td></tr><tr><td>getPath()</td><td>获取文件路径</td></tr><tr><td>lastModified()</td><td>获取文件最后修改时间</td></tr><tr><td>getAbsoluatePath()</td><td>获取文件绝对路径</td></tr><tr><td>createNewFile()</td><td>创建新的file</td></tr><tr><td>delete()</td><td>删除file对应的文件</td></tr><tr><td>mkdir()</td><td>创建一个目录：中间某个目录缺失，则创建失败</td></tr><tr><td>mkdirs()</td><td>创建多个目录：中间某个目录缺失，则创建该缺失目录</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Fri Jan 24 14:34:00 CST 2020true17trueb.txtE:\b.txtfalse*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="72-四个抽象类"><a class="markdownIt-Anchor" href="#72-四个抽象类"></a> 7.2 四个抽象类</h2><p>字节流抽象类：OutputStream，InputStream</p><p>字符流抽象类：Writer，Reader</p><h3 id="721-outputstream字节输出流"><a class="markdownIt-Anchor" href="#721-outputstream字节输出流"></a> 7.2.1 OutputStream字节输出流</h3><p>OutputStream抽象类定义的是公共的输出的操作标准，这个操作标准里面一共定义了三个输出方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public abstract void write(int b) throws IOException;</td><td>输出单个字节数据</td></tr><tr><td>public void write(byte b[]) throws IOException</td><td>输出一组字节数据</td></tr><tr><td><span style="color:red;font-weight:bold;"> public void write(byte b[], int off, int len) throws IOException </span></td><td>输出部分字节数据</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@since</span> JDK1<span class="token punctuation">.</span><span class="token number">0</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OutputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@since</span> JDK1<span class="token punctuation">.</span><span class="token number">5</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Closeable</span> <span class="token keyword">extends</span> <span class="token class-name">AutoCloseable</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@since</span> JDK1<span class="token punctuation">.</span><span class="token number">7</span> <span class="token keyword">try</span><span class="token operator">-</span><span class="token keyword">catch</span>自动关闭释放资源<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AutoCloseable</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@since</span> JDK1<span class="token punctuation">.</span><span class="token number">5</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flushable</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="722-inputstream字节输入流"><a class="markdownIt-Anchor" href="#722-inputstream字节输入流"></a> 7.2.2 InputStream字节输入流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public abstract int read() throws IOException;</td><td>读取单个字节数据，如果读到底了会返回-1，返回具体的字节数组</td></tr><tr><td><span style="color:red;font-weight:bold;">public int read(byte b[]) throws IOException{}</span></td><td>读取一组字节数据，返回值是<strong>读取的长度</strong>，读取到底返回-1</td></tr><tr><td>public int read(byte b[], int off, int len) throws IOException {}</td><td>读取一组字节数据的部分内容，从off位置开始，长度为len</td></tr></tbody></table><p>字节输入流中最为麻烦的是：使用read方法读取只能通过字节数组来进行接收，并且需要指定一个合适的缓冲区大小，如果不合适会出现乱码，但即便合适也有可能出现乱码。</p><h3 id="723-writer字符输出流"><a class="markdownIt-Anchor" href="#723-writer字符输出流"></a> 7.2.3 Writer字符输出流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@since</span> JDK1<span class="token punctuation">.</span><span class="token number">1</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span><span class="token annotation punctuation">@since</span> JDK1<span class="token punctuation">.</span><span class="token number">5</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Appendable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Appendable</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> csq<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token class-name">Appendable</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> csq<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token class-name">Appendable</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>常用方法</th><th>说明</th></tr></thead><tbody><tr><td>public void write(char cbuf[]) throws IOException</td><td>输出字符数组</td></tr><tr><td>public void write(String str) throws IOException</td><td>输出字符串</td></tr></tbody></table><h3 id="724-reader字符输入流"><a class="markdownIt-Anchor" href="#724-reader字符输入流"></a> 7.2.4 Reader字符输入流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@since</span> JDK1<span class="token punctuation">.</span><span class="token number">1</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Reader</span> <span class="token keyword">implements</span> <span class="token class-name">Readable</span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span><span class="token annotation punctuation">@since</span> JDK1<span class="token punctuation">.</span><span class="token number">5</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Readable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span><span class="token class-name">CharBuffer</span> cb<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="73-字节流和字符流区别"><a class="markdownIt-Anchor" href="#73-字节流和字符流区别"></a> 7.3 字节流和字符流区别</h2><ul><li><p>在使用OutputStream和Writer输出的最后发现都使用了close方法进行关闭流。</p></li><li><p>当使用OutputStream进行输出，未close关闭，内容仍然能输出成功；然而使用Writer输出时，没有使用close方法进行关闭，内容无法进行输出，因为Writer使用了缓冲区，当使用close后，会强制进行缓冲的刷新，如果再不关闭的情况下，仍然输出成功，可以使用flush方法。</p></li><li><p>使用缓冲区的字符流更加适合进行中文数据的处理</p></li></ul><h2 id="74-文件流"><a class="markdownIt-Anchor" href="#74-文件流"></a> 7.4 文件流</h2><p>字节文件操作流：FileInputStream，FileOutputStream</p><p>字符文件操作流：FileReader，FileWriter</p><h3 id="741-fileoutputstream实现类"><a class="markdownIt-Anchor" href="#741-fileoutputstream实现类"></a> 7.4.1 FileOutputStream实现类</h3><table><thead><tr><th>主要使用的构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public FileOutputStream(File file) throws FileNotFoundException</td><td>内容覆盖</td></tr><tr><td>public FileOutputStream(File file, boolean append)  throws FileNotFoundException</td><td>内容是否追加</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 指定要操作的文件路径</span>  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:"</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test"</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 文件不存在</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建目录</span>    file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 通过子类实例化,因为OutputStream实现了Closeable接口,Closeable又继承了AutoCloseable接口</span>  <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 要输出的数据</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"你好hello silverbeats"</span><span class="token punctuation">;</span>    <span class="token comment">// 指定字符集</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出</span>    os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭输出流</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="742-fileinputstream实现类"><a class="markdownIt-Anchor" href="#742-fileinputstream实现类"></a> 7.4.2 FileInputStream实现类</h3><table><thead><tr><th>主要使用的构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public FileInputStream(File file) throws FileNotFoundException</td><td>通过File来创建输入流</td></tr><tr><td>public FileInputStream(String name) throws FileNotFoundException</td><td>通过文件路径创建输入流，内部实际上会根据路径去new File，本质还是通过File来创建输出流</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:/test/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 开辟一个缓冲区用来读数据</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flush <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 接受读取的字节个数</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//字节数组——> 字符串</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>flush<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="743-filewriter实现类"><a class="markdownIt-Anchor" href="#743-filewriter实现类"></a> 7.4.3 FileWriter实现类</h3><p>字符流优势在于处理中文</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileWriter</span> <span class="token keyword">extends</span> <span class="token class-name">OutputStreamWriter</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 指定要操作的文件路径</span>  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:"</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test"</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 文件不存在</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建目录</span>    file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 务必保证操作的路径存在,要操作的文件可以没有,但是路径在存在</span>  <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\nhahaha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"呼啦啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="744-filereader实现类"><a class="markdownIt-Anchor" href="#744-filereader实现类"></a> 7.4.4 FileReader实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReader</span> <span class="token keyword">extends</span> <span class="token class-name">InputStreamReader</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> ir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"E:/test/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 开辟一个缓冲区用来读数据</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flush <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 接受读取的字节个数</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> ir<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//字节数组——> 字符串</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>flush<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="745-文件拷贝案例"><a class="markdownIt-Anchor" href="#745-文件拷贝案例"></a> 7.4.5 文件拷贝案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> aimPath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//创建源</span>  <span class="token class-name">File</span> abcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//目的地</span>  <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>aimPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//选择流</span>  <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>abcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flush <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//缓冲容器</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>flush<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>is<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="75-转换流"><a class="markdownIt-Anchor" href="#75-转换流"></a> 7.5 转换流</h2><p>可以将字节流与字符流操作的功能转换。比如：OutputStream需要将内容变为字节数组后才能输出，而Writer可以直接输出字符串，这一点是方便。在Java.io包里面有两个类：InputStreamReader、OutputStreamWriter</p><table><thead><tr><th>类</th><th>InputStreamReader</th><th>OutputStreamWriter</th></tr></thead><tbody><tr><td>定义</td><td>public class OutputStreamWriter extends Reader</td><td>public class OutputStreamWriter extends Writer</td></tr><tr><td>构造方法</td><td>public InputStreamReader(InputStream in)</td><td>public OutputStreamWriter(OutputStream out)</td></tr></tbody></table><h2 id="76-内存流"><a class="markdownIt-Anchor" href="#76-内存流"></a> 7.6 内存流</h2><p>之前的都是文件操作流，以文件为中心，进行读和写。内存流是指以内存为中心，进行读和写。Java提供了字节内存操作流和字符内存操作流。</p><ul><li>字节内存操作流：ByteArrayInputStream，ByteArrayOutputStream</li><li>字符内存操作流：CharArrayReader、CharArrayWriter</li></ul><p>ByteArrayInputStream构造：<code>public ByteArrayInputStream(byte buf[])</code></p><p>ByteArrayOutputStream构造：<code>public ByteArrayOutputStream()</code></p><blockquote><p>ByteArrayOutputStream可以通过构造指针缓冲区的大小，默认是32</p><p>ByteArrayOutputStream还有其独有的方法，可以一次性得到将缓冲区所有内容的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">byte</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 需要先设置输入信息</span>  <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment">// 创建输入内存流</span>  <span class="token keyword">try</span><span class="token punctuation">(</span>    <span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 向输出流保存数据</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 一次性获得内存输出流中缓冲区所有内容</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="77-管道流"><a class="markdownIt-Anchor" href="#77-管道流"></a> 7.7 管道流</h2><p>实现两个线程之间的IO处理。</p><ul><li>字节管道流：PipedInputStream、PipedOutputStream</li><li>字符管道流：PipedReader、PipedWriter</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SendThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token comment">// 管道输出流</span><span class="token keyword">private</span> <span class="token class-name">PipedOutputStream</span> output<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">SendThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">PipedOutputStream</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> output<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">"【第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"次信息发送】"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// 利用管道实现数据发送</span><span class="token keyword">this</span><span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ReceiveThead</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token comment">// 管道输入流</span><span class="token keyword">private</span> <span class="token class-name">PipedInputStream</span> input<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ReceiveThead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">PipedInputStream</span> <span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> input<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【接受消息】"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">SendThread</span> send <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ReceiveThead</span> receive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReceiveThead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 链接管道</span>send<span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>receive<span class="token punctuation">.</span><span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>send<span class="token punctuation">,</span> <span class="token string">"消息发送线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>receive<span class="token punctuation">,</span> <span class="token string">"消息接收线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="78-随机流randomaccessfile"><a class="markdownIt-Anchor" href="#78-随机流randomaccessfile"></a> 7.8 随机流RandomAccessFile</h2><p>倘若一个十分庞大的文件需要读取，传统IO操作不能完成，java.io中提供RandomAccessFile类，可以实现文件跳跃式的读取，比如：可以读取中间的部分内容（前提是：需要一个完善的保存形式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>mode：文件处理模式，r，rw，rwd，rws</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/test/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"wangwu  "</span><span class="token punctuation">,</span> <span class="token string">"lisi    "</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    raf<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该类最大的特点是在读取，因为数据都是按照固定要求存储的，所以可以实现跳跃读取。可以看到上面的例子中往文件中写的内容长度固定是12个字符，字符数据占8个，整型int占4位。所以，可以使用随机流，跳过部分内容，直接读取最后的“lisi    16”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/test/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 李四前面有张三和王五的两行数据，长度24，需要跳过，指定开始读取的位置</span>  raf<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取的是lisi    名字</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 继续读取后面4位的年龄</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span> <span class="token operator">+</span> raf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 上面已经读到李四的年龄16了,倘若继续想要读取张三的数据,那么需要让读取位置往回走</span>  <span class="token comment">// 重新指定读取位置</span>  raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span> <span class="token operator">+</span> raf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="79-打印流"><a class="markdownIt-Anchor" href="#79-打印流"></a> 7.9 打印流</h2><p>OutputStream输出有个缺点就是，所有的数据都需要转换成字节数组，但当需要输出long、double或者Date，转换成字节数组是比较麻烦的，所以在开发中会定义一些工具类，为简化操作。</p><table><thead><tr><th>PrintStream</th><th>Printwriter</th></tr></thead><tbody><tr><td>public class PrintStream extends FilterOutputStream  implements Appendable, Closeable</td><td>public class PrintWriter extends Writer</td></tr><tr><td>public PrintStream(OutputStream out)</td><td>public PrintWriter(OutputStream out)<br/>public PrintWriter (Writer out)</td></tr></tbody></table><p><strong>使用PrintWriter进行格式化输出</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/test/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">PrintWriter</span> pu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"silverbeats"</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> salary <span class="token operator">=</span> <span class="token number">123845.238</span><span class="token punctuation">;</span>  pu<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名：%s、年龄：%d、收入：%9.2f"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>  pu<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="710-缓冲流"><a class="markdownIt-Anchor" href="#710-缓冲流"></a> 7.10 缓冲流</h2><p>字节缓冲流：BufferedInputStream、BufferedOutputStream</p><p>字符缓冲流：BufferedReader、BufferedWriter</p><p>BufferedReader提供了一个重要的一个方法：<code>public String readLine() throws IOException</code>读取一行数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">BufferedReader</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入信息："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 接受输入的信息</span>  <span class="token class-name">String</span> msg <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入内容为："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="711-扫描流scanner"><a class="markdownIt-Anchor" href="#711-扫描流scanner"></a> 7.11 扫描流Scanner</h2><p>是BufferedReader的替代品</p><ul><li>定义：<code>public final class Scanner implements Iterator&lt;String&gt;, Closeable</code></li><li>构造：<code>public Scanner(InputStream source)</code></li><li>判断是否有数据：<code>public boolean hasNext()</code></li><li>取出数据：<code>public String next()</code></li><li>设置分隔符：<code>public Scanner useDelimiter(String pattern)</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否有数字输入</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 接收输入的年龄</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的不是数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Scanner输入数据可以直接使用正则表达式进行验证</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入出生年月日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否有数字</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token string">"\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 接收输入的出生年月日</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Scanner读文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/test/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置换行符</span>  scanner<span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="711-继承关系合集"><a class="markdownIt-Anchor" href="#711-继承关系合集"></a> 7.11 继承关系合集</h2><p><img data-src="http://resource.silverbeats.cn/static/images/java/IO%E6%B5%81%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="IO流接口继承关系" /></p><h2 id="712-序列化与反序列化"><a class="markdownIt-Anchor" href="#712-序列化与反序列化"></a> 7.12 序列化与反序列化</h2><p>对象序列化是指将内存中保存的对象以二进制数据流的形式进行处理，可以实现对象的保存和网络传输。在java中如果要序列化，一定要实现Serializable接口，表示它可以被序列化。就像Cloneable表示该对象可以被克隆，表示一种能力，接口中没有任何方法定义。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>      <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>      <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>      <span class="token string">'&#125;'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>类名称</th><th>序列化：ObjectOutputStream</th><th>反序列化：ObjectInputStream</th></tr></thead><tbody><tr><td>定义</td><td>public class ObjectOutputStream   extends OutputStream implements ObjectOutput, ObjectStreamConstants</td><td>public class ObjectInputStream     extends InputStream implements ObjectInput, ObjectStreamConstants</td></tr><tr><td>构造</td><td>public ObjectOutputStream(OutputStream out) throws IOException</td><td>public ObjectInputStream(InputStream in) throws IOException</td></tr><tr><td>方法</td><td>public final void writeObject(Object obj) throws IOException</td><td>public final Object readObject()     throws IOException, ClassNotFoundException</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">File</span> SAVE_FILE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/test/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token function">saveObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">loadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>SAVE_FILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">loadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>SAVE_FILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>transient关键字</strong></p><p>默认情况下，序列化的时候会将类中的全部属性内容进行序列化，倘若有哪个属性不想被序列化，可以追加transient关键字，在序列化的时候会保存该属性的默认值。</p><p>如果类中有一些是需要计算保存的属性内容往往是不需要被序列化的，这时候可以使用这个关键字。</p><h1 id="8-集合"><a class="markdownIt-Anchor" href="#8-集合"></a> 8 集合</h1><p>集合中有如下接口需要掌握：Collection、List、Set、Map、Queue、Iterable</p><h2 id="81-collection接口"><a class="markdownIt-Anchor" href="#81-collection接口"></a> 8.1 Collection接口</h2><p>单值集合操作的最大父接口。JDK1.5之前Collection是独立的接口，但从JDK1.5之后提供有了Iterable接口，并在JDK1.8之后，针对Iterable接口得到一些扩充。JDK1.5之前，更多情况下直接操作Collection接口，而在JDK1.5之后，使用更多的是Collection的子接口：List、Set</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th><th style="text-align:center">返回值类型</th></tr></thead><tbody><tr><td style="text-align:center">size()</td><td style="text-align:center">返回里面有多少个元素</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">isEmpty()</td><td style="text-align:center">判空</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">add()</td><td style="text-align:center">增加对象</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">toArray()</td><td style="text-align:center">转化为Object数组</td><td style="text-align:center">Object[]</td></tr><tr><td style="text-align:center">remove()</td><td style="text-align:center">将对象从容器中移除地址，并非删除对象</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">contain()</td><td style="text-align:center">判断该对象是否存在，需要equals方法支持</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">containsAll()</td><td style="text-align:center">本容器是否包含参数容器中所有元素</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">addAll()</td><td style="text-align:center">将参数容器中所有元素增加到本容器</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">removeAll()</td><td style="text-align:center">参数容器和本容器元素相同的部分移除</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">retainAll()</td><td style="text-align:center">取本容器和参数容器中共同元素，移除不同元素</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">iterator()</td><td style="text-align:center">将集合变为Iterator接口返回</td><td style="text-align:center">Iterator&lt;T&gt;</td></tr></tbody></table><p><img data-src="http://resource.silverbeats.cn/static/images/java/Collection%E6%8E%A5%E5%8F%A3.png" alt="Collection接口" /></p><h2 id="82-list接口"><a class="markdownIt-Anchor" href="#82-list接口"></a> 8.2 List接口</h2><p>最大特点是允许保存重复数据。</p><p><strong>对Collection定义的方法进行扩充，主要有：</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td><span style="color:red;font-weight:bold;">public E get(int index)</span></td><td>获取指定位置的元素</td></tr><tr><td>public E set(int index, E element)</td><td>修改指定位置的元素</td></tr><tr><td>public ListIterator&lt;E&gt; listIterotor()</td><td>返回ListIterator接口</td></tr></tbody></table><p>List接口的常用子类：ArrayList、LinkedList、Vector</p><h3 id="821-arraylist"><a class="markdownIt-Anchor" href="#821-arraylist"></a> 8.2.1 ArrayList</h3><p><img data-src="http://resource.silverbeats.cn/static/images/java/ArrayList%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84.png" alt="ArrayList继承结构" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"silverbeats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 利用toString输出</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// JDK1.8之后,利用forEach输出</span>  arrayList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 因为Consumer是函数式接口,可以利用Lambda表达式</span>  arrayList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str<span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用迭代器输出</span>  <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><ul><li><p>保存顺序就是存储顺序</p></li><li><p>允许重复</p></li></ul><p><strong>ArrayList实质：</strong></p><ul><li><p>当使用无参构造创建一个ArrayList时，会使用空Object数组，<strong>不会使用默认的容量大小来创建数组</strong>。而是在使用无参创建ArrayList后添加元素时，才会使用默认容量（10）来创建数组</p></li><li><p>底层用Object[]数组实现，可以使用有参构造指定数组容量大小</p></li><li><p>在进行数据增加时，当集合中对象数组容量不够时，会进行新数组开辟，将旧数据拷贝到新数组中（使用Arrays.copyOf，底层还是System.arraycopy），新数组大小是<strong>原数组的1.5倍</strong></p></li></ul><h3 id="822-linkedlist"><a class="markdownIt-Anchor" href="#822-linkedlist"></a> 8.2.2 LinkedList</h3><p><img data-src="http://resource.silverbeats.cn/static/images/java/LinkedList%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="LinkedList继承关系" /></p><p>如果只是单看功能，会发现和ArrayList使用时一样的，但是内部实现机制不同。底层使用双向链表实现，每个节点都有pre指针和next指针。在使用List集合中的get()方法根据索引花去数据时，ArrayList时间复杂度是O(1)，LinkedList时间复杂度O(n)，</p><h3 id="823-vector"><a class="markdownIt-Anchor" href="#823-vector"></a> 8.2.3 Vector</h3><p>JDK1.0提供，其继承结构和ArrayList相同，与ArrayList相比，其每个操作方法都有同步关键字synchronized，使用无参构造时，会创建一个容量10的Object数组</p><h2 id="83-set接口"><a class="markdownIt-Anchor" href="#83-set接口"></a> 8.3 Set接口</h2><p>最大的特点是不允许保存重复元素。Set集合无法实现指定索引获取元素。</p><p><img data-src="http://resource.silverbeats.cn/static/images/java/Set%E9%9B%86%E5%90%88%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="Set集合继承关系" /></p><h3 id="831-hashset"><a class="markdownIt-Anchor" href="#831-hashset"></a> 8.3.1 HashSet</h3><ul><li><p>保存顺序是无序的</p></li><li><p><code>HashSet</code>底层使用<code>HashMap</code>进行存储</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这一点就导致HashSet的常用操作比如：iterator，size()，add()，remove()，isEmpty()，contains()，add()，clear()都是调用hashMap的方法</p><p>HashSet的removeAll方法在AbstractSet中已经实现</p></blockquote><ul><li><code>HashSet</code>中的值不可重复的原因</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从hashSet的add方法可以看到，实际上添加的元素是添加HashMap的key，HashMap中key是不可重复的，判断key是否重复是通过HashCode和equals两个方法共同作用完成的，<mark>而只有在TreeSet或者TreeMap排序中，才会利用Comparable接口完成</mark></p></blockquote><ul><li>构造器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 空构造</span><span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将给定集合构造成一个HashMap，该HashMap的充填因子为0.75，大小为Max&#123;集合在充填因子为0.75时的size大小(向上取整),16&#125;</span><span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">.75f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 指定容量，默认负载因子0.75，创建HashMap</span><span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 指定初始容量和负载因子，创建HashMap</span><span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 指定初始容量和负载因子，创建LinkedHashMap，第三个参数用于与上面的构造函数加以区分</span><span class="token comment">// 该构造器会用于LinkedHashSet对象的创建</span><span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dummy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="832-treeset"><a class="markdownIt-Anchor" href="#832-treeset"></a> 8.3.2 TreeSet</h3><p>TreeSet，底层使用TreeMap，不允许重复，数据存储有序，会按照数据的升序进行排序。</p><ul><li>使用自定义类进行存储排序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">></span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>      <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>      <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>      <span class="token string">'&#125;'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张柳"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张柳"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>person<span class="token operator">-></span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需要注意的点：</strong></p><ul><li>自定义类需要实现Comparable接口</li><li>重写compareTo方法时，一定要将该类中所有属性都一次进行大小关系的匹配，因为TreeSet是利用Comparable接口来确认重复数据的。比如上面示例的王五和张柳，倘若不比较name，由于二者年龄相同，TreeSet会认为是同一个对象。</li></ul><h2 id="84-集合输出的四种形式"><a class="markdownIt-Anchor" href="#84-集合输出的四种形式"></a> 8.4 集合输出的四种形式</h2><p><strong>Iterator迭代输出</strong></p><p>只允许从前到后进行输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用迭代器输出</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果想要在迭代过程中进行数据的删除，需要使用iterator的remove方法，而不是集合的remove方法。使用后者会出现java.util.ConcurrentModificationException</p></blockquote><p><strong>ListIterator双向迭代输出</strong></p><p>如果想要获得ListIterator接口，实例化时依赖List子接口</p><table><thead><tr><th>定义的方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasNext();</td><td>后面有没有数据</td></tr><tr><td>E next();</td><td>获取下一个数据</td></tr><tr><td>boolean hasPrevious();</td><td>前面有没有数据</td></tr><tr><td>E previous();</td><td>获取前一个数据</td></tr><tr><td>void add(E e);</td><td>添加</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从前向后输出</span><span class="token keyword">while</span><span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从后向前输出</span><span class="token keyword">while</span><span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>迭代时有一个指针进行移动，指定需要遍历的每个对象，上面的过程实际上是有一个指针从头跑到尾进行正向的输出，此时指针在最后，倒着往回走，完成第二个while循环，达成倒着输出。倘若没有第一个while正向输出使指针走到最后，直接后向前迭代输出使无法完成的</p></blockquote><p><strong>Enumeration枚举输出</strong></p><p>这个输出接口主要是为了Vector接口服务，只为其服务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 获取Enumeration</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personEnumeration <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否有下一个</span><span class="token keyword">while</span><span class="token punctuation">(</span>personEnumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取当前的数据</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personEnumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>forEach输出</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张柳"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张柳"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// lambda写法</span>  all<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>person<span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="85-map接口"><a class="markdownIt-Anchor" href="#85-map接口"></a> 8.5 Map接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>  <span class="token comment">// Map集合元素数量</span>  <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判空</span>  <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 是否包含某key</span>  <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 是否包含某value</span>  <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过key获取value</span>  <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 向map中添加元素</span>  <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过key删除某元素</span>  <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将一个map的元素全部添加到当前map中</span>  <span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清空map</span>  <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回Entry的set集合</span>  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/Map%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="Map继承关系" /></p><h3 id="851-hashmap"><a class="markdownIt-Anchor" href="#851-hashmap"></a> 8.5.1 HashMap</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// key重复,进行数据覆盖,返回值是旧数据</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// key可为空</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// value可为空</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>HashMap源码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 充填因子默认0.75</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 对key进行hash处理,生成hash码</span>  <span class="token comment">// putVal方法中，提供一个Node节点进行数据的保存</span>  <span class="token comment">// 而在使用putVal方法过程中，会调用resize的方法，可以进行容量的扩充</span>  <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>HashMap的put操作如何实现的扩充：</strong></p><ul><li>在HashMap类中，提供一个初始容量大小的常量，值为16，也就是说，默认可以保存最大内容是16</li><li>当保存的内容数量超过阈值（0.75）时，会进行扩充，调用resize方法</li><li>在扩充的时候，进行成倍扩充</li></ul><p><strong>HashMap工作原理：</strong></p><p>在HashMap之中进行数据存储是利用Node类完成，这种情况下，说明这种情况只能是链表或者二叉树，在数据量不大的情况下，链表查找的时间复杂O(n)，与树的查找时间复杂度O(logn)差别不是特别大。</p><p>但是在JDK1.8后，HashMap的实现出现改变，需要适应大数据，其存储发生变化。在HashMap之中有一个常量：<code>static final int TREEIFY_THRESHOLD = 8</code>，在保存的数据个数没有超过阈值8时，会按照链表存储，一旦超过，会将链表保存为红黑树，利用左旋与右旋实现平衡，提高查找效率。</p><h3 id="852-linkedhashmap"><a class="markdownIt-Anchor" href="#852-linkedhashmap"></a> 8.5.2 LinkedHashMap</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作与HashMap一致，区别在于HashMap保存顺序与输入顺序无关，而LinkedHashMap保存于输入顺序一致</p><h3 id="853-hashtable"><a class="markdownIt-Anchor" href="#853-hashtable"></a> 8.5.3 HashTable</h3><p>与Vector和Enumeration一样，属于最早一批动态数组实现类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Dictionary</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>key 和 value不能为空</li><li>线程安全</li></ul><h3 id="854-treemap"><a class="markdownIt-Anchor" href="#854-treemap"></a> 8.5.4 TreeMap</h3><p>实现Comparable实现排序</p><h3 id="855-mapentry接口"><a class="markdownIt-Anchor" href="#855-mapentry接口"></a> 8.5.5 Map.Entry接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有的key-value数据封装在Entry接口中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取key</span>  <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取value</span>  <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置value</span>  <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义Entry：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">V</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">MyEntry</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>迭代器遍历Map：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过EntrySet获取Set集合，其中每个元素都是Entry</span>  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Set有迭代器，获取迭代器</span>  <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每个指针指向的都是Entry</span>    <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每个Entry都getKey和getValue方法</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将Map的key值转存到Set集合中</span>  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历Set集合中的每个key，通过key获得HashMap中的value值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value:"</span> <span class="token operator">+</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="86-集合工具类"><a class="markdownIt-Anchor" href="#86-集合工具类"></a> 8.6 集合工具类</h2><h3 id="861-stack"><a class="markdownIt-Anchor" href="#861-stack"></a> 8.6.1 Stack</h3><p>继承Vector类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 入栈,返回入栈元素</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"silverbeats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 出栈,返回出栈元素</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查看栈顶</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="862-queue"><a class="markdownIt-Anchor" href="#862-queue"></a> 8.6.2 Queue</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 两种添加方法</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"silverbeats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"末尾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 队首出队列</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查看队首</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优先级队列，可以排序存储</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [x,y,z]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="863-properties"><a class="markdownIt-Anchor" href="#863-properties"></a> 8.6.3 Properties</h3><p>操作内容只能是String类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Properties</span> <span class="token keyword">extends</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置只能是字符串</span>prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"silverbeats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印silverbeats</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印NotFound</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">,</span> <span class="token string">"NotFound"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将prop保存到文件中,所有的中文注释会自动进行转码处理</span>prop<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/hello.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"中文注释,English"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取资源文件</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/hello.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="864-collections工具类"><a class="markdownIt-Anchor" href="#864-collections工具类"></a> 8.6.4 Collections工具类</h3><p>java提供的，一组集合数据的操作工具类，可以操作Collection接口、Map接口有关的所有集合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一次性添加多个数据</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反转ArrayList[A, R, Q, M, C, D]</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序[A, C, D, M, Q, R]</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 二分查找,返回比较索引位置</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="87-stream数据流"><a class="markdownIt-Anchor" href="#87-stream数据流"></a> 8.7 Stream数据流</h2><p>Stream主要功能是进行数据的分析，同时针对集合中的数据进行分析操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">default</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">StreamSupport</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Spring"</span><span class="token punctuation">,</span> <span class="token string">"SpringMVC"</span><span class="token punctuation">,</span> <span class="token string">"Mybatis"</span><span class="token punctuation">,</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取Stream接口对象</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出元素个数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将stream中每个元素都转为小写,并统计其中包含"j"的元素个数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">-></span> ele<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一种链式调用</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> stream  <span class="token comment">// 过滤</span>  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">-></span> ele<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 去重复</span>  <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//跳过2个</span>  <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 取出2个</span>  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 收集到List集合中</span>  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="88-mapreduce模型"><a class="markdownIt-Anchor" href="#88-mapreduce模型"></a> 8.8 MapReduce模型</h2><p>在进行数据分析处理之中，有一个MapReduce模型，这个模型分为：Map处理部分和Reduce分析部分，在分析之前，需要对数据进行处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> amount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"娃娃1"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"娃娃2"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"电脑"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"茶杯"</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"蛋糕"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 购买商品中,是娃娃的信息数据,并进行商品单价和数量的处理,随后分析汇总</span>    <span class="token class-name">DoubleSummaryStatistics</span> summaryStatistics <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">-></span> ele<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"娃"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>orderObject <span class="token operator">-></span> orderObject<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> orderObject<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单数量："</span><span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"购买总价："</span><span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均花费："</span><span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最高花费："</span><span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最低花费："</span><span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-jdbc"><a class="markdownIt-Anchor" href="#9-jdbc"></a> 9 JDBC</h1><p><img data-src="http://resource.silverbeats.cn/static/images/java/jdbc.png" alt="jdbc" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Statement</span> <span class="token keyword">extends</span> <span class="token class-name">Wrapper</span><span class="token punctuation">,</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 查询</span>  <span class="token class-name">ResultSet</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token comment">// 更新、删除、增加</span>  <span class="token keyword">int</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/mybatistest?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"</span><span class="token punctuation">;</span><span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token class-name">String</span> PASSWORD <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment">//1.加载驱动程序</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 获得数据库连接</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.获取Statement接口对象,操作数据库,实现增删改查</span><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"insert into USER (id,name, pwd) values (20,'silverbeats', 'hulala')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"delete from user where id = 20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"update user set name = 'silverbeats' where id = 5 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from USER "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断resultSet是否有数据</span><span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 通过列名来获取数据,列的数据类型不同,有不同的get方法</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="91-statement的问题"><a class="markdownIt-Anchor" href="#91-statement的问题"></a> 9.1 statement的问题</h2><p>在statement接口里面如果想要执行SQL语句，需要使用字符串实现SQL，如果要结合用户输入数据的情况下，会存在问题：</p><ul><li>sql拼接处理麻烦，编写维护困难</li><li>不能很好的描述日期形式</li><li>对于敏感字符数据无法进行合理拼凑</li></ul><h2 id="92-preparedstatement"><a class="markdownIt-Anchor" href="#92-preparedstatement"></a> 9.2 PreparedStatement</h2><p>为了解决Statement接口存在的缺点，java.sql包里面提供PreparedStatement子接口。</p><p><img data-src="http://resource.silverbeats.cn/static/images/java/preparedStatement.png" alt="preparedStatement" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PreparedStatement</span> <span class="token keyword">extends</span> <span class="token class-name">Statement</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into user(id, name, pwd) values(?,?,?)"</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在执行数据库操作之前,为占位符设置内容</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"silverbeats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// prepareStatement.setDate();</span><span class="token comment">// prepareStatement.setDouble();</span>prepareStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prepareStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询全部数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> prepareStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token operator">+</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">+</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据id查数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where id = ?"</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> prepareStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token operator">+</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">+</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>分页查找</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user limit ?,?"</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>currentPage<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> prepareStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模糊查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where name like ?"</span><span class="token punctuation">;</span><span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">"silverbeats"</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"%"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">java高级,包含常用集合、线程、IO流、反射等内容，其中内容比较精简,不全</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    <category term="语言基础" scheme="blog.silverbeats.cn/categories/java/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="blog.silverbeats.cn/tags/java/"/>
    
    <category term="java高级" scheme="blog.silverbeats.cn/tags/java%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>java题目汇总</title>
    <link href="blog.silverbeats.cn/java%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
    <id>blog.silverbeats.cn/java%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB/</id>
    <published>2020-10-29T12:56:48.000Z</published>
    <updated>2020-11-04T09:09:38.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-多线程题目"><a class="markdownIt-Anchor" href="#1-多线程题目"></a> 1 多线程题目</h1><h2 id="11-runnable与callable区别"><a class="markdownIt-Anchor" href="#11-runnable与callable区别"></a> 1.1 Runnable与Callable区别</h2><blockquote><p>Runnable与Callable区别</p></blockquote><ul><li>Runnable是在JDK1.0是否提出的多线程的接口实现，Callable是在JDK1.5之后提出的</li><li>Runnable只提供run方法，没有返回值</li><li>Callable接口提供call方法，可以有返回值</li></ul><h2 id="12-volatile与synchronized区别"><a class="markdownIt-Anchor" href="#12-volatile与synchronized区别"></a> 1.2 volatile与synchronized区别</h2><blockquote><p>volatile与synchronized区别</p></blockquote><ul><li>volatile主要在属性上使用，synchronized用户代码块与方法上使用</li><li>volatile无法描述同步的处理，只是一种直接内存的处理，避免副本操作</li><li>synchronized是实现同步的</li></ul><h1 id="2-java类库题目"><a class="markdownIt-Anchor" href="#2-java类库题目"></a> 2 Java类库题目</h1><h2 id="21-string-stringbuffer与stringbuilder区别"><a class="markdownIt-Anchor" href="#21-string-stringbuffer与stringbuilder区别"></a> 2.1 String、StringBuffer与StringBuilder区别</h2><blockquote><p>String、StringBuffer与StringBuilder区别</p></blockquote><ul><li>String类是字符串的首选，其最大特点是内容不可修改</li><li>StringBuilder和StringBuffer类的内容允许修改</li><li>StringBuffer是在JDK1.0就有的，StringBuilder是在JDK1.5之后提供</li><li>StringBuffer线程安全，方法都有synchronized关键字进行标注，StringBuilder线程不安全</li></ul><h2 id="22-comparable与comparator区别"><a class="markdownIt-Anchor" href="#22-comparable与comparator区别"></a> 2.2 Comparable与Comparator区别</h2><blockquote><p>Comparable与Comparator区别</p></blockquote><ul><li>java.lang.Comparable是在类定义的时候实现的父接口，主要用于定义排序规则，里面只有compareTo方法</li><li>java.util.Comparator是挽救比较器操作，需要设置单独的比较器规则类实现排序，里面有compare方法</li></ul><h1 id="3-集合题目"><a class="markdownIt-Anchor" href="#3-集合题目"></a> 3 集合题目</h1><h2 id="31-arraylist-linkedlist-vector各自的特点"><a class="markdownIt-Anchor" href="#31-arraylist-linkedlist-vector各自的特点"></a> 3.1 ArrayList、LinkedList、Vector各自的特点</h2><blockquote><p>ArrayList、LinkedList、Vector各自的特点</p></blockquote><p><strong>ArrayList</strong></p><ul><li>底层使用Object数组实现</li><li>使用无参构造创建对象时，使用空数组，在这种情况下再执行add添加，才会创建一个容量为10的Object数组</li><li>扩充时，新数组大小是原先的1.5倍。比如原先10，扩充后是15</li><li>扩充时底层使用System.arraycopy</li><li>list集合定义通过index来get某个位置的元素，时间复杂度O(1)</li></ul><p><strong>LinkedList</strong></p><ul><li>底层是双向链表，每个节点有pre和next指针</li><li>list集合定义通过index来get某个位置的元素，时间复杂度O(n)</li></ul><p><strong>Vector</strong></p><ul><li>继承结构与ArrayList一致</li><li>每个操作方法都有同步关键字synchronized，线程安全</li><li>使用无参构造时，会创建一个容量10的Object数组</li></ul><h2 id="32-collectionremove和iteratorremove区别"><a class="markdownIt-Anchor" href="#32-collectionremove和iteratorremove区别"></a> 3.2 Collection.remove和Iterator.remove区别</h2><blockquote><p>Collection.remove和Iterator.remove区别</p></blockquote><p>进行迭代输出时，如果使用了Collection.remove方法会造成并发更新异常，导致程序出错，而使用后者可以实现正常删除</p><h2 id="33-hashmap的put操作如何实现的扩充"><a class="markdownIt-Anchor" href="#33-hashmap的put操作如何实现的扩充"></a> 3.3 HashMap的put操作如何实现的扩充</h2><blockquote><p>HashMap的put操作如何实现的扩充</p></blockquote><ul><li>在HashMap类中，提供一个初始容量大小的常量，值为16，也就是说，默认可以保存最大内容是16</li><li>当保存的内容数量超过阈值（0.75）时，会进行扩充，调用resize方法</li><li>在扩充的时候，进行成倍扩充</li></ul><h2 id="34-hashmap的工作原理"><a class="markdownIt-Anchor" href="#34-hashmap的工作原理"></a> 3.4 HashMap的工作原理</h2><blockquote><p>HashMap的工作原理</p></blockquote><p>在HashMap之中进行数据存储是利用Node类完成，这种情况下，说明这种情况只能是链表或者二叉树，在数据量不大的情况下，链表查找的时间复杂O(n)，与树的查找时间复杂度O(logn)差别不是特别大。</p><p>但是在JDK1.8后，HashMap的实现出现改变，需要适应大数据，其存储发生变化。在HashMap之中有一个常量：<code>static final int TREEIFY_THRESHOLD = 8</code>，在保存的数据个数没有超过阈值8时，会按照链表存储，一旦超过，会将链表保存为红黑树，利用左旋与右旋实现平衡，提高查找效率。</p><h2 id="35-hashtable与hashmap之间的区别"><a class="markdownIt-Anchor" href="#35-hashtable与hashmap之间的区别"></a> 3.5 HashTable与HashMap之间的区别</h2><blockquote><p>HashTable与HashMap之间的区别</p></blockquote><ul><li><p>HashMap线程不安全，效率高，允许key或者value为null</p></li><li><p>HashTable线程安全，效率低，不允许key或者value为null</p></li><li><p>HashTable有线程同步检测synchronized</p></li></ul>]]></content>
    
    
    <summary type="html">java题目汇总</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    
    <category term="java题目" scheme="blog.silverbeats.cn/tags/java%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>java高级</title>
    <link href="blog.silverbeats.cn/java%E9%AB%98%E7%BA%A7/"/>
    <id>blog.silverbeats.cn/java%E9%AB%98%E7%BA%A7/</id>
    <published>2020-10-27T13:27:17.000Z</published>
    <updated>2020-10-31T14:09:15.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-多线程"><a class="markdownIt-Anchor" href="#1-多线程"></a> 1 多线程</h1><p>真正的多线程是指有多个CPU，即多核处理器</p><ol><li>线程就是独立的执行路径</li><li>在程序运行时，即使没有自己创建线程，后台也会存在多个线程，如gc线程、main主线程</li><li>main()称之为主线程，为系统的入口点，用于执行整个程序</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统密切相关的，先后顺序是不能人为干预的</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制</li><li>线程会带来额外的开销，如CPU调度时间，并发控制开销</li><li>每个线程在自己的工作内存交付，加载和存储主内存控制不当会造成数据不一致</li></ol><h2 id="11-多线程的创建"><a class="markdownIt-Anchor" href="#11-多线程的创建"></a> 1.1 多线程的创建</h2><h3 id="111-继承thread类"><a class="markdownIt-Anchor" href="#111-继承thread类"></a> 1.1.1 继承Thread类</h3><ul><li>继承Thread类</li><li>重写run方法</li><li>创建线程对象，调用该对象的start方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 继承Thread</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendsThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token comment">// 2. 重写run方法,线程的主体方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一边听歌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 3. 创建线程对象并启动</span><span class="token class-name">ExtendsThread</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtendsThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建子类对象,仅仅是创建了线程对象</span>st<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动,不保证立即运行cpu调用</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一边coding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>start和run方法的区别</strong></p><img data-src="http://resource.silverbeats.cn/static/images/java/start和run的区别.png" alt="start和run的区别"><p><strong>Thread类下的start方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 线程不允许重复启动</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在Java程序执行的过程中考虑对于不同层次开发者的需求，所以支持有本地的操作系统函数调用，被称为JNI（Java Native Interface）技术，但是Java开发中不推荐这样使用，利用这项技术可以使用操作系统提供的底层函数进行一些特殊处理，而在Thread中提供的start0就表示此方法依赖于不同的操作系统实现</span><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/Thread%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90.png" alt="Thread执行分析" /></p><h3 id="112-实现runnable接口"><a class="markdownIt-Anchor" href="#112-实现runnable接口"></a> 1.1.2 实现Runnable接口</h3><ul><li>实现Runnable接口：<mark>它是函数式接口，可以用Lambda表达式</mark></li><li>重写run方法</li><li>执行线程需要Runnable接口实现类</li><li>调用start方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token comment">//线程入口</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一边听歌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/*RunThread sr = new RunThread();//创建实现类对象Thread t = new Thread(sr);//创建代理类对象t.start();//启动线程，不保证立即运行cpu调用*/</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RunThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一边coding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="113-thread与runnable关系"><a class="markdownIt-Anchor" href="#113-thread与runnable关系"></a> 1.1.3 Thread与Runnable关系</h3><p>优先使用Runnable实现多线程，可以避免继承的局限性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Thread类也实现了Runnable接口，重写Thread的run方法实际上就是在重写Runnable的run方法</p><p><img data-src="http://resource.silverbeats.cn/static/images/java/Thread%E4%B8%8ERunnable%E5%85%B3%E7%B3%BB.png" alt="Thread与Runnable关系" /></p><p>多线程设计之中，使用了代理设计模式结构，用户自定义的线程主体只是负责项目核心功能的实现，而所有的辅助实现全部交给Thread类处理。</p><p>在进行Thread启动多线程的时候，调用的是start()方法，而后找到的run()方法，但通过Thread的构造方法传递Runnable接口对象的时候，那么该接口对象将被Thread类中的target属性所保存，在start()方法执行的时候，会调用run()方法，而这个run()方法实际上去调用的是Runnable接口子类被复写过的run()方法。</p><p>多线程开发的本质在于多个线程可以进行同一资源的抢占，那么Thread主要描述的线程，而资源的描述是Runnable完成的</p><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91.png" alt="多线程开发" /></p><h3 id="114-实现callable接口"><a class="markdownIt-Anchor" href="#114-实现callable接口"></a> 1.1.4 实现Callable接口</h3><p>依靠Runnable接口实现多线程有一个缺点就是其run方法没有返回值，JDK1.5之后，提供Callable接口，其call方法可以设置返回值类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/Callable%E8%AF%A6%E8%A7%A3.png" alt="Callable" /></p><p>自定义的线程实现Callable接口，通过FutureTask的有参构造器创建FutureTask对象。而FutureTask如何与Runnable关联起来的?</p><p>FutureTask类实现RunnableFuture接口，RunnableFuture继承Future接口和Runnable接口，故FutureTask具备了从Future接口定义的get返回值的方法，以及Runnable中的run方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"线程执行完毕"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-线程状态"><a class="markdownIt-Anchor" href="#12-线程状态"></a> 1.2 线程状态</h2><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%8101.png" alt="线程状态" /></p><p><img data-src="http://resource.silverbeats.cn/static/images/java//%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%8102.png" alt="线程状态" /></p><h3 id="121-线程方法"><a class="markdownIt-Anchor" href="#121-线程方法"></a> 1.2.1 线程方法</h3><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">sleep()</td><td style="text-align:center">①使线程停止运行一段时间，将处于阻塞状态<br>②如果调用了sleep方法后，没有其他等待执行的线程，这个时候当前线程不会马上恢复执行</td></tr><tr><td style="text-align:center">join()</td><td style="text-align:center">阻塞指定线程等到另一个线程完成以后再继续执行</td></tr><tr><td style="text-align:center">yield()</td><td style="text-align:center">①让当前正在执行的线程暂停，不是阻塞线程，而是将线程转入就绪状态<br/>②调用了yield方法后，如果没有其他等待执行的线程，此时当前线程就会马上恢复执行</td></tr><tr><td style="text-align:center">setDaemon()</td><td style="text-align:center">①可以将指定的线程设置为后台线程，守护线程<br/>②创建用户线程的线程结束后，后台线程也随之消亡<br/>③只能在线程启动之前把他设为后台线程</td></tr><tr><td style="text-align:center">setPriority(int newPriority)</td><td style="text-align:center">①线程的优先级代表的是概率<br/>②范围从1—10，<mark>默认5</mark></td></tr><tr><td style="text-align:center">getPriority()</td><td style="text-align:center">获取优先级</td></tr><tr><td style="text-align:center">stop()</td><td style="text-align:center">停止线程，<mark>不推荐使用</mark></td></tr><tr><td style="text-align:center">isAlive()</td><td style="text-align:center">判断线程是否还活着</td></tr><tr><td style="text-align:center">setName()</td><td style="text-align:center">给线程起一个名字</td></tr><tr><td style="text-align:center">getName()</td><td style="text-align:center">获取线程的名字</td></tr><tr><td style="text-align:center">currentThread()</td><td style="text-align:center">取得当前正在运行的线程对象，也就是获取自己本身</td></tr></tbody></table><h3 id="122-线程的停止"><a class="markdownIt-Anchor" href="#122-线程的停止"></a> 1.2.2 线程的停止</h3><p>通过标志位来决定线程是否停止</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStop</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="123-线程休眠sleep"><a class="markdownIt-Anchor" href="#123-线程休眠sleep"></a> 1.2.3 线程休眠Sleep</h3><ul><li>sleep(时间)，指定当前线程阻塞的毫秒数</li><li>sleep存在异常InterruptedException</li><li>sleep时间达到后线程进入就绪状态</li><li>sleep可以模拟网络延迟，倒计时等</li><li>每一个对象都有一个锁，sleep不会释放锁</li></ul><h3 id="124-线程礼让yield"><a class="markdownIt-Anchor" href="#124-线程礼让yield"></a> 1.2.4 线程礼让Yield</h3><p>礼让不一定成功</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestYield</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MyYield</span> myYield <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myYield<span class="token punctuation">,</span> <span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myYield<span class="token punctuation">,</span> <span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyYield</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程结束执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="125-线程强制执行join"><a class="markdownIt-Anchor" href="#125-线程强制执行join"></a> 1.2.5 线程强制执行Join</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试join方法，即插队</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJoin</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 启动线程</span><span class="token class-name">TestJoin</span> testJoin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testJoin<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// thread插队,当其执行完才继续执行主线程</span>thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程vip来了"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="126-观测线程的状态"><a class="markdownIt-Anchor" href="#126-观测线程的状态"></a> 1.2.6 观测线程的状态</h3><ul><li><p><code>NEW</code><br />尚未启动的线程处于此状态。</p></li><li><p><code>RUNNABLE</code><br />在Java虚拟机中执行的线程处于此状态。</p></li><li><p><code>BLOCKED</code><br />被阻塞等待监视器锁定的线程处于此状态。</p></li><li><p><code>WAITING</code><br />正在等待另一个线程执行特定动作的线程处于此状态。</p></li><li><p><code>TIMED_WAITING</code><br />正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。</p></li><li><p><code>TERMINATED</code><br />已退出的线程处于此状态。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>thread</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestState</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"////////"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 观察状态</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span> state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NEW</span><span class="token comment">// 线程启动，观察状态</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Run</span><span class="token comment">// 只要线程不终止就一直输出状态</span><span class="token keyword">while</span><span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token punctuation">.</span>TERMINATED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TIMED_WAITING</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="127-线程的优先级"><a class="markdownIt-Anchor" href="#127-线程的优先级"></a> 1.2.7 线程的优先级</h3><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。先设置优先级，再启动</p><ul><li>Thread.MIN_PRIORITY = 1</li><li>Thread.MAX_PRIORITY = 10</li><li>Thread.NORM_PRIORITY = 5</li></ul><h3 id="128-守护线程"><a class="markdownIt-Anchor" href="#128-守护线程"></a> 1.2.8 守护线程</h3><ul><li>线程分为用户线程和守护线程。虚拟机必须确保用户线程执行完毕。所有的守护线程都是围绕在用户线程周围，程序结束，守护线程也没有存在的必要，自然就会消失。在JVM中最大的守护线程是GC线程。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDaemon</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">God</span> god <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">God</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">You</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">You</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>god<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将该线程设置为守护线程</span>thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 线程启动</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动用户线程</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">You</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">36500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"happy world"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"goodbye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">God</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"god bless you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="129-volatile关键字"><a class="markdownIt-Anchor" href="#129-volatile关键字"></a> 1.2.9 volatile关键字</h3><p>主要用户属性的定义，被volatile修饰的属性表示此属性为直接数据操作，而不进行副本的拷贝处理。在正常进行变量处理的时候往往会经历如下的步骤：</p><ul><li>获取变量原有的数据内容副本</li><li>利用副本作为变量进行数学计算</li><li>将计算结果保存到原始空间中</li></ul><p>而属性上被volatile关键字修饰，则不会拷贝，直接操作原始变量，节省拷贝的时间。</p><p><img data-src="http://resource.silverbeats.cn/static/images/java/volatile.png" alt="volatile" /></p><h2 id="13-线程通信"><a class="markdownIt-Anchor" href="#13-线程通信"></a> 1.3 线程通信</h2><h3 id="131-线程同步"><a class="markdownIt-Anchor" href="#131-线程同步"></a> 1.3.1 线程同步</h3><p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象，这是需要线程同步。线程同步是一个等待机制，多个需要同时访问此对象的线程进入这个<mark>对象的等待池</mark>形成队列，，等待前面的线程使用完毕，下一个线程再使用。</p><h4 id="1311-synchronized"><a class="markdownIt-Anchor" href="#1311-synchronized"></a> 1.3.1.1 Synchronized</h4><p>synchronized方法控制对“成员变量|类变量”对象的访问：每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁，直到从该方法返回时才将锁给释放，此后阻塞的线程方能获得该锁，重新进入可执行状态</p><p>缺点：若将一个大的方法声明为synchronized将会大大影响效率</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> synchronizedLock <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SafeWeb12306</span> web <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SafeWeb12306</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>web<span class="token punctuation">,</span> <span class="token string">"码畜"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>web<span class="token punctuation">,</span> <span class="token string">"码蟥"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>web<span class="token punctuation">,</span> <span class="token string">"码农"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SafeWeb12306</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//锁的是this，锁的是web对象，每次操作时会检查这个对象能不能用</span><span class="token comment">//锁的是资源，对象的资源，对象是this，this代表web对象</span><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tickets<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用同步块来锁定</span><span class="token keyword">class</span> <span class="token class-name">SafeWeb12306</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token comment">//……</span><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//考虑的是没票的情况</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//考虑最后的一张票的小</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tickets<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1312-同步块"><a class="markdownIt-Anchor" href="#1312-同步块"></a> 1.3.1.2 同步块</h4><p>同步块：synchronized(obj) {} ，obj称为同步监视器</p><ul><li><p>obj可以为任何对象，但是推荐使用共享资源作为同步监视器，</p></li><li><p>同步方法中无需指定同步监视器，因为同步方法的同步监视器是this即该对象本身，或class即类的模子</p></li></ul><p>同步监视器的执行过程</p><ol><li>第一个线程访问：锁定同步监视器，执行其中代码</li><li>第二个线程执行，发现同步监视器被锁定，无法访问</li><li>第一个线程访问完毕后，解锁同步监视器</li><li>第二个线程访问，发现同步监视器未锁定，锁定并访问</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockWedding</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">165</span><span class="token punctuation">,</span> <span class="token string">"结婚礼金"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Drawing</span> hus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"hus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Drawing</span> wife <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token string">"wife"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>hus<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>wife<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//账户类</span><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> money<span class="token punctuation">;</span><span class="token comment">// 金额</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 账户名字</span><span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Drawing</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span><span class="token class-name">Account</span> account<span class="token punctuation">;</span><span class="token comment">// 取钱账户</span><span class="token keyword">int</span> drawingMoney<span class="token punctuation">;</span><span class="token comment">// 要取的钱</span><span class="token keyword">int</span> pocketMoney<span class="token punctuation">;</span><span class="token comment">// 手里的钱</span><span class="token keyword">public</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">,</span> <span class="token keyword">int</span> drawingMoney<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>drawingMoney <span class="token operator">=</span> drawingMoney<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//锁定具体对象</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//钱不够就可以不去执行下面的内容，这个判断对于高并发的提升很重要</span><span class="token keyword">if</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>money <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span>money <span class="token operator">-</span> drawingMoney <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>account<span class="token punctuation">.</span>money <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>drawingMoney<span class="token punctuation">;</span>pocketMoney <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>drawingMoney<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->账户余额为："</span> <span class="token operator">+</span> account<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->口袋的钱为："</span> <span class="token operator">+</span> pocketMoney<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="132-死锁"><a class="markdownIt-Anchor" href="#132-死锁"></a> 1.3.2 死锁</h3><p>不要锁套锁，不然可能会死锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Lipstick</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Mirror</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Markup</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token class-name">Lipstick</span> lipstick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lipstick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">Mirror</span> mirror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token comment">//选择</span><span class="token class-name">String</span> girl<span class="token punctuation">;</span><span class="token comment">//名字</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//化妆</span><span class="token function">markup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Markup</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice<span class="token punctuation">,</span> <span class="token class-name">String</span> girl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>choice <span class="token operator">=</span> choice<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">=</span> girl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//相互持有对方的对象锁，才会有可能造成死锁</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">markup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">+</span> <span class="token string">"获得口红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">+</span> <span class="token string">"获得镜子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">+</span> <span class="token string">"获得镜子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">+</span> <span class="token string">"获得口红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="133-可重入锁"><a class="markdownIt-Anchor" href="#133-可重入锁"></a> 1.3.3 可重入锁</h3><p>从JDK1.5开始，java提供了更强大的线程同步机制——通过显示定义同步锁对象来实现同步。同步锁使用Lock对象充当。</p><p>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应该先获得Lock对象</p><p>ReentrantLock类实现了Lock，它拥有与Synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显示加锁、释放锁。</p><p>锁作为并发共享数据保证一致性的工具，大多数内置锁都是可重入的，也就是说，如果某个线程试图获取一个已经由它自己持有的锁时，那么这个请求会立刻成功，并且会将这个锁的计数值加1，而当线程退出同步代码块时，计数器将会递减，当计数器为0时，锁释放。如果没有可重入锁的支持，在第二次企图获取锁时将会进入死锁状态。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TestLock2</span> testLock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestLock2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">,</span> <span class="token string">"线程3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TestLock2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"拿到了"</span> <span class="token operator">+</span> tickets<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-线程协作"><a class="markdownIt-Anchor" href="#14-线程协作"></a> 1.4 线程协作</h2><h3 id="141-生产者与消费者模式"><a class="markdownIt-Anchor" href="#141-生产者与消费者模式"></a> 1.4.1 生产者与消费者模式</h3><p>线程通信方法：</p><ol><li><p>管程法：用缓冲区实现</p></li><li><p>信号灯法</p></li></ol><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">final void wait()</td><td style="text-align:center">表示线程一直等待，直到其他线程通知，与sleep不同，它会释放锁</td></tr><tr><td style="text-align:center">final void wait(long timeout)</td><td style="text-align:center">指定等待的毫秒数</td></tr><tr><td style="text-align:center">final void notify()</td><td style="text-align:center">唤醒一个处于等待状态的线程</td></tr><tr><td style="text-align:center">final void notifyAll()</td><td style="text-align:center">唤醒一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td></tr></tbody></table><p>均是java.lang.Object类的方法，都只能在同步方法或同步代码块中使用，否则会抛出异常</p><ul><li>管程法，利用缓冲区完成并发协作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生产者</span><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 生产者有一个容器</span>  <span class="token class-name">SynContainer</span> container<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token class-name">SynContainer</span> container<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//生产</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      container<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ManTou</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//消费者</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 消费者也需要从缓冲区从拿东西</span>  <span class="token class-name">SynContainer</span> container<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">SynContainer</span> container<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//消费</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费第"</span><span class="token operator">+</span> container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个馒头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 缓冲区,大小10</span><span class="token keyword">class</span> <span class="token class-name">SynContainer</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">ManTou</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManTou</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 存储，生产</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">ManTou</span> bun<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 容器存在空间才能生产</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> buns<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 此时线程阻塞，只有消费者通知生产，解除阻塞</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 容器存在空间</span>    buns<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bun<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存在数据，可以消费了</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取,消费</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">ManTou</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 没有数据，只有等待</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时消费的线程阻塞，只有生产者通知消费，解除阻塞</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 存在数据则消费</span>    <span class="token class-name">ManTou</span> bun <span class="token operator">=</span> buns<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存在空间了，可以继续生产了</span>    <span class="token keyword">return</span> bun<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 馒头</span><span class="token keyword">class</span> <span class="token class-name">ManTou</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">ManTou</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>信号灯法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生产者 演员</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">TV</span> tv<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"奇葩说"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token class-name">TV</span> tv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//消费者 观众</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">TV</span> tv<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tv<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token class-name">TV</span> tv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//同一个资源 电视</span><span class="token keyword">class</span> TV <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> voice<span class="token punctuation">;</span>  <span class="token comment">//信号灯</span>  <span class="token comment">//T 表示演员表演 观众等待</span>  <span class="token comment">//F 表示观众观看 演员等待</span>  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//表演</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">String</span> voice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//观众等待</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//表演</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表演了："</span> <span class="token operator">+</span> voice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>voice <span class="token operator">=</span> voice<span class="token punctuation">;</span>    <span class="token comment">//唤醒，切换信号标志</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//观看</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//演员等待</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//观看</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"听到了 ："</span> <span class="token operator">+</span> voice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//唤醒，切换信号标志</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="142-线程池"><a class="markdownIt-Anchor" href="#142-线程池"></a> 1.4.2 线程池</h3><p>**背景：**经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</p><p>**思路：**提前创建好多个线程，放入线程池中，使用时直接获取，使用完成后放回池中。可以避免平方创建销毁、实现重复利用。类似生活中的交通工具</p><p><strong>好处：</strong></p><ul><li>提供相应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中的线程，不需要每次都创建）</li><li>便于线程管理<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li></ul></li></ul><img data-src="http://resource.silverbeats.cn/static/images/java//线程池.png"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSign</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建线程池</span><span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭链接</span>service<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"lala"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-反射"><a class="markdownIt-Anchor" href="#2-反射"></a> 2 反射</h1><h2 id="21-反射机制概念"><a class="markdownIt-Anchor" href="#21-反射机制概念"></a> 2.1 反射机制概念</h2><p>反射Reflection是Java被视为动态语言的关键，反射机制允许程序在执行期间借助反射的API获取任何类的内部信息，并且能直接操作任意对象的内部属性及方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Sting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个CLass对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以称之为反射</p><p>反射reflection：把java类中的各种结构(方法、属性、构造器、类名)映射成一个个的java对象，利用反射技术可以对一个类进行剖析，反射是框架设计的灵魂</p><p>反射提供的功能</p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>在运行时获取泛型信息</li><li>生成动态代理</li><li>……</li></ul><h2 id="22-获取class对象的4中方法"><a class="markdownIt-Anchor" href="#22-获取class对象的4中方法"></a> 2.2 获取Class对象的4中方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方式一：已知具体类，通过类的class属性来获取，方法最安全，性能最高</span><span class="token class-name">Class</span> clz <span class="token operator">=</span> <span class="token class-name">IPhone</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 方式二：已知某个类的实例，通过该实例的getClass()方法来获取</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> cl <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式三：Class.forName("包名.类名")</span><span class="token class-name">Class</span> cl <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"包名.类名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式四：通过类加载器</span><span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> clazz <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"类的全类名"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>一个类在内存中只有一个Class对象</li><li>一个类被加载后，类的整个结构都会被封装在Class对象中</li><li>Class本身也是个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>Class类是反射的根源，针对任何想要动态加载、运行的类，唯有先获得相应的Class对象</li></ol></blockquote><h2 id="23-class的方法演示"><a class="markdownIt-Anchor" href="#23-class的方法演示"></a> 2.3 Class的方法演示</h2><table><thead><tr><th>Class的方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static ClassforName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体(类、接口、数组类或void)的名称。包名+类名</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的父类Class对象</td></tr><tr><td>Class[] getinterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>获取该类的加载器</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Method getMethod(String name, Class…T)</td><td>返回一个Method对象，此对象的形参类型为paramType。</td></tr><tr><td>Method[] getMethods()</td><td>获取该类以及其父类的public方法</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>获取该类的所有方法</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组，可以获取该类的所有属性</td></tr><tr><td>Field[] getFields()</td><td>获取该类的public属性字段</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUser</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 通过反射获取类的Class对象</span><span class="token class-name">Class</span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取此Class对象的包名+类名</span><span class="token class-name">String</span> name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前Class对象的父类Class对象</span><span class="token class-name">Class</span> superclass <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前Class对象的接口</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取该类的加载器</span><span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个包含某些Constructor对象的数组</span><span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>constructors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取该Class的所有方法</span><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回该Class的所有属性</span><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-有class对象的类型"><a class="markdownIt-Anchor" href="#24-有class对象的类型"></a> 2.4 有Class对象的类型</h2><ul><li>class：外部类，成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2_4</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 类</span><span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 接口</span><span class="token class-name">Class</span> comparableClass <span class="token operator">=</span> <span class="token class-name">Comparable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 数组</span><span class="token class-name">Class</span> aClass <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 二维数组</span><span class="token class-name">Class</span> aClass1 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 注解</span><span class="token class-name">Class</span> overrideClass <span class="token operator">=</span> <span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 枚举类型</span><span class="token class-name">Class</span> elementTypeClass <span class="token operator">=</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 基本数据类型</span><span class="token class-name">Class</span> integerClass <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// void</span><span class="token class-name">Class</span> voidClass <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// Class</span><span class="token class-name">Class</span> classClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">类 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>类<span class="token punctuation">)</span>clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">class</span>类型参数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="25-类加载和内存分析"><a class="markdownIt-Anchor" href="#25-类加载和内存分析"></a> 2.5 类加载和内存分析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2_4</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 只要类型和维度相同，就是同一个Class</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/java/java内存分析图.png" alt="java内存分析图"><img data-src="http://resource.silverbeats.cn/static/images/java/类的加载.png" alt="类的加载"><img data-src="http://resource.silverbeats.cn/static/images/java/类的加载2.png" alt="类的加载"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test05</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A的静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A的无参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// A的静态代码块</span><span class="token comment">// A的无参构造</span><span class="token comment">// 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>加载到内存，产生一个类对应的Class对象</p></li><li><p>链接，链接结束后m=0</p></li><li><p>初始化</p><ul><li><p>执行&lt;clinit&gt;(){</p><p>m = 100;</p><p>System.out.println(“A的静态代码块”);<br />m = 200;</p><p>}</p></li></ul></li></ol><h2 id="26-分析类的初始化"><a class="markdownIt-Anchor" href="#26-分析类的初始化"></a> 2.6 分析类的初始化</h2><p>类的主动引用(一定会发生类的初始化)</p><ul><li>虚拟机启动时，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员(除了final常量)和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul><p>类的被动引用(不会发生类的初始化)</p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过之类引用父类的静态变量，不会导致之类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化(常量在链接阶段就存入调用类的常量池中了)</li></ul><h2 id="25-类的加载器classloader"><a class="markdownIt-Anchor" href="#25-类的加载器classloader"></a> 2.5 类的加载器ClassLoader</h2><p>**类加载的作用：**将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</p><p>**类缓存：**标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载(缓存)一段时间，不过JVM垃圾回收机制可以回收这些Class对象。</p><img data-src="http://resource.silverbeats.cn/static/images/java/类加载器.png" alt="类加载器"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test05</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取系统类的加载器</span><span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sun.misc.Launcher$AppClassLoader@18b4aac2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取系统类加载器的父类——>扩展类加载器</span><span class="token class-name">ClassLoader</span> parent <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sun.misc.Launcher$ExtClassLoader@1540e19d</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取扩展类加载器的父类——>引导类加载器</span><span class="token class-name">ClassLoader</span> parent1 <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test05</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 测试当前类是哪个加载器加载的</span><span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 系统类加载器AppClassLoader</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 测试JDK内置的类是由谁加载的</span><span class="token class-name">ClassLoader</span> classLoader1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// null, 也就是引导类加载器</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>获取系统类加载器可以加载的路径</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>双亲委派机制</li></ul></blockquote><h2 id="26-创建运行时类的对象"><a class="markdownIt-Anchor" href="#26-创建运行时类的对象"></a> 2.6 创建运行时类的对象</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获得class对象</span><span class="token class-name">Class</span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过构造器创建对象</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过反射操作方法</span><span class="token class-name">Method</span> setName <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token string">"乌拉拉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过反射操作属性</span><span class="token class-name">Field</span> name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有这一步，会无法操作私有属性</span>name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"enene"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-反射操作泛型"><a class="markdownIt-Anchor" href="#27-反射操作泛型"></a> 2.7 反射操作泛型</h2><p>Java采用泛型擦除机制来引入泛型，java中的泛型仅仅是会给编译器javac使用的，确保数据的安全性和免去强制类型转换问题，但是，一旦便已完成，所有和泛型有关的类型全部擦除</p><p>为了通过反射操作这些类型，java新增<code>ParameterizedType</code>、<code>GenericArrayType</code>、<code>TypeVariable</code>、<code>WildcardType</code>几种类型来代表不能被归一到Class类中的类型但是you和原始类型齐名的类型</p><ul><li><code>ParameterizedType</code>：表示一种参数化类型，比如Collection&lt;String&gt;</li><li><code>GenericArrayType</code>：表示一种元素类型是参数化类型或者类型变量的数据类型</li><li><code>TypeVariable</code>：是各种类型变量的公共父接口</li><li><code>WildcardType</code>：代表一种通配符类型表达式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 获取方法</span><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">Test09</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test01"</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 获取该方法的参数化类型</span><span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> genericParameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 遍历输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> genericParameterType <span class="token operator">:</span> genericParameterTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">+</span> genericParameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果该方法的某个参数还是一个参数化类型</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>genericParameterType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericParameterType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> actualTypeArgument <span class="token operator">:</span> actualTypeArguments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actualTypeArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-反射操作注解"><a class="markdownIt-Anchor" href="#28-反射操作注解"></a> 2.8 反射操作注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取class</span><span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过反射获取注解</span><span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取指定注解的value值</span><span class="token class-name">Table</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获得类指定的注解</span><span class="token class-name">Field</span> name <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FieldL</span> annotation1 <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">FieldL</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation1<span class="token punctuation">.</span><span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation1<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">"db_Student"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@FieldL</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"db_name"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"varchar"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@FieldL</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"db_age"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token annotation punctuation">@FieldL</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"db_id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 表名注解</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Table</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 属性注解</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">FieldL</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> <span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字段名</span><span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字段类型</span><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字段长度</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-java基础类库"><a class="markdownIt-Anchor" href="#3-java基础类库"></a> 3 Java基础类库</h1><h2 id="31-stringbuffer类"><a class="markdownIt-Anchor" href="#31-stringbuffer类"></a> 3.1 StringBuffer类</h2><p>String类是在所有项目开发中一定会使用到的一个功能类，并且这个类拥有如下的特点：</p><ul><li>每个字符串的常量都属于一个String类的匿名对象，并且不可更改</li><li>String有两个常量池：静态常量池、运行时常量池</li><li>String类对象实例化建议使用直接赋值形式完成，会直接将对象保存着静态常量池中，方便重用</li></ul><p>但String类最大的弊端就是字符串不能修改。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token class-name">MyTest</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  temp <span class="token operator">+=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">StringBuffer</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">MyTest</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// helloworld</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  temp<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> strA <span class="token operator">=</span> <span class="token string">"helloworld!"</span><span class="token punctuation">;</span><span class="token class-name">String</span> strB <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strA <span class="token operator">==</span> strB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 实际上strB在编译后执行的代码是：</span><span class="token comment">// StringBuffer buf = new StringBuffer();</span><span class="token comment">// buf.append("hello").append("world").append("!");</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的+，在编译后都变成StringBuffer中的append方法</p><blockquote><p>StringBuilder类与StringBuffer类API一致，前者线程不安全，后者线程安全，再无其他区别</p></blockquote><h2 id="32-charsequence接口"><a class="markdownIt-Anchor" href="#32-charsequence接口"></a> 3.2 CharSequence接口</h2><p>CharSequence是一个描述字符串结构的接口，在这个接口里面有三种常用的之类。</p><ul><li>String</li><li>StringBuilder</li><li>StringBuffer</li></ul><p>CharSequence本身是一个接口，接口中也定义如下的方法：</p><ul><li><p>获取指定索引字符：public char charAt（int index）</p></li><li><p>获取字符串长度：public int length();</p></li><li><p>截取字符串: public CharSequence subSequence(int start, int end)</p></li></ul><h2 id="33-autoclose接口"><a class="markdownIt-Anchor" href="#33-autoclose接口"></a> 3.3 AutoClose接口</h2><p>主要是用于进行资源开发的处理上，实现资源的自动关系，比如文件、网络、数据库开发，由于服务器资源有限，所以使用后一定要关闭释放资源。</p><p>为了更好说明资源的问题，将通过一个消息的发送处理来完成</p><ul><li>手动实现消息发送</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IMessage</span> <span class="token punctuation">&#123;</span><span class="token comment">// 消息发送</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现消息的处理机制</span><span class="token keyword">class</span> <span class="token class-name">NetMessage</span> <span class="token keyword">implements</span> <span class="token class-name">IMessage</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">NetMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【open】获取消息发送链接资源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【close】关闭消息发送资源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【发送消息】"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">NetMessage</span> nm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NetMessage</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>nm<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 发送链接资源</span>nm<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送消息</span>nm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭链接</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>资源自动关闭</li></ul><p>AutoClose在JDK1.7提供，并且只提供close方法，该接口需要结合trycatch使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IMessage</span> <span class="token keyword">extends</span> <span class="token class-name">AutoCloseable</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 消息发送</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现消息的处理机制</span><span class="token keyword">class</span> <span class="token class-name">NetMessage</span> <span class="token keyword">implements</span> <span class="token class-name">IMessage</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">NetMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【open】获取消息发送链接资源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【close】关闭消息发送资源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【发送消息】"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">IMessage</span> nm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NetMessage</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nm<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-runtime类"><a class="markdownIt-Anchor" href="#34-runtime类"></a> 3.4 Runtime类</h2><p>Runtime描述的是运行时的状态，在整个JVM中，是唯一一个与JVM运行状态有关的类，并且都会默认提供一个该类的实例化对象。由于在每一个JVM进程里面只允许提供一个Runtime类的对象，所以整个类的构造方法被私有化，使用的是<strong>单例设计模式</strong>，并且一定会提供一个static方法获取实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饿汉式单例</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/Runtime.png" alt="Runtime" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取实例化对象</span><span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取本机CPU内核数</span><span class="token keyword">int</span> coreNum <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下面的方法都是native方法</span><span class="token comment">// 获取JVM最大可用内存空间,字节为测量单位,默认的配置为本机系统内存的1/4</span><span class="token keyword">long</span> maxMemory <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取JVM可用内存空间,字节为测量单位,默认的配置为本机系统内存的1/64</span><span class="token keyword">long</span> totalMemory <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取JVM空闲内存空间,字节为测量单位,默认的配置为本机系统的</span><span class="token keyword">long</span> freeMemory <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 手动gc处理</span>rt<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-system类"><a class="markdownIt-Anchor" href="#35-system类"></a> 3.5 System类</h2><ul><li>数组拷贝：<code>public static native void arraycopy(Object src, int srcPos,Object dest, int destPos, int length);</code></li><li>获取当前的日期时间数值：<code>public static native long currentTimeMillis();</code>单位ms</li><li>垃圾回收：<code>public static void gc()&#123;Runtime.getRuntime().gc();&#125;</code></li></ul><h2 id="36-cleaner类"><a class="markdownIt-Anchor" href="#36-cleaner类"></a> 3.6 Cleaner类</h2><p>JDK1.9之后提供的一个对象清理操作，主要功能是进行<code>finialize()</code>方法的替代。在C++中有两种特殊的函数：构造函数、析构函数（对象手工回收）。在Java中由GC自动回收，所以，很多情况下不需要使用析构函数，所以Java没有提供这方面支持。</p><p>但是Java本身依然提供了给用户收尾的操作，每一个实例化对象，在回收之前还能定义一些功能让这个对象去做，最初实现收尾的是函数式Object中的finialize方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Deprecated</span><span class="token punctuation">(</span>since<span class="token operator">=</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Member</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">Member</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Member的run方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 实现清除的处理</span><span class="token keyword">class</span> <span class="token class-name">MemberCleaning</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个清除处理</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Cleaner</span> cleaner <span class="token operator">=</span> <span class="token class-name">Cleaner</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Member</span> member<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Cleaner</span><span class="token punctuation">.</span><span class="token class-name">Cleanable</span> cleanable<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">MemberCleaning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>member <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注册使用的对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cleanable <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cleaner<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 启动多线程</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cleanable<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">MemberCleaning</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberCleaning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 中间可以执行一些相关的代码</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除回收处理过程中，更多情况下是对多线程的使用，为了防止有可能造成的延迟处理，许多对象回收前的处理，都是单独通过一个线程完成的</p><h2 id="37-对象克隆"><a class="markdownIt-Anchor" href="#37-对象克隆"></a> 3.7 对象克隆</h2><p>就是对象的复制，而且属于全新的复制。即：使用已有的对象的内容创建一个新的对象，需要使用Object类中的clone方法。所有类都会有clone方法，但不是所有的类都希望被克隆。如果想要对象的克隆，被拷贝的对象需要实现<code>Cloneable</code>接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Cloneable接口没有任何的方法定义，只是描述了实现这个接口的类有克隆的能力。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="38-数字处理类"><a class="markdownIt-Anchor" href="#38-数字处理类"></a> 3.8 数字处理类</h2><h3 id="381-math类"><a class="markdownIt-Anchor" href="#381-math类"></a> 3.8.1 Math类</h3><p>进行数学计算的操作类，提供有基础的计算公式的类。该类的构造器被私有化，但不是单例，其所有方法都是静态方法。</p><h3 id="382-random类"><a class="markdownIt-Anchor" href="#382-random类"></a> 3.8.2 Random类</h3><h3 id="383-bigdecimal-biginteger"><a class="markdownIt-Anchor" href="#383-bigdecimal-biginteger"></a> 3.8.3 BigDecimal、BigInteger</h3><p>BigInteger的构造：不能接受int</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> bigA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1234567898665543222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> bigb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1234567222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减法操作</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigA<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>bigb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加法操作</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bigb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//除法操作</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigA<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//乘法操作</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigA<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>bigb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求余除法</span><span class="token class-name">BigInteger</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigIntegers <span class="token operator">=</span> bigA<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>bigb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 前面是商，后面是余数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigIntegers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span> <span class="token string">"==="</span> <span class="token operator">+</span> bigIntegers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BigDecimal与BigInteger类似</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// RoundingMode 指定进位模式</span><span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> divisor<span class="token punctuation">,</span> <span class="token keyword">int</span> scale<span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span> roundingMode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">divide</span><span class="token punctuation">(</span>divisor<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> roundingMode<span class="token punctuation">.</span>oldMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="39-日期操作类"><a class="markdownIt-Anchor" href="#39-日期操作类"></a> 3.9 日期操作类</h2><h3 id="391-date类"><a class="markdownIt-Anchor" href="#391-date类"></a> 3.9.1 Date类</h3><p>日期类大部分方法已经过期，详情见API文档</p><h3 id="392-simpledateformat类"><a class="markdownIt-Anchor" href="#392-simpledateformat类"></a> 3.9.2 SimpleDateFormat类</h3><p>SimpleDateFormat继承DateFormat抽象类，DateFormat抽象类继承Format抽象类。</p><p>DateFormat抽象类中格式化日期的方法是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 日期转字符串</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span><span class="token comment">// 字符串转日期</span><span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>SimpleDateFormat的构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token class-name">Category</span><span class="token punctuation">.</span>FORMAT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F1.png" alt="" /></p><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F2.png" alt="" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">GregorianCalendar</span> calendar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd,HH:mm:ss.SS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 日期转字符串</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> day <span class="token operator">=</span> <span class="token string">"2000-1-2,12:22:11.111"</span><span class="token punctuation">;</span><span class="token comment">// 给定日期字符串转日期</span><span class="token class-name">Date</span> date <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在进行字符串定义时超过合理范围，比如第20月，在转为日期时，会自动进行进位。</p><h1 id="4-国际化程序实现"><a class="markdownIt-Anchor" href="#4-国际化程序实现"></a> 4 国际化程序实现</h1><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E5%9B%BD%E9%99%85%E5%8C%96.png" alt="国际化示例" /></p><ul><li>如何可以定义保存文字的文件信息</li><li>如何可以根据不同的区域语言的编码读取指定的资源信息</li></ul><h2 id="41-locale类"><a class="markdownIt-Anchor" href="#41-locale类"></a> 4.1 Locale类</h2><p>专门描述区域和语言编码的类。主要使用两个构造方法实例化</p><ul><li>public Locale(String language)</li><li>public Locale(String language, String country)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 中文环境,手工设置语言环境</span><span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span><span class="token string">"zh"</span><span class="token punctuation">,</span> <span class="token string">"CN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 中文环境，获取默认的语言环境</span><span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实际开发中，许多人可能并不关心国家和语言编码，为了简化开发，将一些国家的语言编码设置为静态常量。</p><h2 id="42-读取资源文件"><a class="markdownIt-Anchor" href="#42-读取资源文件"></a> 4.2 读取资源文件</h2><p>准备好资源文件后，可以利用java.util.ResourceBundle类读取资源文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// baseName是资源文件名称，没有后缀</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ResourceBundle</span> <span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token class-name">String</span> baseName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResourceBundle</span> resourceBundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"Test.Message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resourceBundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>资源文件：</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">info</span><span class="token punctuation">=</span><span class="token attr-value">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过key读数据时一定要保证key存在。</p><blockquote><p>java.util.MissingResourceException: Can’t find resource for bundle java.util.PropertyResourceBundle, key infos</p></blockquote>]]></content>
    
    
    <summary type="html">java高级,包含常用集合、线程、IO流、反射等内容，其中内容比较精简,不全</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    <category term="语言基础" scheme="blog.silverbeats.cn/categories/java/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="blog.silverbeats.cn/tags/java/"/>
    
    <category term="java高级" scheme="blog.silverbeats.cn/tags/java%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="blog.silverbeats.cn/java%E5%9F%BA%E7%A1%80/"/>
    <id>blog.silverbeats.cn/java%E5%9F%BA%E7%A1%80/</id>
    <published>2020-10-26T23:53:31.000Z</published>
    <updated>2020-10-31T08:25:06.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><h2 id="11-java应用程序的运行机制"><a class="markdownIt-Anchor" href="#11-java应用程序的运行机制"></a> 1.1 Java应用程序的运行机制</h2><p>计算机高级语言有编译型和解释型两种，Java是二者结合。</p><ol><li><p>Java源文件后缀名是**.java**；</p></li><li><p>再利用编译器javac将源程序编译成字节码文件，字节码文件后缀名为**.class**；</p></li><li><p>最后利用虚拟机JVM解释执行</p></li></ol><h2 id="12-jvm-jre和jdk"><a class="markdownIt-Anchor" href="#12-jvm-jre和jdk"></a> 1.2 JVM、JRE和JDK</h2><ul><li>Jvm是java虚拟机，用于执行字节码的虚拟计算机</li><li>jre是java运行时环境，包含了java虚拟机，库函数，运行java应用程序所必须的文件</li><li>jdk，包含了jre，以及增加了编译器和调试器等用于程序开发的文件</li></ul><h2 id="13-注释"><a class="markdownIt-Anchor" href="#13-注释"></a> 1.3 注释</h2><pre class="line-numbers language-none"><code class="language-none">单行注释：&#x2F;&#x2F;多行注释：&#x2F;**&#x2F;文档注释：&#x2F;***&#x2F; 可以自动生成API文档<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="14-变量和常量"><a class="markdownIt-Anchor" href="#14-变量和常量"></a> 1.4 变量和常量</h2><p>变量的本质是代表一个“可操作的存储空间”，空间的位置是确定的，但是里面的值不确定。可以通过变量名来访问“对应的存储空间”，从而操作存储空间的值。</p><ul><li>标识符必须以字母，下划线，$符号开头，也就是数字不能开头</li><li>大小写敏感</li><li>不能是关键字</li><li>表示类名的时候，首字母大写</li><li>驼峰写法</li></ul><p><strong>变量的分类：</strong></p><ul><li><p>局部变量：方法或语句块内部定义的变量，生命周期是从声明位置开始到方法或语句块执行完毕为止。</p><p>局部变量的使用一定要初始化。</p></li><li><p>成员变量(实例变量 member variable)：方法外部、类的内部定义的变量。</p><p>从属于<strong>对象</strong>、生命周期伴随对象的终止。成员变量会自动初始化。</p></li><li><p>静态变量(类变量)：使用static定义。</p><p>从属于<strong>类</strong>、生命周期伴随始终，从类加载到卸载。</p></li></ul><p><strong>常量：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修饰常量的时候，常量不可修改</li><li>修饰方法的时候，该方法不可被子类继承重写，但是可以被重载</li><li>修饰类的时候，修饰的类不能被继承 String类就是用final修饰的</li></ul><h1 id="2-基本数据类型"><a class="markdownIt-Anchor" href="#2-基本数据类型"></a> 2 基本数据类型</h1><h2 id="21-数值型"><a class="markdownIt-Anchor" href="#21-数值型"></a> 2.1 数值型</h2><ul><li>整数类型(默认int)</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">大小</th><th style="text-align:center">范围</th><th style="text-align:center">标识符</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1字节</td><td style="text-align:center">-128-127</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2字节</td><td style="text-align:center">-32768~32767</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4字节</td><td style="text-align:center">-2147483648~2147483647</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8字节</td><td style="text-align:center">-9223372036854775808~9223372036854775807</td><td style="text-align:center">L</td></tr></tbody></table><ul><li><p>浮点类型(默认double)</p><ul><li>float(4字节)</li><li>double(8字节)</li></ul></li></ul><blockquote><p>浮点数不精确，最好不要用于比较，或者使用java.math下两个类来比较，BigDecimal(比较浮点数),BigInteger(比较整型)</p></blockquote><h2 id="22-char字符型2个字节"><a class="markdownIt-Anchor" href="#22-char字符型2个字节"></a> 2.2 char字符型(2个字节)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 给定ASCII码对应的字符</span><span class="token keyword">char</span> temp1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token comment">// 直接给字符,使用单引号</span><span class="token keyword">char</span> temp2 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment">// 使用Unicode</span><span class="token keyword">char</span> temp3 <span class="token operator">=</span> <span class="token string">'\u0000'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-布尔型"><a class="markdownIt-Anchor" href="#23-布尔型"></a> 2.3 布尔型</h2><p>在Java中定义的八种基本数据类型中，除了其它七种类型都有明确的内存占用字节数外，就boolean类型没有给出具体的占用字节数，因为对虚拟机来说根本就不存在 boolean 这个类型，boolean类型在编译后会使用其他数据类型来表示。<br />具体有以下三种说法：<br />① 1个bit—理由是boolean类型的值true和false被编译后会使用0和1来表示。0和1仅需要用1位（bit）来存储。<br />② 1个字节—理由是虽然编译后1和0只需要占用1位空间，1个字节是8位，实际的存储空间是：用一个字节的的最低位存储，其他七位用0填补。如果值是true的话则存储的二进制为：0000 0001，如果是false的话则存储的二进制为：0000 0000。<br />③ 单独使用是4个字节，在数组当中是占1个字节–理由来源是《Java虚拟机规范》一书中的描述：“虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替，而boolean数组将会被编码成Java虚拟机的byte数组，每个元素boolean元素占8位”。</p><h2 id="24-类型的转化"><a class="markdownIt-Anchor" href="#24-类型的转化"></a> 2.4 类型的转化</h2><p><img data-src="http://resource.silverbeats.cn/static/images/java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png" alt="类型的自动转化" /></p><p>红线：自动转换，无精度损失</p><p>蓝色：自动转换，存在精度损失</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token comment">// 强转</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3-运算符"><a class="markdownIt-Anchor" href="#3-运算符"></a> 3 运算符</h1><h2 id="31-优先级"><a class="markdownIt-Anchor" href="#31-优先级"></a> 3.1 优先级</h2><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">优先级</th><th style="text-align:center">结合性</th></tr></thead><tbody><tr><td style="text-align:center">（）[]</td><td style="text-align:center">1</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">! +(正号)  -(负号)  ~ ++ –</td><td style="text-align:center">2</td><td style="text-align:center"><strong><mark>右至左</mark></strong></td></tr><tr><td style="text-align:center">* / %</td><td style="text-align:center">3</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">+ -</td><td style="text-align:center">4</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">&gt;&gt;  &lt;&lt;  &gt;&gt;&gt;</td><td style="text-align:center">5</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">&gt;  &gt;=  &lt;  &lt;= instanceof</td><td style="text-align:center">6</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">== !=</td><td style="text-align:center">7</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">&amp;(按位与)</td><td style="text-align:center">8</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">9</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">|</td><td style="text-align:center">10</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">11</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">||</td><td style="text-align:center">12</td><td style="text-align:center">左至右</td></tr><tr><td style="text-align:center">?:</td><td style="text-align:center">13</td><td style="text-align:center"><strong><mark>右至左</mark></strong></td></tr><tr><td style="text-align:center">+=  *=  /=  %=  -=  =  &lt;&lt;=   &gt;&gt;=   &gt;&gt;&gt;=  ~=  |=  &amp;=  ^=</td><td style="text-align:center">14</td><td style="text-align:center"><strong><mark>右至左</mark></strong></td></tr></tbody></table><ol><li>如果两个操作数有一个为Long，则结果也为Long</li><li>没有Long时，结果为int，即便操作数全为short、byte结果也是<strong>int</strong></li><li>如果两个操作数有一个为double，则结果为<strong>double</strong></li><li>只有两个操作数都是float，结果才是float</li></ol><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>逻辑与&amp;</td><td>两个操作数为true，结果才为true</td></tr><tr><td>逻辑或|</td><td>两个操作数有一个是true，结果就是true</td></tr><tr><td>短路与&amp;&amp;</td><td>只要有一个false，结果就是false</td></tr><tr><td>短路或||</td><td>只要有一个true，结果就是true</td></tr><tr><td>逻辑非！</td><td>取反</td></tr><tr><td>逻辑异或^</td><td>相同false，不同true</td></tr></tbody></table><h2 id="32-短路与和逻辑与的区别"><a class="markdownIt-Anchor" href="#32-短路与和逻辑与的区别"></a> 3.2 短路与和逻辑与的区别</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1>2已经是false，后面的比较就不看了，可以提高效率</span><span class="token keyword">boolean</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">></span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1>2已经是false，但后面的表达式还会看</span><span class="token keyword">boolean</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">></span><span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-位运算"><a class="markdownIt-Anchor" href="#33-位运算"></a> 3.3 位运算</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//a = 3/2 右移想当于除</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//a = 3*2 左移相当于乘</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">/*a&amp;b = 0  0011 &amp; 0100 = 0000 = 0a|b = 7  0011 | 0100 = 0111 = 7a^b = 7  0011 ^ 0100 = 0111 = 7*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-流程控制语句"><a class="markdownIt-Anchor" href="#4-流程控制语句"></a> 4 流程控制语句</h1><h2 id="41-if条件分支语句"><a class="markdownIt-Anchor" href="#41-if条件分支语句"></a> 4.1 if条件分支语句</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span> ……<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-循环语句"><a class="markdownIt-Anchor" href="#42-循环语句"></a> 4.2 循环语句</h2><h3 id="421-while"><a class="markdownIt-Anchor" href="#421-while"></a> 4.2.1 while</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 循环体</span><span class="token punctuation">&#125;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//循环体</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="422-for"><a class="markdownIt-Anchor" href="#422-for"></a> 4.2.2 for</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*1. i = 02. i &lt; 10 成立3. 打印i4. i++变成了15. 1 &lt; 10成立6. 打印i……*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-方法的定义"><a class="markdownIt-Anchor" href="#5-方法的定义"></a> 5 方法的定义</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*[修饰符1 修饰符2...] 返回值类型 方法名(形式参数列表)&#123;&#125;*/</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>形式参数：在方法声明时用于接收外界传入的数据</li><li>实参：调用方法时实际传给方法的数据</li><li>返回值</li><li>返回值类型：无返回值必须指定为void</li></ul><h1 id="6-面向对象"><a class="markdownIt-Anchor" href="#6-面向对象"></a> 6 面向对象</h1><h2 id="61-面向对象和面向过程的区别"><a class="markdownIt-Anchor" href="#61-面向对象和面向过程的区别"></a> 6.1 面向对象和面向过程的区别</h2><p>面向过程：首先思考“怎么按步骤实现”，并将步骤对应成方法，一步步最终完成。适合简单任务，不需要过多的协作。微观操作。</p><p>面向对象：首先思考的是“怎么设计”，宏观把控</p><h2 id="62-对象和类"><a class="markdownIt-Anchor" href="#62-对象和类"></a> 6.2 对象和类</h2><p>类可以看作对象的模板，叫做class</p><p>对象：叫做Object或者instance实例，以后说某个类的对象，其实是一个意思</p><p>类里面有属性/变量，和方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment">//构造方法，用于创建这个类的对象，无参的构造方法可以由系统自动创建，用于对象的初始化</span>  <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我在吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//程序的入口文件，必须要有</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个对象</span>    <span class="token class-name">Stu</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用对象的方法</span>    stu<span class="token punctuation">.</span><span class="token class-name">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="621-构造器要点"><a class="markdownIt-Anchor" href="#621-构造器要点"></a> 6.2.1 构造器要点</h3><ol><li>通过new关键字调用</li><li>构造器虽然有返回值，但是不能定义返回值类型(返回值的类型肯定是本类)，不能在构造器里面使用return返回某个值</li><li>如果没有定义构造器，编译器会自动定义一个无参数的构造函数。如果自己定义了，则编译器不会自动添加</li><li>构造器的方法名必须与类名一致</li></ol><h3 id="622-对象创建过程"><a class="markdownIt-Anchor" href="#622-对象创建过程"></a> 6.2.2 对象创建过程</h3><ol><li>分配对象空间，并将对象成员变量初始化为0或者null</li><li>执行属性值的显式初始化</li><li>执行构造方法</li><li>返回对象的地址给相关的变量</li></ol><h2 id="63-面向对象的特点"><a class="markdownIt-Anchor" href="#63-面向对象的特点"></a> 6.3 面向对象的特点</h2><p>封装：内部的操作对外部而言不可见；当内部的操作都不可直接使用，才是安全的；</p><p>继承：在已有的结构基础上继续进行功能的扩充</p><p>多态：在继承的基础上扩充而来的概念，指的是类型的转换处理</p><ul><li>OOA：面向对象分析</li><li>OOD：面向对象设计</li><li>OOP：面向对象编程</li></ul><h3 id="631-封装"><a class="markdownIt-Anchor" href="#631-封装"></a> 6.3.1 封装</h3><p><strong><mark>优点：</mark></strong></p><ol><li>提高代码的安全性</li><li>高内聚：封装细节，便于修改内部代码，提高可维护性</li><li>低耦合：简化外部调用，便于调用者使用，便于扩展和协作</li></ol><p><strong><mark>访问控制符：</mark></strong></p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">同一个类</th><th style="text-align:center">同一个包中</th><th style="text-align:center">子类</th><th style="text-align:center">不同包所有类</th></tr></thead><tbody><tr><td style="text-align:center">private</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><ul><li>private:  只能被自己的类使用，子类虽然继承父类私有属性，但是是用不了</li><li>default : 表示没有修饰符，只能同一个包的类能访问</li><li>protected: 表示可以被同一个包的类以及其他包中的子类访问</li><li>public: 表示可以被该项目的所有包中的所有类访问</li></ul><p><strong><mark>示例：</mark></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> man<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="632-继承"><a class="markdownIt-Anchor" href="#632-继承"></a> 6.3.2 继承</h3><ul><li>Java只有一个直接父类，Java的接口可以多实现</li><li>Java可以继承父类所有的属性和方法(构造方法除外)，私有属性也不能使用</li><li>可以提高代码的复用性</li><li>instanceof是二元运算符，左边是对象，右边是类，当对象是右面的类或子类创建的对象时，返回true，否则返回false。用来判断该实例是否是该类</li></ul><p><strong><mark>示例：</mark></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> textExtends <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"星期一"</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span>major <span class="token operator">=</span> <span class="token string">"coding"</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">173</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">int</span> height<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> rest <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> major<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token class-name">String</span> major<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><mark>重写父类方法：</mark></strong></p><p>子类通过重写父类的方法，可以用自身的行为替换父类的行为。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stop..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"horse run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法的重写需要符合三个要点：</p><ol><li>方法名，形参列表相同</li><li>返回值类型和声明异常类型，子类小于等于父类</li><li>访问权限，子类大于等于父类</li></ol><p><strong><mark>引用父类的方法：</mark></strong></p><p>super是直接父类对象的引用。可以通过super来访问父类中被子类覆盖的方法或属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> food<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    food <span class="token operator">=</span> <span class="token string">"面条"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类喜欢"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> food<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    food <span class="token operator">=</span> <span class="token string">"西瓜"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类喜欢"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><mark>继承树追溯问题：</mark></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass1</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译器自动加的，默认会执行</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始创建Father类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译器自动加的，默认会执行</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始创建Child类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">开始创建Father类开始创建Child类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="633-多态"><a class="markdownIt-Anchor" href="#633-多态"></a> 6.3.3 多态</h3><p>多态是指同一个方法调用，由于对象不同可能会有不同的行为。现实生活中，同一个方法，具体实现会完全不同。</p><ul><li><p>多态是方法的多态，不是属性的多态(多态与属性无关)。</p></li><li><p>多态的存在要有三个必要条件：继承、方法重写、父类引用指向子类对象</p></li><li><p>父类引用指向子类对象后，用该父类引用调用子类重写的方法，此时多态就出现了</p></li></ul><p><strong><mark>示例：</mark></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuoTai</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">animalCry</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">animalCry</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">animalCry</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">.</span><span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"叫一声"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"旺一声"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵一声"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><mark>对象的转型</mark></strong></p><p>向上自动转型，向下强制转型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上自动转型</span><span class="token comment">//d是Animal,如果想用Dog的方法，必须要强制转型</span><span class="token class-name">Dog</span> d1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dog</span> d3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span><span class="token comment">//将猫c强制转化成狗</span>d3<span class="token punctuation">.</span><span class="token function">seeDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是Dog类里面的方法</span><span class="token comment">/*这么写，编译通过，但是运行会报错：ClassCastException错误，类型转化错误*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-内存分析"><a class="markdownIt-Anchor" href="#7-内存分析"></a> 7  内存分析</h1><p>Java虚拟机的内存可以分为三个区域：栈、堆、方法区域</p><ul><li>栈</li></ul><blockquote><ol><li>栈描述的是方法执行的内存模型，每个方法被调用都会创建一个栈帧(存储局部变量，操作数，方法出口等)</li><li>JVM为每个线程创建一个栈，用于存放该线程执行方法的信息(实际参数，局部变量等)</li><li>栈属于线程私有，不能实现线程间的共享</li><li>栈由系统自动分配，速度快，栈是一个<strong>连续</strong>的内存空间</li></ol></blockquote><ul><li>堆heap</li></ul><blockquote><ol><li>用于存储创建好的对象和数组</li><li>JVM只有一个堆，被所有线程共享</li><li>堆是一个不<strong>连续</strong>的内存空间，灵活</li></ol></blockquote><ul><li>方法区域</li></ul><blockquote><ol><li>JVM只有一个方法区域，被所有线程共享</li><li>方法区实际也是堆，用于存储类、常量相关信息</li><li>用来程序中永远不变的或唯一的内容(类信息、静态变量、字符串常量)</li></ol></blockquote><h2 id="71-垃圾回收机制"><a class="markdownIt-Anchor" href="#71-垃圾回收机制"></a> 7.1 垃圾回收机制</h2><ul><li><p>发现无用对象</p><ul><li><p>引用计数法</p><p>缺点：“循环引用的无用对象”无法识别</p></li><li><p>引用可达法(根搜索算法)</p></li></ul></li><li><p>回收无用对象</p></li></ul><h2 id="72-分代垃圾回收机制"><a class="markdownIt-Anchor" href="#72-分代垃圾回收机制"></a> 7.2 分代垃圾回收机制</h2><p>JVM将堆内存划分为Eden、Survivor、Old</p><ul><li>年轻代Eden</li></ul><blockquote><p>所有新生对象首先都是放在Eden区，年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。对应的是Minor GC，每次Minor GC会清理年轻代的内存，算法采用效率较高的复制算法，频繁的操作，会浪费内存空间。当“年轻代”区域存放满对象后，就将对象存放到”年老代“区域</p></blockquote><ul><li>年老代Old</li></ul><blockquote><p>在年轻代中经历了N(默认15)次垃圾回收后仍然存活的对象，就会被放倒年老代中。因此，可以认为年老代中存放的都是一些生命周期比较长的对象。年老代对象越来越多，就需要启动Major GC和Full GC(全量回收)，进行一次大清扫，全面清除年轻代区域和年老代区域。</p></blockquote><ul><li>持久代</li></ul><blockquote><p>用于存放静态文件，如java类、方法等。持久代堆垃圾收回没有显著影响</p></blockquote><h2 id="73-full-gc"><a class="markdownIt-Anchor" href="#73-full-gc"></a> 7.3 Full GC</h2><ol><li>当年老代满后，会触发</li><li>持久代满，会触发</li><li>System.gc()，程序建议GC启动，不是调用GC</li><li>上一次GC之后，heap的各区域分配策略动态变化</li></ol><h1 id="8-数组"><a class="markdownIt-Anchor" href="#8-数组"></a> 8 数组</h1><h2 id="81-声明"><a class="markdownIt-Anchor" href="#81-声明"></a> 8.1 声明</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 声明一个长度5的数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 声明一个长度4的数组,并初始化,静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 声明一个宽5高6的5×6二维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 静态初始化二维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="82-数组的拷贝"><a class="markdownIt-Anchor" href="#82-数组的拷贝"></a> 8.2 数组的拷贝</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>object src<span class="token punctuation">,</span> <span class="token keyword">int</span> scrPos<span class="token punctuation">,</span> object dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>src 数组</li><li>srcPos 开始位置，从src数组的第几个元素开始拷贝</li><li>dest 数组</li><li>destPos 拷贝到dest数组的哪个位置</li><li>length 指定src数组的多少个元素赋给dest数组的元素</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">,</span><span class="token string">"dd"</span><span class="token punctuation">,</span><span class="token string">"ee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-string类"><a class="markdownIt-Anchor" href="#9-string类"></a> 9 String类</h1><ul><li><p>String类又称作不可变字符序列，因为<strong>String类被final修饰</strong></p></li><li><p>String类位于java.lang包中，Java程序默认导入java.lang包下所有的类</p></li><li><p>java字符串就是Unicode字符序列</p></li><li><p>Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义的类String，每个用双引号括起来的字符串都是String类的一个实例</p></li><li><p>字符串会被放到常量池中String pool</p></li></ul><h2 id="91-常用方法"><a class="markdownIt-Anchor" href="#91-常用方法"></a> 9.1 常用方法</h2><table><thead><tr><th style="text-align:center">String类常用方法</th><th style="text-align:center">解释</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">str.charAt(index)</td><td style="text-align:center">返回指定位置的字符，index为索引下标</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">str1.equals(str2)</td><td style="text-align:center">比较两个字符串值是否相等</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">str1.equalsIgnoreCase(str2)</td><td style="text-align:center">比较两个字符串，忽略大小写</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">str1.indexOf(str2)</td><td style="text-align:center">字符串str1中是否包含str2</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">str1.replace(“ ”，“&amp;”)</td><td style="text-align:center">将str1中的“ ”替换为&amp;</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">str1.startsWith(str2)</td><td style="text-align:center">str1是否以str2为开头</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">str1.endWith(str2)</td><td style="text-align:center">str1是否以str2为结尾</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">str1.substring(beginIndex)</td><td style="text-align:center">提取字符串，从beginIndex到结尾</td><td style="text-align:center">返回截取之后的字符串</td></tr><tr><td style="text-align:center">str1.substring(beginIndex,endIndex)</td><td style="text-align:center">提取字符串，左闭右开</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">str.toLowerCase()</td><td style="text-align:center">转小写</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">str1.toUpperCase()</td><td style="text-align:center">转大写</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">str1.trim()</td><td style="text-align:center">去除收尾的空格</td><td style="text-align:center">String</td></tr></tbody></table><h2 id="92-字符串的拼接"><a class="markdownIt-Anchor" href="#92-字符串的拼接"></a> 9.2 字符串的拼接</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str <span class="token operator">=</span> str <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*这段代码，循环5000次，相当于创建10000个对象。一次循环：int i ——> 变成string i；str+i 产生新的string对象很耗费时间与空间*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用StringBuilder进行优化</span><span class="token class-name">StringBuilder</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-注解"><a class="markdownIt-Anchor" href="#10-注解"></a> 10 注解</h1><p>JDK 1.5之后提出的一个新的开发技术结构，利用Annotation可以有效的减少程序配置的代码，可以利用注解进行一些结构化定义。Annotation是以一种注解的形式实现程序的开发。</p><p>如果想要清除Annotation产生的意义，需要了解程序开发结构的历史。</p><ul><li><p>过程一：在程序定义时，将所有可能用到的资源都定义在程序代码中；</p><p>缺点：需要修改源代码，维护不方便</p></li><li><p>过程二：引入配置文件，将配置写在配置文件中</p><p>缺点：①在配置项不多的时候，非常好用，但如果所有的项目都是采用这种结构开发会导致配置文件暴多；②所以的操作需要通过配置文件完成，开发难度上升</p></li><li><p>过程三：将配置信息重新写回程序中，利用一些特殊的标记与程序代码进行分离，这就是注解提出的基本依据</p><p>缺点：全用注解开发，难度太高，现在是配置文件+注解的形式开发</p></li></ul><table><thead><tr><th>内置注解</th><th>说明</th></tr></thead><tbody><tr><td>@Override</td><td>定义在java.lang.Override，此注释只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明</td></tr><tr><td>@Deprecated</td><td>定义在java.lang.Deprecated中，此注释可以用于修饰方法、属性、类表示被废弃</td></tr><tr><td>@SuppressWarnings</td><td>定义在java.lang.SupressWarnings，用来抑制编译时的警告信息</td></tr></tbody></table><h2 id="101-自定义注解元注解"><a class="markdownIt-Anchor" href="#101-自定义注解元注解"></a> 10.1 自定义注解，元注解</h2><p>元注解的作用就是负责注解其他注解，Java定义了4个标准的meta-annotation类型，它们被用来提供对其他annotation类型做说明</p><p>这些类型和它们所支持的类在java.lang.annotation包</p><ul><li>@Target：描述注解的使用范围（即被描述的注解可以用在什么地方）</li></ul><table><thead><tr><th>value</th><th>说明</th></tr></thead><tbody><tr><td>TYPE</td><td>Class, interface (including annotation type), or enum declaration</td></tr><tr><td>FIELD</td><td>Field declaration (includes enum constants)</td></tr><tr><td>METHOD</td><td>Method declaration</td></tr><tr><td>PARAMETER</td><td>Formal parameter declaration</td></tr><tr><td>CONSTRUCTOR</td><td>onstructor declaration</td></tr><tr><td>LOCAL_VARIABLE</td><td>Local variable declaration</td></tr><tr><td>ANNOTATION_TYPE</td><td>Annotation type declaration</td></tr><tr><td>PACKAGE</td><td>Package declaration</td></tr><tr><td>TYPE_PARAMETER</td><td>Type parameter declaration since 1.8</td></tr><tr><td>TYPE_USE</td><td>Use of a type since 1.8</td></tr></tbody></table><ul><li>@Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期</li></ul><table><thead><tr><th>value</th><th>说明</th></tr></thead><tbody><tr><td>RUNTIME</td><td>Annotations are to be recorded in the class file by the compiler and retained by the VM at run time, so they may be read reflectively.</td></tr><tr><td>CLASS</td><td>Annotations are to be recorded in the class file by the compiler but need not be retained by the VM at run time.  This is the default behavior.</td></tr><tr><td>SOURCE</td><td>Annotations are to be discarded by the compiler</td></tr></tbody></table><ul><li>@Documented：说明该注解将包含在javadoc中</li><li>@Inherited：说明之类可以继承父类中的该注解</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MyAnnotation</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@MyAnnotation</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 表示注解能够用来哪些地方</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 表示注解在哪才有效</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token comment">// 自定义注解</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="102-自定义注解示例"><a class="markdownIt-Anchor" href="#102-自定义注解示例"></a> 10.2 自定义注解示例</h2><p>**示例：**使用@interface自定义注解时，自动继承java.lang.annotation.Annotation接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"给注解赋值"</span><span class="token punctuation">,</span> schools <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"石河子大学"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@MyAnnotation2</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span><span class="token comment">// 注解的参数：参数类型+ 参数名 ()</span><span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 给注解的参数设置默认值</span><span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 如果默认值-1代表不存在</span><span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">schools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation2</span> <span class="token punctuation">&#123;</span><span class="token comment">// 倘若只有一个注解参数，必须使用value作为参数名,此时在使用注解时，可以省略value直接复制</span><span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="11-抽象类"><a class="markdownIt-Anchor" href="#11-抽象类"></a> 11 抽象类</h1><ul><li>抽象方法</li></ul><p>使用abstract修饰的方法，没有方法体，只有声明，定义的是一种规范，就是告诉子类必须要给抽象方法提供具体的实现</p><ul><li>抽象类</li></ul><p>包含抽象方法的类就是抽象类；不能被实例化；只能被子类继承；抽象方法必须被子类实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ssas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="12-接口"><a class="markdownIt-Anchor" href="#12-接口"></a> 12 接口</h1><h2 id="121-概述"><a class="markdownIt-Anchor" href="#121-概述"></a> 12.1 概述</h2><p>接口就是比抽象类还要抽象的抽象类，可以更加规范的对子类进行约束。全面专业的实现了：规范和具体实现的分离。</p><p>接口作用：解耦</p><p>抽象类中还提供了某些具体实现，但是接口不具有任何实现，接口中的方法都是抽象方法，接口是完全面向规范的，规定了一批类具有的公共方法规范。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>访问修饰符<span class="token punctuation">]</span> <span class="token keyword">interface</span> 接口名 <span class="token punctuation">[</span><span class="token keyword">extends</span> 父接口<span class="token number">1</span><span class="token punctuation">,</span> 父接口<span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    常量定义<span class="token punctuation">;</span>    方法定义<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问修饰符只能是public或者default默认</li><li>接口名：和类名采用相同命名机制</li><li>extends：接口可以多继承</li><li>常量：接口中的属性只能是常量，总是：<strong>public static final</strong>修饰，不写也是</li><li>方法：接口中的方法只能是public abstract，省略的话也是<strong>public abstract</strong></li><li>子类通过implement来实现接口中的规范</li><li>接口不能创建实例，但是可以用于什么引用变量类型</li><li>一个类实现了接口，必须实现接口中所有的方法，并且方法都必须是public</li><li>JDK1.7之前，接口中只能包含静态常量、抽象方法、不能有普遍属性，构造方法、普通方法</li><li>JDK1.8之后，接口中包含普通的静态方法</li></ul><h2 id="122-使用"><a class="markdownIt-Anchor" href="#122-使用"></a> 12.2 使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">&#123;</span><span class="token comment">/*public final static*/</span> <span class="token keyword">int</span> MAX_AGE <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">/*public abstract*/</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>MAX_AGE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="123-接口的继承"><a class="markdownIt-Anchor" href="#123-接口的继承"></a> 12.3 接口的继承</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="124-接口和抽象类的区别"><a class="markdownIt-Anchor" href="#124-接口和抽象类的区别"></a> 12.4 接口和抽象类的区别</h2><table><thead><tr><th></th><th>属性</th><th>方法</th><th>构造</th><th>继承</th></tr></thead><tbody><tr><td>抽象类</td><td>没有要求</td><td>无要求</td><td>有构造(为子类实例化所用)</td><td>单继承</td></tr><tr><td>接口</td><td>必须是public static final的常量</td><td>都是抽象方法，在1.8之后可以由静态方法</td><td>没有构造</td><td>多继承、多实现</td></tr></tbody></table><h1 id="13-包装类"><a class="markdownIt-Anchor" href="#13-包装类"></a> 13 包装类</h1><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">包装类</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">Character</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//基本数据类型 ——> 包装类对象</span><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//包装类对象 ——> 基本数据类型</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串 ——> 包装类对象</span><span class="token class-name">Integer</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> f <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//包装类对象 ——> 字符串</span><span class="token class-name">String</span> str <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/java/Number%E7%B1%BB.png" alt="包装类" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">short</span> <span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="131-自动装箱和拆箱"><a class="markdownIt-Anchor" href="#131-自动装箱和拆箱"></a> 13.1 自动装箱和拆箱</h2><p>自动装箱和拆箱就是将基本数据类型和包装类之间进行自动的互相转换。JDk1.5之后，Java引入自动装箱autoboxing和拆箱unboxing</p><p>基本类型的数据处于需要对象的环境中时，会自动转为“对象”。JVM替我们执行了Integer i = Integer.valueOf(5)这样的操作，这就是Java的自动装箱。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//jdk1.5之前</span><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jdk1.5之后，简单实现基本数据类型——>包装类</span><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//实际上是编译器会调用执行，过程又名拆箱</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="132-包装类的缓存问题"><a class="markdownIt-Anchor" href="#132-包装类的缓存问题"></a> 13.2 包装类的缓存问题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//Integer.class源码文件中定义low = -128，high = 127</span><span class="token comment">//在启动的时候，就会生成cache数组，将[-128，127]对应的包装类对象放入其中，要是在这个范围之中，就会直接取，如果没有就new一个新对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="14-泛型"><a class="markdownIt-Anchor" href="#14-泛型"></a> 14 泛型</h1><p>泛型从JDK1.5之后追加到Java中，目的是为了解决ClassCastException问题，在对象进行向下转型时，都可能存在安全隐患，而java希望通过泛型可以慢慢解决这样的问题。</p><p>比如现在的一个需求是：定义一个Point类，并且这个类之中允许开发者保存三种不同的点表达</p><ul><li>整型数据：x=10，y= 20；</li><li>浮点型数据：x=10.1，y=20.9</li><li>字符串型数据：x=东经120度，y=北纬30度</li></ul><p>于是在设计Point类时需要考虑具体的xy的属性类型，这个类型要求最简单的做法是定义成Object类，因为Object可以接受所有类型，但正因为如此会导致安全隐患。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">T</span> x<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">T</span> y<span class="token punctuation">;</span>  <span class="token comment">// setter、getter、构造器略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="141-泛型通配符"><a class="markdownIt-Anchor" href="#141-泛型通配符"></a> 14.1 泛型通配符&lt;?&gt;</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">T</span> msg<span class="token punctuation">;</span>  <span class="token comment">// get、set略</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> msg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">"lala"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> msg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 当不确定Message里面的属性的类型时,可以使用？作为替代，实现fun代码复用</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在？这个通配符的基础上，实际上还提供了两类小的通配符：</p><ul><li>?extends 类：设置泛型的上限</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 该泛型类型只允许设置Number类型或者Number之类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>?super 类：设置泛型的下限</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 只能传递String或者String的父类的Message</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="142-泛型接口"><a class="markdownIt-Anchor" href="#142-泛型接口"></a> 14.2 泛型接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>实现类写法一</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MessageImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> implement <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"echo:"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现类写法二</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MessageImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"echo:"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="143-泛型方法"><a class="markdownIt-Anchor" href="#143-泛型方法"></a> 14.3 泛型方法</h2><p>将泛型写到方法上，就是泛型方法，但是需要注意的是，泛型方法不一定非要出现在泛型类中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> args<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="15-枚举"><a class="markdownIt-Anchor" href="#15-枚举"></a> 15 枚举</h1><p>很多编程语言都会提供枚举的概念，但是java一直到JDK1.5之后才提出了枚举。枚举的主要作用用于定义有限个数对象的一种结构。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">&#123;</span>  SPRING<span class="token punctuation">,</span>SUMMER<span class="token punctuation">,</span>AUTUMN<span class="token punctuation">,</span>WINTER<span class="token punctuation">;</span> <span class="token comment">// 实例化对象</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Season</span> s <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印SPRING</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Season</span> season <span class="token operator">:</span> <span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取所有的值打印</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="151-枚举类"><a class="markdownIt-Anchor" href="#151-枚举类"></a> 15.1 枚举类</h2><p>所有枚举类型隐性的继承自java.lang.Enum这个抽象类。枚举实质上还是类，而每个被枚举的成员实质就是一个枚举类型的实例，他们默认都是**<mark>public final static</mark>**修饰的。可以直接通过枚举类型名使用他们。枚举类实现单例模式可以防止序列化和反射破坏单例</p><p><strong>enum和Enum区别：</strong></p><p>enum：是JDK1.5之后提供的关键字，用来定义枚举类</p><p>Enum：是一个抽象类，所有使用enum关键字定义的类默认继承此类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">EnumClass</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 枚举对象要写在第一行</span>  <span class="token class-name">Obj1</span><span class="token punctuation">(</span><span class="token string">"lala1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Obj2</span><span class="token punctuation">(</span><span class="token string">"lala2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化对象</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">// 定义属性</span>  <span class="token class-name">EnumClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码相当于干了什么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Obj1</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">Obj1</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Obj2</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">Obj1</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 然后，创建两个对象，将这两个对象放入枚举类中</span><span class="token class-name">Obj1</span> <span class="token class-name">Obj1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj1</span><span class="token punctuation">(</span><span class="token string">"lala2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Obj2</span> <span class="token class-name">Obj2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj2</span><span class="token punctuation">(</span><span class="token string">"lala1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 可以通过如下方式获取</span><span class="token class-name">EnumClass</span> obj1 <span class="token operator">=</span> <span class="token class-name">EnumClass</span><span class="token punctuation">.</span><span class="token class-name">Obj1</span><span class="token punctuation">;</span><span class="token class-name">EnumClass</span> obj2 <span class="token operator">=</span> <span class="token class-name">EnumClass</span><span class="token punctuation">.</span><span class="token class-name">Obj2</span><span class="token punctuation">;</span><span class="token comment">//Obj10lala1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"呼啦啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Obj10呼啦啦,打印对象的名字，序号和对象的name属性值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj1<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="152-枚举实现接口"><a class="markdownIt-Anchor" href="#152-枚举实现接口"></a> 15.2 枚举实现接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IMessage</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token keyword">implements</span> <span class="token class-name">IMessage</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 枚举对象要写在第一行</span>  <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化对象</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span> <span class="token comment">// 定义属性</span>  <span class="token keyword">private</span> <span class="token class-name">Seanson</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="153-枚举类中直接定义抽象方法"><a class="markdownIt-Anchor" href="#153-枚举类中直接定义抽象方法"></a> 15.3 枚举类中直接定义抽象方法</h2><p>枚举类中直接定义抽象方法，并且要求每一个枚举对象都要独立覆写此抽象方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">EnumClass</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Obj1</span><span class="token punctuation">(</span><span class="token string">"lala1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"lala1的getMessage"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">Obj2</span><span class="token punctuation">(</span><span class="token string">"lala2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"$classname&#123;"</span> <span class="token operator">+</span>        <span class="token string">"name='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>        <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token class-name">EnumClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="16-异常"><a class="markdownIt-Anchor" href="#16-异常"></a> 16 异常</h1><p>Java是采用面向对象的方式来处理异常。处理过程</p><ol><li>抛出异常：在执行一个方法时，如果发生异常，则这个方法生成代表该异常的对象，停止当前执行路径，并把异常提交给jre</li><li>捕获异常：JRE得到异常后，寻找相应的代码来处理异常。JRE在方法的调用栈中查找，从生成异常的方法开始回溯，直到找到相应的异常处理代码为止。</li></ol><p><img data-src="http://resource.silverbeats.cn/static/images/java/Exception%E5%88%86%E7%B1%BB.png" alt="异常分类" /></p><h2 id="161-自定义异常"><a class="markdownIt-Anchor" href="#161-自定义异常"></a> 16.1 自定义异常</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyArray</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> age<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalAgeException</span><span class="token punctuation">(</span><span class="token string">"年龄不能为负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">IllegalAgeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token operator">/</span><span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">IllegalAgeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">IllegalAgeException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>要避免使用异常处理代替错误处理，这样会降低程序的清晰性，并且效率低下</li><li>处理异常不可以代替简单测试，只在异常情况下使用异常机制</li><li>不要进行小粒度的异常处理，应该将整个任务包装在try语句块中</li><li>异常往往在高层处理</li></ol><h2 id="162-异常抛出"><a class="markdownIt-Anchor" href="#162-异常抛出"></a> 16.2 异常抛出</h2><p>throw：写在方法内部</p><p>throws：写在方法上</p><h1 id="17-内部类"><a class="markdownIt-Anchor" href="#17-内部类"></a> 17 内部类</h1><p>在java中内部类主要分为成员内部类(静态内部类、非静态内部类)、匿名内部类、局部内部类。成员内部类可以使用private、default、protected、public任意进行修饰。</p><h2 id="171-成员内部类"><a class="markdownIt-Anchor" href="#171-成员内部类"></a> 17.1 成员内部类</h2><p>内部类最大的缺陷是破坏了程序的结构，但也有一定的好处：<strong>可以访问外部类的私有属性</strong></p><h3 id="1711-非静态内部类"><a class="markdownIt-Anchor" href="#1711-非静态内部类"></a> 17.1.1 非静态内部类</h3><ol><li>非静态内部类必须寄存在一个外部类对象里。因此，如果有一个非静态内部类对象，那么一定存在对应的外部类对象，非静态内部类对象单独属于外部类的某个对象</li><li>非静态内部类可以直接访问外部外部类的成员，但是外部类不能直接访问非静态内部类成员</li><li>非静态内部类不能有静态方法、静态属性和静态初始化块</li><li>外部类的静态方法、静态代码块不能访问非静态内部类，包括不能使用非静态内部类定义变量，创建实例</li><li>成员变量访问要点<ul><li>内部类里方法的局部变量：变量名</li><li>内部类属性：this.变量名</li><li>外部类属性：外部类名.this.变量名</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Outer外部类的name"</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">outerPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 访问outer的私有属性</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问outer的私有属性</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个内部类对象</span>    <span class="token class-name">Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问内部类inner的私有属性</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inner<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用内部类的私有方法</span>    inner<span class="token punctuation">.</span><span class="token function">innerPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Inner内部类的name"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">innerPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 访问inner的私有属性</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 访问inner的私有属性</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 访问outer的私有属性</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部类本身也属于一个类，虽然大部分的情况下内部类往往是被外部类包裹的，但是外部依然可以产生内部类实例化对象，格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">外部类<span class="token punctuation">.</span>内部类 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> 内部类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token class-name">Inner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">innerPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过javac编译后，上面的例子会生成一个Outer&amp;Inner.class类文件，其中这个&quot;$“符号，到程序中就是”.&quot;，故内部类的全称就是&quot;外部类.内部类&quot;。因为内部类存在于外部类，故必须先有外部类，才能有内部类。</p><p><s>如果Inner类只能有Outer来使用，可以给该内部类设置private</s></p><h3 id="1713-static内部类"><a class="markdownIt-Anchor" href="#1713-static内部类"></a> 17.1.3 static内部类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MSG <span class="token operator">=</span> <span class="token string">"haha"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Outer</span><span class="token punctuation">.</span>MSG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token class-name">Inner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，这个Inner类是一个独立的类，如果此时想要实例化Inner类对象，需要“外部类.内部类”格式，要与上面不加static的内部类实例化进行对比。</p><h2 id="172-匿名内部类"><a class="markdownIt-Anchor" href="#172-匿名内部类"></a> 17.2 匿名内部类</h2><p>比较适合只需要用一次的类。比如：键盘监听操作等</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 父类构造器<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span>\实现接口 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//匿名内部类类体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>匿名内部类没有访问修饰符</li><li>匿名内部类没有构造方法。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ssas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">AA</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">.</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> AA <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="173-方法中的内部类"><a class="markdownIt-Anchor" href="#173-方法中的内部类"></a> 17.3 方法中的内部类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"haha"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 方法中直接实例化内部类对象</span>    <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述，想要内部类Inner直接访问参数time、方法的局部变量info，必须是JDK1.8之后才支持，因为有了Lambda表达式。而在之前需要在info、和time前添加final关键字。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="174-内部接口"><a class="markdownIt-Anchor" href="#174-内部接口"></a> 17.4 内部接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Channal</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendChannal</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">interface</span> <span class="token class-name">Message</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannalImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Channal</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendChannal</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">MessageImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"呼啦啦"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Channal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChannalImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">sendChannal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannalImpl</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">MessageImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="175-内部抽象类"><a class="markdownIt-Anchor" href="#175-内部抽象类"></a> 17.5 内部抽象类</h2><p>内部抽象类可以定义在普通类、抽象类、接口内部都是可以的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Channal</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractMessage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannalImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Channal</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AbstractMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">MessageImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMessage</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"哗啦啦"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Channal</span> channal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChannalImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channal<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="176-接口内部类实现"><a class="markdownIt-Anchor" href="#176-接口内部类实现"></a> 17.6 接口内部类实现</h2><p>如果定义了一个接口，可以在内部利用类实现接口，在JDK1,8之后，接口中可以写static方法，不受实例化对象的控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IChannal</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">ChannalImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IChannal</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哗啦啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IChannal</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChannalImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannalImpl</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IChannal</span> channal <span class="token operator">=</span> <span class="token class-name">IChannal</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channal<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="18-lambda"><a class="markdownIt-Anchor" href="#18-lambda"></a> 18 Lambda</h1><p>在JDK1.8之后，为了简化使用者进行代码的开发，专门提供了Lambda函数式编程。对于函数式编程较为出名的是Haskell、Scala，利用函数式编程可以避免掉面向对象编程中一些繁琐的处理问题。</p><ul><li>以前的写法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，核心语句只有一行，但还是要按照面向对象设计结构进行开发。</p><ul><li>Lambda写法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求：SAM（Single Abstract Method），在Message接口中**<mark>只能有一个抽象方法</mark>**，像这样的接口被称为函数式接口。</p><p>写法：</p><ul><li>()-&gt;{};</li><li>(参数1,参数2)-&gt;{};</li><li>只有一行语句，(参数1,参数2)-&gt;语句;</li></ul><h2 id="181-方法的引用"><a class="markdownIt-Anchor" href="#181-方法的引用"></a> 18.1 方法的引用</h2><p>JDK1.8之后，提供方法引用，即，不同的方法名称可以描述同一个方法。</p><ul><li>引用静态方法：类名称 :: static 方法名称;</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// p描述参数、R描述返回值</span><span class="token keyword">interface</span> <span class="token class-name">IFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">P</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> fun <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引用某个示例对象的方法：实例化对象:: 普通方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fun <span class="token operator">=</span> <span class="token string">"haha"</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引用特定类型的方法：特定类::普通方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">P</span> p1<span class="token punctuation">,</span> <span class="token class-name">P</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fun <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引用构造方法：类名称 :: new</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span><span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span><span class="token string">", age='"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span><span class="token string">'&#125;'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">IFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> fun <span class="token operator">=</span> <span class="token class-name">Person</span> <span class="token operator">::</span> <span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="182-内建函数式接口"><a class="markdownIt-Anchor" href="#182-内建函数式接口"></a> 18.2 内建函数式接口</h2><p>java.util.funtion开发包，里面可以直接使用函数式接口，在这个包下面有几个核心接口可供使用。</p><ul><li>功能性函数式接口：Function&lt;T,R&gt;</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> fun <span class="token operator">=</span> <span class="token string">"**hello"</span><span class="token operator">::</span><span class="token function">startsWith</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>消费型函数式接口，Consumer&lt;T&gt;：只能进行数据的处理操作，而没有任何的返回</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>供给型函数式接口：Supplier&lt;T&gt;，该方法没有接受参数，但是有返回值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>断言型函数式接口：进行判断处理</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="19-uml"><a class="markdownIt-Anchor" href="#19-uml"></a> 19 UML</h1><p>UML是统一建模语言，本质就是利用图形化的形式来实现程序类关系的描述。</p><p><a href="https://www.cnblogs.com/jiangds/p/6596595.html">具体详情参考：UML各种图总结-精华 - 春风十里的情 - 博客园</a></p><h2 id="191-类图"><a class="markdownIt-Anchor" href="#191-类图"></a> 19.1 类图</h2><p>一般描述一个类结构描述，万网可以使用三层的结构来表示。</p><p>第一层：类名</p><p>第二层：属性</p><p>第三层：方法</p><p>如果要是一个普通类的名称，往往直接编写即可，如果是抽象类，使用斜体，但为了避免正体斜体部分，会在抽象类上加abstract</p><p>对于类中属性，可以使用&quot;访问权限 属性名称 ：属性类型&quot;，而对访问权限，通常考虑public（+），private（-），protected（#）</p><p>对于类中的方法采用的格式&quot;访问权限 方法名称() ： 返回值&quot;结构来描述，一般的方法都是public（+）</p><ul><li><p>子类实现接口使用的是：三角和虚线</p></li><li><p>类的继承使用的是：三角和实线</p></li></ul><p>实际使用的时候手画类图是无意义的，会先写代码，然后通过转换引擎将代码转为类图显示。</p><h2 id="192-时序图"><a class="markdownIt-Anchor" href="#192-时序图"></a> 19.2 时序图</h2><p>通过图形来表示程序的执行流程</p><h2 id="193-用例图"><a class="markdownIt-Anchor" href="#193-用例图"></a> 19.3 用例图</h2><p>描述程序的执行和分配，例如：现在如果是系统管理员可能拥有系统初始化、系统备份、公告发布的功能，而公告管理员只负责公告的管理，可以在设计书上写上一些用例图加以说明。</p>]]></content>
    
    
    <summary type="html">java基础,其中内容比较精简,不全</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    <category term="语言基础" scheme="blog.silverbeats.cn/categories/java/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="blog.silverbeats.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记整理</title>
    <link href="blog.silverbeats.cn/Spring/"/>
    <id>blog.silverbeats.cn/Spring/</id>
    <published>2020-10-26T23:53:31.000Z</published>
    <updated>2020-11-09T08:20:05.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-spring"><a class="markdownIt-Anchor" href="#1-spring"></a> 1 Spring</h1><h2 id="11-简介"><a class="markdownIt-Anchor" href="#11-简介"></a> 1.1 简介</h2><p>Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</p><ul><li><p>目的：解决企业应用开发的复杂性</p></li><li><p>功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能</p></li><li><p>范围：任何Java应用</p></li></ul><p>Spring是一个轻量级控制反转(IoC)和面向切面(AOP)的容器框架。</p><ul><li>2002，首次推出Spring框架的雏形：interface21</li><li>Spring框架即以interface21框架为基础，经过重新设计，不断丰富内涵，在2004年3月24日发布1.0版本</li><li>Spring理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架</li></ul><p>SSH：Struct2 + Spring + Hibernate</p><p>SSM：SpringMVC +Spring + Mybatis</p><p><a href="https://repo.spring.io/release/org/springframework/spring/">SpirngFrameWork下载地址</a></p><p><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference">Spring Framework 5.1.3.RELEASE 中文文档 | Docs4dev</a></p><p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/">Spring官方文档</a></p><ul><li>Spring是一个开源的免费的框架（容器）</li><li>Spring是一个轻量级，非入侵式的框架</li><li><mark><strong>控制翻转（IOC）、面向切面编程（AOP）</strong></mark></li><li>支持事务的处理，对框架整合的支持</li></ul><h2 id="12-spring七大模块"><a class="markdownIt-Anchor" href="#12-spring七大模块"></a> 1.2 Spring七大模块</h2><img data-src="http://resource.silverbeats.cn/static/images/Spring/Spring七大模块.png"><h3 id="121-核心容器spring-core"><a class="markdownIt-Anchor" href="#121-核心容器spring-core"></a> 1.2.1 核心容器(Spring core)</h3><p>核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。Spring使用BeanFactory来产生和管理Bean，它是工厂模式的实现。BeanFactory使用控制反转(IoC)模式将应用的配置和依赖性规范与实际的应用程序代码分开。BeanFactory使用依赖注入的方式提供给组件依赖。</p><h3 id="122-spring上下文spring-context"><a class="markdownIt-Anchor" href="#122-spring上下文spring-context"></a> 1.2.2 Spring上下文(Spring context)</h3><p>Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，如JNDI、EJB、电子邮件、国际化、校验和调度功能。</p><h3 id="123-spring面向切面编程spring-aop"><a class="markdownIt-Anchor" href="#123-spring面向切面编程spring-aop"></a> 1.2.3 Spring面向切面编程(Spring AOP)</h3><p>通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</p><h3 id="124-spring-dao模块"><a class="markdownIt-Anchor" href="#124-spring-dao模块"></a> 1.2.4 Spring DAO模块</h3><p>DAO模式主要目的是将持久层相关问题与一般的的业务规则和工作流隔离开来。Spring 中的DAO提供一致的方式访问数据库，不管采用何种持久化技术，Spring都提供一直的编程模型。Spring还对不同的持久层技术提供一致的DAO方式的异常层次结构。</p><h3 id="125-spring-orm模块"><a class="markdownIt-Anchor" href="#125-spring-orm模块"></a> 1.2.5 Spring ORM模块</h3><p>Spring 与所有的主要的ORM映射框架都集成的很好，包括Hibernate、JDO实现、TopLink和IBatis SQL Map等。Spring为所有的这些框架提供了模板之类的辅助类，达成了一致的编程风格。</p><h3 id="126-spring-web模块"><a class="markdownIt-Anchor" href="#126-spring-web模块"></a> 1.2.6 Spring Web模块</h3><p>Web上下文模块建立在应用程序上下文模块之上，为基于Web的应用程序提供了上下文。Web层使用Web层框架，可选的，可以是Spring自己的MVC框架，或者提供的Web框架，如Struts、Webwork、tapestry和jsf。</p><h3 id="127-spring-mvc框架spring-webmvc"><a class="markdownIt-Anchor" href="#127-spring-mvc框架spring-webmvc"></a> 1.2.7 Spring MVC框架(Spring WebMVC)</h3><p>MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。Spring的MVC框架提供清晰的角色划分：控制器、验证器、命令对象、表单对象和模型对象、分发器、处理器映射和视图解析器。Spring支持多种视图技术。</p><h1 id="2-ioc理论推导"><a class="markdownIt-Anchor" href="#2-ioc理论推导"></a> 2 IOC理论推导</h1><h2 id="21-初始"><a class="markdownIt-Anchor" href="#21-初始"></a> 2.1 初始</h2><p>原先的做法</p><ul><li>UserDao接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>UserDaoImpl实现类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里是UserDaoImpl的getUser方法,获取用户数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserService接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>UserServiceImpl实现类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">UserDao</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试使用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>弊端：用户的需求可能会影响原来的代码</p><h2 id="22-解耦"><a class="markdownIt-Anchor" href="#22-解耦"></a> 2.2 解耦</h2><ul><li>UserServiceImpl实现类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">UserDao</span> user<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>变化：</strong></p><ul><li>之前，程序是主动创建，控制权在程序员手上，每次需求的变化，需要程序员来修改</li><li>使用set注入后，程序不再有主动性，而是变成被动的接受对象</li><li>程序员不用再去管理对象的创建，系统的耦合性降低</li></ul><h2 id="23-ioc本质"><a class="markdownIt-Anchor" href="#23-ioc本质"></a> 2.3 IOC本质</h2><p>控制反转（Inversion of Control），是一种设计思想，DI（依赖注入）是IOC的一种实现方法。没有IOC的程序中，使用面向对象变成，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制翻转后将对象的创建转移给第三方。</p><p>采用XML方式配置Bean时，Bean的定义信息是和实现分离的，而采用注解的方式可以把二者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到零配置的目的</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定的对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入（Dependency Injection，DI）</strong></p><h1 id="3-hellospring"><a class="markdownIt-Anchor" href="#3-hellospring"></a> 3 helloSpring</h1><ul><li>pom.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>资源文件beans.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用Spring来创建对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SpringHello<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取Spring的上下文对象</span>  <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从spring容器中获取对象</span>  <span class="token class-name">Hello</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-spring配置"><a class="markdownIt-Anchor" href="#4-spring配置"></a> 4 Spring配置</h1><h2 id="41-别名"><a class="markdownIt-Anchor" href="#41-别名"></a> 4.1 别名</h2><p>usertest和user这两个名字都对应同一个bean，都能用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>75<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>娃哈哈<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usertest<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-bean的配置"><a class="markdownIt-Anchor" href="#42-bean的配置"></a> 4.2 Bean的配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">primary</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>id：bean的名字</li><li>class：bean对象对应的全限定名</li><li>name：别名，可以起多个别名，不同别名之间可以用空格、逗号、分号分割，可以混搭</li><li>scope：作用域【session|prototype|request|singleton默认】</li></ul><table><thead><tr><th style="text-align:left">Scope</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">singleton</td><td style="text-align:left">（默认）将每个Spring IoC容器的单个bean定义范围限定为单个对象实例</td></tr><tr><td style="text-align:left">prototype</td><td style="text-align:left">每次从容器中获取都会获得一个新对象</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">将单个bean定义的范围限定为单个HTTP请求的生命周期。也就是说，每个HTTP请求都有一个在单个bean定义后面创建的bean实例。仅在可感知网络的Spring上下文中有效ApplicationContext。</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">将单个bean定义的范围限定为HTTP的生命周期Session。仅在可感知网络的Spring上下文中有效ApplicationContext。</td></tr><tr><td style="text-align:left">application</td><td style="text-align:left">将单个bean定义的作用域限定为的生命周期ServletContext。仅在可感知网络的Spring上下文中有效ApplicationContext。</td></tr><tr><td style="text-align:left">websocket</td><td style="text-align:left">将单个bean定义的作用域限定为的生命周期WebSocket。仅在可感知网络的Spring上下文中有效ApplicationContext。</td></tr></tbody></table><ul><li><p>lazy-init：【default|false|true】是否懒加载</p><blockquote><p>原本值是false，也就是default。项目启动，不管该bean是否使用都会创建</p><p>当设置为true，只有在使用的时候才创建</p></blockquote></li><li><p>abstract：【true|false】可以声明某个bean是抽象的不能实例化</p></li><li><p>autowire：【default|byName|byType|constructor|no】</p></li><li><p>autowire-candidate：【true|default|false】</p></li><li><p>factory-bean &amp;&amp; factory-Method：FactoryBean实现对象的创建</p></li><li><p>init-method：定义bean初始化时调用的方法</p></li><li><p>destroy-method：定义bean销毁时调用的方法</p></li></ul><h2 id="43-import导入"><a class="markdownIt-Anchor" href="#43-import导入"></a> 4.3 import导入</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>项目多人开发，不同的类注册在不同的bean中，可以使用import将所有的beans.xml合并为一个applicationContext.xml，在最终使用时，可以只使用applicationContext.xml</p><h1 id="5-依赖注入"><a class="markdownIt-Anchor" href="#5-依赖注入"></a> 5 依赖注入</h1><h2 id="51-构造器注入"><a class="markdownIt-Anchor" href="#51-构造器注入"></a> 5.1 构造器注入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两个参数的有参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name参数的有参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age参数的有参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="511-使用无参构造器"><a class="markdownIt-Anchor" href="#511-使用无参构造器"></a> 5.1.1 使用无参构造器</h3><p>默认方式</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--property标签:      name: 类的属性名      value: 该属性名需要被赋的值，通过类的set方法      ref: 当类中该属性名对应的是复杂对象,使用ref进行赋值--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="512-调用对应的有参构造器"><a class="markdownIt-Anchor" href="#512-调用对应的有参构造器"></a> 5.1.2 调用对应的有参构造器</h3><ul><li>直接通过参数名来调用对应的构造器</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过参数的type对应相应的构造器</li></ul><p>当有多个参数同类型，使用type会导致歧义，可以结合index使用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>75<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>娃哈哈<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="52-set注入"><a class="markdownIt-Anchor" href="#52-set注入"></a> 5.2 set注入</h2><p>依赖注入：</p><ul><li>依赖：bean的对象创建依赖于容器</li><li>注入：bean对象中所有的属性由容器来注入</li></ul><h3 id="521-测试用例"><a class="markdownIt-Anchor" href="#521-测试用例"></a> 5.2.1 测试用例</h3><ul><li>地址对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>学生类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hobbies<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> card<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> games<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Properties</span> info<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> wife<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="522-基本类型-string类型-bean-null注入"><a class="markdownIt-Anchor" href="#522-基本类型-string类型-bean-null注入"></a> 5.2.2 基本类型、String类型、Bean、null注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Address<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--下面是赋null字符串--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>null<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="523-数组注入"><a class="markdownIt-Anchor" href="#523-数组注入"></a> 5.2.3 数组注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>《红楼梦》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="524-集合注入set-map-list"><a class="markdownIt-Anchor" href="#524-集合注入set-map-list"></a> 5.2.4 集合注入（Set、Map、List）</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--list注入--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>听歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>coding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>看电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--map注入--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12341<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>银行卡<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456789<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--set集合--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>崩溃3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>coc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="525-properties注入"><a class="markdownIt-Anchor" href="#525-properties注入"></a> 5.2.5 Properties注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="53-p命名空间-c命名空间"><a class="markdownIt-Anchor" href="#53-p命名空间-c命名空间"></a> 5.3 p命名空间、c命名空间</h2><p>**p命名空间：**通过属性来注入，set方法来注入，调用的是无参构造器创建对象</p><p>**c命名空间：**通过构造器注入，调用有参构造</p><ul><li>导入p命名空间之前</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>导入p命名空间之后</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>导入方法</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name">&lt;!--添加p命名空间头文件约束--</span><span class="token punctuation">></span></span>        xmlns:p="http://www.springframework.org/schema/p" <span class="token comment">&lt;!--添加c命名空间头文件约束--></span>        xmlns:c="http://www.springframework.org/schema/c"       xsi:schemaLocation="http://www.springframework.org/schema/beans       https://www.springframework.org/schema/beans/spring-beans.xsd"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过c命名空间注入</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="6-使用注解开发"><a class="markdownIt-Anchor" href="#6-使用注解开发"></a> 6 使用注解开发</h1><p>在Spring4之后，要使用注解开发，务必保证aop包导入</p><p>使用注解需要context约束，增加注解支持</p><p>Spring的注解：</p><ul><li>@Component，【@Repository，@Service，@Controller】是@Component的衍生注解</li><li>@Scope：可指定类的作用域【singleton|prototype】</li><li>@Value</li><li>@Autowired</li><li>@Bean</li><li>@Configuration 表示这是个配置类,类似ApplicationContext.xml</li><li>@ComponentScan(“全类名”) // 扫描指定的包</li><li>@Import(类.class) 将其他java配置类导入合并</li></ul><h2 id="61-bean的自动装配"><a class="markdownIt-Anchor" href="#61-bean的自动装配"></a> 6.1 bean的自动装配</h2><h3 id="611-bean标签的autowire属性"><a class="markdownIt-Anchor" href="#611-bean标签的autowire属性"></a> 6.1.1 bean标签的autowire属性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>byName自动装配：会自动在容器中查找和自己set对象后面的值对应的beanid</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--beanid的写法要符合驼峰，与set方法一致--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Dog<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Cat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>倘若出现多个同id的bean会出错</p></blockquote><ul><li>byType自动装配：会自动在容器中查找和自己set对象后面的类型对应的bean</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Dog<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Cat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><mark>该类型得全局唯一</mark></p></blockquote><h3 id="612-bean的自动装配"><a class="markdownIt-Anchor" href="#612-bean的自动装配"></a> 6.1.2 bean的自动装配</h3><p>jdk1.5支持注解，Spring2.5支持注解</p><ul><li>导入约束和注解支持</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       https://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context      https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--注解支持--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.People<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"dog2"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@Autowired</strong></p><ul><li>按类型byType去装配，当存在多个同类型时，再按照byName的方式去选择</li><li>people可以不需要set方法</li><li>required为true是指该属性是必须的，Spring容器中一定要有这个bean，不然会报错</li><li>required为false是指该属性是非必须的，Spring容器中一定要可以没有这个bean</li></ul><p><strong>@Qualifier(“dog2”)</strong></p><ul><li>可以指定某个bean来装配</li><li>当@Autowired不管是通过类型还是名字都找不到时，会看@Qualifier给定的beanid</li></ul><p><strong>@Resource</strong></p><ul><li>可以通过指定name或者type来规定是按byName还是按byType来装配</li><li>当通过byType去装配时，找不到，可以通过ByName去找</li><li>当通过ByName去装配时，找不到就报错，不会再通过byType</li><li>name和type和结合</li></ul><p><img data-src="http://resource.silverbeats.cn/static/images/Spring/Autowired%E6%B5%81%E7%A8%8B.png" alt="SpringAutowired流程" /></p><h3 id="613-component"><a class="markdownIt-Anchor" href="#613-component"></a> 6.1.3 @Component</h3><ul><li>需要aop包的支持</li><li>applicationContext.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       https://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--注解支持--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--指定要扫描的包下的注解--></span><span class="token comment">&lt;!--可以在扫描过程中排除一些不需要的逐渐--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>Type取值</th><th>说明</th><th>expression</th></tr></thead><tbody><tr><td>annotation</td><td>按照注解来排除，标注了指定注解的组件不要</td><td>注解的全类名</td></tr><tr><td>assignable</td><td>按照类进行排除</td><td>排除类的全类名</td></tr><tr><td>aspectj</td><td>aspectj表达式（没人用过）</td><td></td></tr><tr><td>custom</td><td>实现typeFilter接口，自己写代码，哪些是否使用</td><td></td></tr><tr><td>regex</td><td>写正则表达式</td><td></td></tr></tbody></table><ul><li>User.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Haha"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过xml配置文件指定扫描的包后，在需要自动注入的类上加上<code>@Component</code>注解即可实现自动导入，以前bean的注入是需要在配置文件中写：<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code>，使用这个注解后，则不需要了</p><h2 id="62-属性的自动注入"><a class="markdownIt-Anchor" href="#62-属性的自动注入"></a> 6.2 属性的自动注入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"Haha"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="63-使用java的方式配置spring"><a class="markdownIt-Anchor" href="#63-使用java的方式配置spring"></a> 6.3 使用Java的方式配置Spring</h2><ul><li>User类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"呼啦啦"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">//省略了 get set toString</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ConfigFile类（名字无所谓）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 也会被Spring接管,注册到容器中,因为它本来就是个@Component</span><span class="token annotation punctuation">@Configuration</span> <span class="token comment">// 表示这是个配置类,类似ApplicationContext.xml</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.silverbeats.pojo"</span><span class="token punctuation">)</span> <span class="token comment">// 扫描指定的包</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">ConfigFile2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigFile</span> <span class="token punctuation">&#123;</span><span class="token comment">// 注册一个bean,相当于写了一个bean标签</span><span class="token comment">// 方法名,相当于bean标签的id</span><span class="token comment">// 返回值,相当于bean标签的class</span><span class="token annotation punctuation">@Bean</span>  <span class="token comment">// @Scope("prototype") 倘若加上这个注解,后面测试user1!=user2,因为不是单例了</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 注入到bean的对象</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigFile</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user3 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的一系列操作倘若写成xml配置文件的形式，相当于注册了两个bean，一个bean的id叫user，一个bean的id叫getUser，它们都是User类型</p><h1 id="7-其他bean操作"><a class="markdownIt-Anchor" href="#7-其他bean操作"></a> 7 其他bean操作</h1><h2 id="71-通过继承实现bean配置信息重用"><a class="markdownIt-Anchor" href="#71-通过继承实现bean配置信息重用"></a> 7.1 通过继承实现bean配置信息重用</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--通过parent来进行配置信息重用，其中age和gender会继承person1，name不同可以改--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Person<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="72-通过abstract属性创建一个模板bean"><a class="markdownIt-Anchor" href="#72-通过abstract属性创建一个模板bean"></a> 7.2 通过abstract属性创建一个模板bean</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  abstract="true"  这个bean的配置是抽象的，只能被继承，不能获取实例--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Person<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.Person<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="73-配置通过静态工厂方法创建的bean-实例工厂方法创建的bean-factorybean"><a class="markdownIt-Anchor" href="#73-配置通过静态工厂方法创建的bean-实例工厂方法创建的bean-factorybean"></a> 7.3 配置通过静态工厂方法创建的bean、实例工厂方法创建的bean、FactoryBean</h2><p>工厂模式：工厂帮助创建对象，有一个专门创建对象的类，这个类叫工厂</p><p>工厂分为：静态工厂和实例工厂</p><ul><li>静态工厂：工厂本身不用创建对象，通过静态方法调用，对象=工厂类.工厂方法</li><li>实例工厂：需要new工厂，然后对象.方法</li></ul><h3 id="731-静态工厂"><a class="markdownIt-Anchor" href="#731-静态工厂"></a> 7.3.1 静态工厂</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--虽然用的是工厂的类，但是返回的是飞机这个类，并非工厂实例--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>airPlane1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>静态工厂的类<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAirPlane<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--可以为工厂方法设置参数--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="732-实例工厂"><a class="markdownIt-Anchor" href="#732-实例工厂"></a> 7.3.2 实例工厂</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--虽然用的是工厂的类，但是返回的是飞机这个类，并非工厂实例--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>airPlane1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>实例工厂的类<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- factory-bean：指定使用哪个工厂 factory-method：指定使用工厂哪个方法创建实例--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>airplane<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>飞机类<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>实例工厂类<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>创建飞机对象的方法<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--可以为工厂方法设置参数--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="733-factorybean"><a class="markdownIt-Anchor" href="#733-factorybean"></a> 7.3.3 FactoryBean</h3><p>它是Spring规定的一个接口，只要是这个接口的实现类，Spring就会认为是一个工厂</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token comment">/*   * Spring自动调用该方法创建对象   */</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/** * 返回创建自动类型 * Spring会自动调用该方法来确认创建对象是什么类型 */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/** * 是否是单例 * 倘若是true，说明是单实例，那么创建的类就是单实例 */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果是单实例，应该在容器启动完成前，就应该创建好对象，但是FactoryBean的实现类，不管创建的是单实例还是多实例，都是在获取的时候才创建实例对象。</p></blockquote><h2 id="74-bean的生命周期方法"><a class="markdownIt-Anchor" href="#74-bean的生命周期方法"></a> 7.4 Bean的生命周期方法</h2><p>生命周期：bean的创建和销毁</p><p>单实例bean：容器启动的时候就会创建好，容器关闭，也会销毁创建的bean。bean的构造器——初始化方法——容器关闭——bean销毁</p><p>多实例bean：获取的时候创建。容器创建——获取时创建bean（构造器—&gt;初始化方法）——容器关闭时不会调用bean的销毁方法</p><p>可以给bean自定义生命周期方法，spring在创建或者销毁时，就会调用指定的方法</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--销毁和初始化的方法不能有参数，可以抛异常--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">destory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">init-methods</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Spring有一个接口：后置处理器，可以在bean的初始化前后调用方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPos</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * 初始化之前调用 * arg0：要初始化的bean * arg1：被初始化的bean的名字 */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> arg0<span class="token punctuation">,</span> <span class="token class-name">String</span> arg1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg1<span class="token operator">+</span><span class="token string">"的初始化方法尚未调用调用完了"</span><span class="token operator">+</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**  *初始化之后调用 */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> arg0<span class="token punctuation">,</span> <span class="token class-name">String</span> arg1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg1<span class="token operator">+</span><span class="token string">"的初始化方法调用完了"</span><span class="token operator">+</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/Spring/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="Springbean的生命周期" /></p><h1 id="8-代理模式"><a class="markdownIt-Anchor" href="#8-代理模式"></a> 8 代理模式</h1><a href="/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/" title="代理模式">代理模式</a><h1 id="9-aop"><a class="markdownIt-Anchor" href="#9-aop"></a> 9 AOP</h1><p>面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使业务逻辑各个部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。AOP的底层是动态代理</p><h2 id="91-aop在spring中的作用"><a class="markdownIt-Anchor" href="#91-aop在spring中的作用"></a> 9.1 AOP在Spring中的作用</h2><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即，与业务逻辑无关的，但是需要关注的部分。比如：日志、安全、缓存、事务……</li><li>切面（ASPECT）：横切关注点被模块化的特殊对象，即，它是个类</li><li>通知（Advice）：切面必须要完成的工作，即，切面中的方法</li><li>目标（Target）：被通知的对象</li><li>代理（Proxy）：向目标对象引用通知之后创建的对象</li><li>切入点（PointCut）：切面通知执行的“地点”定义</li><li>连接点（JointPoint）：与切入点匹配的执行点</li></ul><p><img data-src="http://resource.silverbeats.cn/static/images/Spring/AOP%E6%9C%AF%E8%AF%AD.png" alt="SpringAOP术语" /></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5中类型的Advice</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>方法前</td><td>org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td>方法后</td><td>org.springframework.aop.AfterReturningAdice</td></tr><tr><td>环绕通知</td><td>方法前后</td><td>org.aopalliance.intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td>方法抛异常</td><td>org.springframework.aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td>类中增加新的方法属性</td><td>org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><h2 id="92-在spring中实现aop"><a class="markdownIt-Anchor" href="#92-在spring中实现aop"></a> 9.2 在Spring中实现AOP</h2><p><strong>AOP依赖的包</strong></p><pre class="line-numbers language-none"><code class="language-none">-- 基础包commons-logging-1.1.3.jarspring-aop-4.0.0.RELEASE.jarspring-beans-4.0.0.RELEASE.jarspring-context-4.0.0.RELEASE.jarspring-core-4.0.0.RELEASE.jarspring-expression-4.0.0.RELEASE.jar-- Spring面向切面的基础版包spring-aspects-4.0.0.RELEASE.jar-- Spring面向切面的加强版包-- 好处：即使目标对象没有实现接口，也能动态代理com.springsource.net.sf.cglib-2.2.0.jarcom.springsource.org.aopalliance-1.0.0.jarcom.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Maven导入：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="921-使用spring-api接口"><a class="markdownIt-Anchor" href="#921-使用spring-api接口"></a> 9.2.1 使用Spring API接口</h3><p>**达成的目标：**现有一个UserService接口及其实现类UserServiceImpl，接口中定义了增删改查四个方法，需要实现在不改动UserServiceImpl类、UserService接口的基础上，实现每次调用增删改查方法前后添加日志输出</p><ul><li>SpringApplicationConfig.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       https://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/aop       https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--注册bean--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.log.Log<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.log.AfterLog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--使用原生的Spring API接口--></span>  <span class="token comment">&lt;!--配置aop--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--切入点execution(要执行的位置)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.silverbeats.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--执行环绕增强,给哪个切入点切入什么方法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Log类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实现aop中的接口MethodBeforeAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * @param method: 要执行的目标对象的方法 * @param args: 参数 * @param target: 目标对象 */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AfterLog类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实现aop中的接口AfterReturningAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterLog</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * @param returnValue: 返回值 * @param method: 方法 * @param args: 参数 * @param target: 目标 */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法，返回结果为："</span> <span class="token operator">+</span> returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserService接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserService接口实现类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"select了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"SpringApplicationConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 动态代理,代理的是接口</span>  <span class="token class-name">UserService</span> userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userService<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打印结果</li></ul><pre class="line-numbers language-none"><code class="language-none">com.silverbeats.service.UserServiceImpl的add被执行了add了一个用户执行了add方法，返回结果为：nullcom.silverbeats.service.UserServiceImpl的select被执行了select了一个用户执行了select方法，返回结果为：null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="922-使用自定义切面"><a class="markdownIt-Anchor" href="#922-使用自定义切面"></a> 9.2.2 使用自定义切面</h3><ul><li>切面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自定义切面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiyPointCut</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 切面的方法叫通知</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========方法执行前========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 切面的方法叫通知</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========方法执行后========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SpringApplicationConfig.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注册bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.diy.DiyPointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--自定义切面：ref：要引用的类--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.silverbeats.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--通知advice--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>测试类、UserService、UserServiceImpl代码同上</p></li><li><p>输出</p></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;add了一个用户&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;select了一个用户&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="923-使用spring注解"><a class="markdownIt-Anchor" href="#923-使用spring注解"></a> 9.2.3 使用Spring注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">After</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token comment">// 使用注解方式实现AOP</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationPointCut</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.silverbeats.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====方法执行前====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.silverbeats.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====方法执行后====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在环绕增强中，可以给定一个参数，代表要获取的切入点</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.silverbeats.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"around前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取切入点方法</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Signature:"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取切入点路径</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SourceLocation:"</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSourceLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"kind:"</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取目标</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Target:"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取切入点传入的参数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> arg <span class="token operator">:</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行方法</span><span class="token class-name">Object</span> proceed <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"around后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>xml配置文件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注册bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AnnotationPointCut<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.diy.AnnotationPointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--开启注解支持--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"SpringApplicationConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 动态代理,代理的是接口</span>  <span class="token class-name">UserService</span> userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打印结果</li></ul><pre class="line-numbers language-none"><code class="language-none">around前Signature:void com.silverbeats.service.UserService.add(int)SourceLocation:org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$SourceLocationImpl@8f4ea7ckind:method-executionTarget:com.silverbeats.service.UserServiceImpl@436813f320&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;add了一个用户&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;around后<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-整合mybatis"><a class="markdownIt-Anchor" href="#10-整合mybatis"></a> 10 整合Mybatis</h1><p><a href="http://mybatis.org/spring/zh/index.html">Mybatis-Spring官网</a></p><p><img data-src="http://resource.silverbeats.cn/static/images/Spring/Mybatis%E4%B8%8ESpring%E6%95%B4%E5%90%88%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9.png" alt="Mybatis与Spring整合版本选择" /></p><h2 id="101-导入相关jar包"><a class="markdownIt-Anchor" href="#101-导入相关jar包"></a> 10.1 导入相关jar包</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--单元测试--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--通过导入此包,可以同时导入其他Spring依赖包--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--aop织入--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--Mybatis与Spring整合的包--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--Spring操作数据库的包--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--Mybatis核心包--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--链接数据库Mysql驱动--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="102-mybatis-spring"><a class="markdownIt-Anchor" href="#102-mybatis-spring"></a> 10.2 MyBatis-Spring</h2><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 <code>SqlSession</code> 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 <code>DataAccessException</code>。最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。</p><h2 id="103-整合"><a class="markdownIt-Anchor" href="#103-整合"></a> 10.3 整合</h2><p><strong>首先，在单纯使用Mybatis时，需要做如下步骤：</strong></p><ol><li>导包（Mybatis核心包、操作数据库的mysql-connector-java包）</li><li>编写实体类，属性名与数据库的字段名一致，需要get、set方法以及有参无参构造器</li><li>编写接口，定义操作数据库的方法，比如UserMapper接口</li><li>编写接口对应的Mapper.xml，比如UserMapper.xml，绑定对应接口，给每个方法编写对应的sql语句</li><li>在项目的resource目录下创建mybatis-config.xml核心配置文件，在其中配置诸如：引入外部配置文件（将连接数据库的driver、url、username和password写在properties文件）、日志输出、给实体类起别名、配置environments、注册Mapper等内容。</li><li>使用时，输入流读取mybatis-config.xml，通过sqlSessionFactoryBuilder创建SqlSessionFactory，在通过SqlSessionFactory对象的openSession方法获取SqlSession对象，使用SqlSession对象的getMapper方法，传入接口.的class属性，进行方法调用。</li></ol><p><strong>与Spring整合后，有如下的变化</strong></p><ol><li><p>[导包](#10.1 导入相关jar包)</p></li><li><p>编写实体类，属性名与数据库的字段名一致，需要get、set方法以及有参无参构造器</p></li><li><p>编写接口，定义操作数据库的方法，比如UserMapper接口</p></li><li><p>编写接口对应的Mapper.xml，比如UserMapper.xml，绑定对应接口，给每个方法编写对应的sql语句</p></li><li><p>在项目的resource目录下创建mybatis-config.xml核心配置文件，~~在其中配置诸如：引入外部配置文件（将连接数据库的driver、url、username和password写在properties文件）、日志输出、给实体类起别名、配置environments、注册Mapper等内容。~~经过整合后，可以在mybatis-config.xml进行上面的配置，但其中大部分会转交给spring的配置文件来完成。在resource目录下新建spring-dao.xml配置文件，在其中进行如下的代码编写：</p></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--这里用来代替mybatis的properties文件导入使用spring的DriverManagerDataSource类，通过有参构造，传入username、url、password、driverClassName--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatistest?useSSL=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>......下面的代码内容与此处同文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>~~使用时，输入流读取mybatis-config.xml，通过sqlSessionFactoryBuilder创建SqlSessionFactory，在通过SqlSessionFactory对象的openSession方法获取SqlSession对象，使用SqlSession对象的getMapper方法，传入接口.的class属性，进行方法调用。~~SqlSessionFactory对象以及SqlSession对象的创建需要交给Spring容器。另外在使用时，<strong><mark>需要有接口的实现类</mark></strong></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--通过SqlSessionFactoryBean创建sqlSessionFactory对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--注入数据源--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--绑定mybatis-config配置文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/silverbeats/mapper/UserMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!--  如果加载多个Mapper.xml文件  &lt;property name="mapperLocations" value="classpath*:com/silverbeats/mapper/*.xml"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--SqlSessionTemplate就是之前Mybatis使用的sqlSession--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--只能使用构造器，因为SqlSessionTemplate没有set方法--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--注册bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.mapper.UserMapperImpl<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token comment">&lt;!--通过Set方式注入--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 所有操作，之前都是用sqlSession来执行，现在使用的是sqlSessionTemplate</span>  <span class="token keyword">private</span> <span class="token class-name">SqlSessionTemplate</span> sqlSession<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionTemplate</span> sqlSession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>测试使用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-dao.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">,</span> <span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上面第6步的第二种写法：</strong></p><ul><li>配置文件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/aop                           https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--这里省略dataSource、sqlSessionFactory、sqlSession--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.mapper.UserMapperImpl<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现类</li></ul><blockquote><p>上面的使用方式是需要在Spring.xml中配置注入一个SqlSessionTemplate，故在接口实现类中有SqlSessionTemplate的私有属性和对应Set方法。而现在，通过继承SqlSessionDaoSupport是抽象类，其中有getSqlSession方法，可以直接获取SqlSessionTemplate对象，从而简化实现类的代码。</p><p>但，想要实现这样的做法，需要在spring.xml配置文件中，将sqlSessionFactory进行注入，这个对象是SqlSessionDaoSupport需要的。</p><p>相当于SqlSessionDaoSupport对上面的操作进行了一个封装处理。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">extends</span> <span class="token class-name">SqlSessionDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="11-spring的声明式事务"><a class="markdownIt-Anchor" href="#11-spring的声明式事务"></a> 11 Spring的声明式事务</h1><p><strong>事务的ACID属性：</strong></p><ul><li><p>原子性(Atomicity)：是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p></li><li><p>一致性(Consistency)：事务必须使数据库从一个一致性状态变换到另一个一致性状态。</p></li><li><p>隔离性(Isolation)：事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p>持久性(Durability)：一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置声明式事务--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--结合AOP实现事务织入--></span><span class="token comment">&lt;!--配置事务通知--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--name是指给哪些方法配置事务--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>select*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置事务切入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPointCut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.silverbeats.mapper.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述配置后，当某个操作包含复数个增删改查操作， 只要其中有一个出现问题，这一组操作就会失败。</p><p><strong>&lt;tx:method &gt;的属性详解：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>propagation</td><td>Propagation枚举</td><td>REQUIRED</td><td>事务传播属性</td></tr><tr><td>isolation</td><td>isolation枚举</td><td>DEFAULT(所用数据库默认级别)</td><td>事务隔离级别</td></tr><tr><td>readOnly</td><td>boolean</td><td>false</td><td>是否采用优化的只读事务</td></tr><tr><td>timeout</td><td>int</td><td>-1</td><td>超时(秒)</td></tr><tr><td>rollbackFor</td><td>Class[]</td><td>{}</td><td>需要回滚的异常类</td></tr><tr><td>rollbackForClassName</td><td>String[]</td><td>{}</td><td>需要回滚的异常类名</td></tr><tr><td>noRollbackFor</td><td>Class[]</td><td>{}</td><td>不需要回滚的异常类</td></tr><tr><td>noRollbackForClassName</td><td>String[]</td><td>{}</td><td>不需要回滚的异常类名</td></tr></tbody></table><ul><li><p>readOnly<br />事务属性中的readOnly标志表示对应的事务应该被最优化为只读事务。如果值为true就会告诉Spring我这个方法里面没有insert或者update，你只需要提供只读的数据库Connection就行了，这种执行效率会比read-write的Connection高，所以这是一个最优化提示。在一些情况下，一些事务策略能够起到显著的最优化效果，例如在使用Object/Relational映射工具（如：Hibernate或TopLink）时避免dirty checking（试图“刷新”）。</p></li><li><p>timeout<br />在属性中还有定义“timeout”值的选项，指定事务超时为几秒。一般不会使用这个属性。在JTA中，这将被简单地传递到J2EE服务器的事务协调程序，并据此得到相应的解释。</p></li><li><p>Isolation Level(事务隔离等级)的5个枚举值<br />为什么事务要有Isolation Level这个属性？先回顾下数据库事务的知识：<br />第一类丢失更新(lost update)：在完全未隔离事务的情况下，两个事物更新同一条数据资源，某一事物异常终止，回滚造成第一个完成的更新也同时丢失。<br />第二类丢失更新(second lost updates)：是不可重复读的特殊情况，如果两个事务都读取同一行，然后两个都进行写操作，并提交，第一个事务所做的改变就会丢失。<br />脏读(dirty read)：如果第二个事务查询到第一个事务还未提交的更新数据，形成脏读。因为第一个事务你还不知道是否提交，所以数据不一定是正确的。<br />虚读(phantom read)：一个事务执行两次查询，第二次结果集包含第一次中没有或者某些行已被删除，造成两次结果不一致，只是另一个事务在这两次查询中间插入或者删除了数据造成的。<br />不可重复读(unrepeated read)：一个事务两次读取同一行数据，结果得到不同状态结果，如中间正好另一个事务更新了该数据，两次结果相异，不可信任。</p></li></ul><blockquote><p>当遇到以上这些情况时我们可以设置isolation下面这些枚举值：</p><ul><li>DEFAULT：采用数据库默认隔离级别</li><li>SERIALIZABLE：最严格的级别，事务串行执行，资源消耗最大；</li><li>REPEATABLE_READ：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但是带来了更多的性能损失。</li><li>READ_COMMITTED:大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”。该级别适用于大多数系统。</li><li>READ_UNCOMMITTED：保证了读取过程中不会读取到非法数据。隔离级别在于处理多事务的并发问题。</li></ul></blockquote><ul><li>propagation属性的7个传播行为<br />REQUIRED：指定当前方法必需在事务环境中运行，如果当前有事务环境就加入当前正在执行的事务环境，如果当前没有事务，就新建一个事务。这是默认值。<br />SUPPORTS：指定当前方法加入当前事务环境，如果当前没有事务，就以非事务方式执行。<br />MANDATORY：指定当前方法必须加入当前事务环境，如果当前没有事务，就抛出异常。<br />REQUIRES_NEW：指定当前方法总是会为自己发起一个新的事务，如果发现当前方法已运行在一个事务中,则原有事务被挂起,我自己创建一个属于自己的事务,直我自己这个方法commit结束,原先的事务才会恢复执行。<br />NOT_SUPPORTED：指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。<br />NEVER：指定当前方法绝对不能在事务范围内执行，如果方法在某个事务范围内执行，容器就抛异常，只有没关联到事务，才正常执行。<br />NESTED：指定当前方法执行时，如果已经有一个事务存在,则运行在这个嵌套的事务中.如果当前环境没有运行的事务，就新建一个事务，并与父事务相互独立，这个事务拥有多个可以回滚的保证点。就是指我自己内部事务回滚不会对外部事务造成影响，只对DataSourceTransactionManager事务管理器起效。</li></ul>]]></content>
    
    
    <summary type="html">Spring笔记整理</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    <category term="Spring" scheme="blog.silverbeats.cn/categories/java/Spring/"/>
    
    
    <category term="java" scheme="blog.silverbeats.cn/tags/java/"/>
    
    <category term="Spring" scheme="blog.silverbeats.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>外部排序</title>
    <link href="blog.silverbeats.cn/%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F/"/>
    <id>blog.silverbeats.cn/%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F/</id>
    <published>2020-10-25T12:50:37.000Z</published>
    <updated>2020-10-27T00:06:34.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-内部排序"><a class="markdownIt-Anchor" href="#1-内部排序"></a> 1 内部排序</h1><a href="/%E6%8E%92%E5%BA%8F/" title="点击这里查看内部排序十大排序详情">点击这里查看内部排序十大排序详情</a><h1 id="2-外部排序"><a class="markdownIt-Anchor" href="#2-外部排序"></a> 2 外部排序</h1><p>指在排序期间元素无法全部同时存放在内存中，必须在排序的过程中根据要求，不断的在内存外存之间进行移动</p><h2 id="21-磁盘文件排序"><a class="markdownIt-Anchor" href="#21-磁盘文件排序"></a> 2.1 磁盘文件排序</h2><p>通常采用归并排序。</p><p>首先根据缓冲区的大小将外存上含有n个记录的文件分成若干长度为h的子文件，一次读入内存并利用有限的内部排序算法对它们进行排序，并将排序后得到的有序子文件重新写回外存，通常称这些有序子文件为<mark>归并段或顺串</mark></p><p>然后对这些归并段进行逐趟归并，使归并段组逐渐由小到大至得到整个有序文件</p><p>外部排序的总时间 = 内部排序所需时间 +外存信息读写时间 + 内部归并所需时间</p><p>t<sub>ES</sub> = r*t<sub>IS</sub> +d*t<sub>IO</sub> + S（n-1）t<sub>mg</sub></p><blockquote><p>r：初始化划分归并段个数</p><p>t<sub>IS</sub>：每个归并段需要的时间</p><p>d：磁盘读写的次数</p><p>t<sub>IO</sub>：磁盘读写每次的时间</p><p>S：归并的趟数</p><p>t<sub>mg</sub>：</p></blockquote><p>归并趟数 = ⌈log<sub>m</sub>r⌉  m为归并的路数，r为初始划分归并段的个数</p><h3 id="211-多路平衡归并排序算法败者树"><a class="markdownIt-Anchor" href="#211-多路平衡归并排序算法败者树"></a> 2.1.1 多路平衡归并排序算法—败者树</h3><p><mark>通过增加归并路数，来减少操作磁盘的次数</mark></p><p>败者树是树形选择排序的一种变形，本身是一棵完全二叉树。</p><p>在树形选择排序一节中，对于无序表<code>&#123;49，38，65，97，76，13，27，49&#125;</code>创建的完全二叉树如</p><p>图1 所示，构建此树的目的是选出无序表中的最小值。</p><p>这棵树与败者树正好相反，是一棵“胜者树”。因为树中每个非终端结点（除叶子结点之外的其它结点）中的值都表示的是左右孩子相比较后的较小值（谁最小即为胜者）。例如叶子结点 49 和 38 相对比，由于 38 更小，所以其双亲结点中的值保留的是胜者 38。然后用 38 去继续同上层去比较，一直比较到树的根结点。</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E8%83%9C%E8%80%85%E6%A0%91.png" alt="图1 胜者树" /></p><p>而败者树恰好相反，其双亲结点存储的是左右孩子比较之后的失败者，而胜利者则继续同其它的胜者去比较。</p><p>例如还是图 1 中，叶子结点 49 和 38 比较，38 更小，所以 38 是胜利者，49 为失败者，但由于是败者树，所以其双亲结点存储的应该是 49；同样，叶子结点 65 和 97 比较，其双亲结点中存储的是 97 ，而 65 则用来同 38 进行比较，65 会存储到 97 和 49 的双亲结点的位置，38 继续做后续的胜者比较，依次类推。</p><blockquote><p>胜者树和败者树的区别就是：胜者树中的非终端结点中存储的是胜利的一方；而败者树中的非终端结点存储的是失败的一方。而在比较过程中，都是拿胜者去比较。</p></blockquote><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E8%B4%A5%E8%80%85%E6%A0%91.png" alt="图2 败者树" /></p><p>如图 2 所示为一棵 5-路归并的败者树，其中 b0—b4 为树的叶子结点，分别为 5 个归并段中存储的记录的关键字。 ls 为一维数组，表示的是非终端结点，其中存储的数值表示第几归并段（例如 b0 为第 0 个归并段）。ls[0] 中存储的为最终的胜者，表示当前第 3 归并段中的关键字最小。</p><p>当最终胜者判断完成后，只需要更新叶子结点 b3 的值，即导入关键字 15，然后让该结点不断同其双亲结点所表示的关键字进行比较，败者留在双亲结点中，胜者继续向上比较。</p><p>例如，叶子结点 15 先同其双亲结点 ls[4] 中表示的 b4 中的 12 进行比较，12 为胜利者，则 ls[4] 改为 3，然后 12 继续同 ls[2] 中表示的 10 做比较，10 为胜者，然后 10 继续同其双亲结点 ls[1] 表示的 b1（关键字 9）作比较，最终 9 为胜者。整个过程如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E8%B4%A5%E8%80%85%E6%A0%9102.png" alt="败者树建立过程" /></p><blockquote><p>注意：为了防止在归并过程中某个归并段变为空，处理的办法为：可以在每个归并段最后附加一个关键字为最大值的记录。这样当某一时刻选出的冠军为最大值时，表明 5 个归并段已全部归并完成。（因为只要还有记录，最终的胜者就不可能是附加的最大值）</p></blockquote><h3 id="212-置换选择排序"><a class="markdownIt-Anchor" href="#212-置换选择排序"></a> 2.1.2 置换选择排序</h3><p>上面介绍了增加 k-路归并排序中的 k 值来提高外部排序效率的方法，而除此之外，还有另外一条路可走，即减少初始归并段的个数m</p><blockquote><p>初始归并段的个数m = ⌈n/l⌉（n 表示为外部文件中的记录数，l 表示初始归并段中包含的记录数）</p></blockquote><p>如果要想减小 m 的值，在外部文件总的记录数 n 值一定的情况下，只能增加每个归并段中所包含的记录数 l。而对于初始归并段的形成，就不能再采用上一章所介绍的内部排序的算法，因为所有的内部排序算法正常运行的前提是所有的记录都存在于内存中，而内存的可使用空间是一定的，如果增加 l 的值，内存是盛不下的。</p><p>所以要另想它法，探索一种新的排序方法：置换—选择排序]算法。</p><p>例如已知初始文件中总共有 24 个记录，假设内存工作区最多可容纳 6 个记录，按照之前的选择排序算法最少也只能分为 4 个初始归并段。而如果使用置换—选择排序，可以实现将 24 个记录分为 3 个初始归并段，如图1 所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83.png" alt="选择排序算法的比较" /></p><p>置换—选择排序算法的具体操作过程为：</p><ol><li>首先从初始文件中输入 6 个记录到内存工作区中；</li><li>从内存工作区中选出关键字最小的记录，将其记为 MINIMAX 记录；</li><li>然后将 MINIMAX 记录输出到归并段文件中；</li><li>此时内存工作区中还剩余 5 个记录，若初始文件不为空，则从初始文件中输入下一个记录到内存工作区中；</li><li>从内存工作区中的所有比 MINIMAX 值大的记录中选出值最小的关键字的记录，作为新的 MINIMAX 记录；</li><li>重复过程 3—5，直至在内存工作区中选不出新的 MINIMAX 记录为止，由此就得到了一个初始归并段；</li><li>重复 2—6，直至内存工作为空，由此就可以得到全部的初始归并段。</li></ol><p>拿图 1 中的初始文件为例，首先输入前 6 个记录到内存工作区，其中关键字最小的为 29，所以选其为 MINIMAX 记录，同时将其输出到归并段文件中，如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-01.png" alt="置换选择排序-01" /></p><p>此时初始文件不为空，所以从中输入下一个记录 14 到内存工作区中，然后从内存工作区中的比 29 大的记录中，选择一个最小值作为新的 MINIMAX 值输出到 归并段文件中，如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-02.png" alt="置换选择排序-02" /></p><p>初始文件还不为空，所以继续输入 61 到内存工作区中，从内存工作区中的所有关键字比 38 大的记录中，选择一个最小值作为新的 MINIMAX 值输出到归并段文件中，如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-03.png" alt="置换选择排序-03" /></p><p>如此重复性进行，直至选不出 MINIMAX 值为止，如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-04.png" alt="置换选择排序-04" /></p><p>当选不出 MINIMAX 值时，表示一个归并段已经生成，则开始下一个归并段的创建，创建过程同第一个归并段一样，这里不再赘述。</p><p>在上述创建初始段文件的过程中，需要不断地在内存工作区中选择新的 MINIMAX 记录，即选择不小于旧的 MINIMAX 记录的最小值，此过程需要利用“败者树”来实现。</p><p>同之前所用到的败者树不同的是，在不断选择新的 MINIMAX 记录时，为了防止新加入的关键字值小的影响，每个叶子结点附加一个序号位，当进行关键字的比较时，先比较序号，序号小的为胜者；序号相同的关键字值小的为胜者。</p><p>在初期创建败者树时也可以通过不断调整败者树的方式，其中所有记录的序号均设为 0 ，然后从初始文件中逐个输入记录到内存工作区中，自下而上调整败者树。过程如下：</p><ul><li>首先创建一个空的败者树，如下图所示：</li></ul><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-05.png" alt="置换选择排序-05" /></p><blockquote><p>提示：败者树根结点上方的方框内表示的为最终的胜者所处的位置。</p></blockquote><p>2、从初始文件中读入关键字为 51 的记录，自下往上调整败者树，如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-06.png" alt="置换选择排序-06" /></p><blockquote><p>提示：序号 1 默认为比 0 小，为败者。</p></blockquote><p>3、从初始文件中读入关键字为 49 的记录，调整败者树如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-07.png" alt="置换选择排序-07" /></p><p>4、从初始文件依次读入关键字为 39、46、38、29 的记录，调整败者树如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-08.png" alt="置换选择排序-08" /></p><p>由败者树得知，其最终胜者为 29，设为 MINIMAX 值，将其输出到初始归并文件中，同时再读入下一个记录 14，调整败者树，如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-09.png" alt="置换选择排序-09" /></p><blockquote><p>注意：当读入新的记录时，如果其值比 MINIMAX 大，其序号则仍为 1；反之则为 2 ，比较时序号 1 比序号 2的记录大。</p></blockquote><p>通过不断地向败者树中读入记录，会产生多个 MINIMAX，直到最终所有叶子结点中的序号都为 2，此时产生的新的 MINIMAX 值的序号 2，表明此归并段生成完成，而此新的 MINIMAX 值就是下一个归并段中的第一个记录。</p><p>通过置换选择排序算法得到的初始归并段，其长度并不会受内存容量的限制，且通过证明得知使用该方法所获得的归并段的平均长度为内存工作区大小的两倍。</p><blockquote><p>证明此结论的方法是 E.F.Moore（人名）在 1961 年从置换—选择排序和扫雪机的类比中得出的</p></blockquote><p>若不计输入输出的时间，通过置换选择排序生成初始归并段的所需时间为<code>O(nlogw)</code>（其中 n 为记录数，w 为内存工作区的大小）。</p><h3 id="213-最佳归并树"><a class="markdownIt-Anchor" href="#213-最佳归并树"></a> 2.1.3 最佳归并树</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/排序/归并树.png" alt="归并树"><img data-src='http://resource.silverbeats.cn/static/images/算法/数据结构/排序/归并树例子.png' alt="归并树例子"><blockquote><p>（9+30+12+18+3+17+2+6+24）<em>2</em>2=484（上图中涉及到了两次归并，对外存的读和写各进行 2 次）</p></blockquote><p>通过上面例子得到的归并树，得到的总IO次数不是最佳的，可以通过构造哈夫曼树来得到最小的IO次数</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/排序/最佳归并树例子.png" alt="最佳归并树例子"><blockquote><p>(2<em>3+3</em>3+6<em>3+9</em>2+12<em>2+17</em>2+18<em>2+24</em>2+30)*2=446</p></blockquote><p>【补充构造哈夫曼树】</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/排序/补充虚段.png" alt="补充虚段"><blockquote><p>对于如何判断是否需要增加虚段，以及增加多少虚段的问题，有以下结论直接套用即可：</p><p>在一般情况下，对于 k–路平衡归并来说，若u= (m-1)MOD(k-1)=0，则不需要增加虚段；否则需附加 k-u-1 个虚段。</p><p>比如：初始归并段数量为9，3-路平衡归并， (9-1)MOD(3-1)=0</p><p>比如：初始归并段数量为8，3-路平衡归并， (8-1)MOD(3-1)=1≠0</p><p>需要附加3-1-1 = 1个虚段</p></blockquote><h2 id="22-磁带文件排序"><a class="markdownIt-Anchor" href="#22-磁带文件排序"></a> 2.2 磁带文件排序</h2>]]></content>
    
    
    <summary type="html">数据结构,外部排序</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="blog.silverbeats.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>查找</title>
    <link href="blog.silverbeats.cn/%E6%9F%A5%E6%89%BE/"/>
    <id>blog.silverbeats.cn/%E6%9F%A5%E6%89%BE/</id>
    <published>2020-10-25T12:49:57.000Z</published>
    <updated>2020-10-28T03:51:19.952Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>查找</td><td>在数据集合中寻找满足某种条件的数据元素的过程</td></tr><tr><td>查找表</td><td>用于查找的数据集合，由同一种数据类型(或记录)组成，可以是一个数组或者链表等数据类型。<br>操作：<br>①查询某个特定的数据元素是否在查找表中<br>②检索满足条件的某个特定的数据元素的各种属性<br/>③在查找表中插入一个数据元素<br/>④从查找表中删除一个元素</td></tr><tr><td>静态查找表</td><td>只有上述①②操作，称为静态查找表</td></tr><tr><td>动态查找表</td><td>上述操作①—④都有</td></tr><tr><td>关键字</td><td>数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果<mark>唯一</mark></td></tr><tr><td>平均查找长度ASL</td><td>查找时，关键字比较次数的平均值</td></tr></tbody></table><h1 id="1-顺序查找"><a class="markdownIt-Anchor" href="#1-顺序查找"></a> 1 顺序查找</h1><p><span style="color:blue;font-size:18px">顺序查找：</span>又称为线性查找，主要用于在<mark>线性表中</mark>进行查找</p><p>静态查找表用顺序存储结构表示时，顺序查找的查找过程为：从表中的最后一个数据元素开始，逐个同记录的关键字做比较，如果匹配成功，则查找成功；反之，如果直到表中第一个关键字查找完也没有成功匹配，则查找失败。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;#define KeyType int#define MAX_SIZE 10&#x2F;&#x2F; 元素类型结构体struct ElemType &#123;  KeyType keyword;&#125;;&#x2F;&#x2F; 顺序表结构体struct SSTable &#123;  ElemType *elem;  &#x2F;&#x2F; 顺序表中的数据量  int length;&#125;;SSTable * initSSTable() &#123;  SSTable *table &#x3D; new SSTable();  table-&gt;length &#x3D; MAX_SIZE;  table-&gt;elem &#x3D; (ElemType *)malloc(MAX_SIZE*sizeof(ElemType));  for(int i &#x3D; 0; i &lt; MAX_SIZE; i++) &#123;    table-&gt;elem[i].keyword &#x3D; (32+i*5)&#x2F;4;  &#125;  return table;&#125;int Search_Seq(SSTable *table, KeyType key) &#123;  for(int i &#x3D; 0; i &lt; table-&gt;length; i++) &#123;    printf(&quot;当前查找的顺序表key为%d\n&quot;,table-&gt;elem[i].keyword);    if(key &#x3D;&#x3D; table-&gt;elem[i].keyword)&#123;      printf(&quot;key为%d的下标是%d\n&quot;,key,i);      return i;    &#125;    &#x2F;&#x2F; 当为有序的查找表时，可以加上这两行代码，减少查找失败时，耗费的查找次数    if(key &lt; table-&gt;elem[i].keyword)      break;  &#125;  cout &lt;&lt; &quot;没有找到key为&quot;&lt;&lt;key&lt;&lt;&quot;的元素&quot; &lt;&lt; endl;  return -1;&#125;void display(SSTable *table) &#123;  for(int i &#x3D; 0; i &lt; table-&gt;length; i++) &#123;    printf(&quot;下标：%d——key：%d\n&quot;,i,table-&gt;elem[i].keyword);  &#125;&#125;int main() &#123;  SSTable *s &#x3D; initSSTable();  cout &lt;&lt; &quot;打印表：&quot;&lt;&lt; endl;  display(s);  Search_Seq(s, 14);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><mark>当查找表无序时</mark></p><p>一共n个元素，从头找。</p><p>要找的正好在第一个：一次比较</p><p>要找的正好在第二个：二次比较</p><p>……</p><p>要找的正好在第n个：n次比较</p><p>一共需要比较：(1+n)n/2</p><p>假设查找每个位置的概率相等，都为1/n</p><p>ASL<sub>成功</sub> =  1/n * (1+n)n/2 = (n+1)/2</p><p>ASL<sub>失败</sub> = n（倘若有哨兵，则n+1次）</p><p><mark>有序的查找表</mark></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/判定树.png" alt="判定树"></blockquote><h1 id="2-折半查找"><a class="markdownIt-Anchor" href="#2-折半查找"></a> 2 折半查找</h1><p>类比1-100猜数字，每次猜中间，给你“大了”，“小了”快速缩小答案范围，最多猜log<sub>2</sub>n + 1次即可得到答案</p><p><span style="color:blue;font-size:18px">折半查找：</span>又称二分查找，仅适用于<mark>有序的顺序表</mark></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int Search_Seq(SSTable *table, KeyType key) &#123;  int low &#x3D; 0, high &#x3D; table-&gt;length-1;  while(low &lt;&#x3D; high) &#123;    int mid &#x3D; (low + high) &gt;&gt; 1;    printf(&quot;当前查找的顺序表key为%d\n&quot;,table-&gt;elem[mid].keyword);    if(table-&gt;elem[mid].keyword &#x3D;&#x3D; key) &#123;      printf(&quot;key为%d的下标是%d\n&quot;,key,mid);      return mid;     &#125; else if (table-&gt;elem[mid].keyword &gt; key) &#123;      high &#x3D; mid -1;    &#125; else &#123;      low &#x3D; mid + 1;    &#125;  &#125;  cout &lt;&lt; &quot;没有找到key为&quot;&lt;&lt;key&lt;&lt;&quot;的元素&quot; &lt;&lt; endl;  return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/折半查找判定树.png" alt="折半查找判定树ASL成功"><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/折半查找判定树02.png" alt="折半查找判定树ASL失败"><h1 id="3-分块查找"><a class="markdownIt-Anchor" href="#3-分块查找"></a> 3 分块查找</h1><p><span style="color:blue;font-size:18px">分块查找：</span>又称索引顺序查找，汲取顺序查找和折半查找各自的优点，既有动态结构，又适合快速查找</p><blockquote><p>将查找表分为若干子块，块内的元素可以无序，但块间是有序的，即对于所有块有第i块的最大关键字小于第i+1块的所记录的关键字</p></blockquote><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/分块查找.png" alt="分块查找"><p>上图中，查找表中共 18 个查找关键字，将其平均分为 3 个子表，对每个子表建立一个索引，索引中包含中两部分内容：该子表部分中最大的关键字以及第一个关键字在总表中的位置，即该子表的起始位置。</p><blockquote><p>建立的索引表要求按照关键字进行升序排序，查找表要么整体有序，要么分块有序。</p></blockquote><p>分块有序指的是第二个子表中所有关键字都要大于第一个子表中的最大关键字，第三个子表的所有关键字都要大于第二个子表中的最大关键字，依次类推。</p><p>块（子表）中各关键字的具体顺序，根据各自可能会被查找到的概率而定。如果各关键字被查找到的概率是相等的，那么可以随机存放；否则可按照被查找概率进行降序排序，以提高算法运行效率。</p><p><strong>【查找过程】</strong></p><p>以上图中的查找表为例，假设要查找关键字 38 的具体位置。首先将 38 依次和索引表中各最大关键字进行比较，因为 22 &lt; 38 &lt; 48，所以可以确定 38 如果存在，肯定在第二个子表中。</p><p>由于索引表中显示第二子表的起始位置在查找表的第 7 的位置上，所以从该位置开始进行顺序查找，一直查找到该子表最后一个关键字（一般将查找表进行等分，具体子表个数根据实际情况而定）。结果在第 10 的位置上确定该关键字即为所找。</p><blockquote><p>提示：在第一步确定块（子表）时，由于索引表中按照关键字有序，所有可以采用折半查找。而在第二步中，由于各子表中关键字没有严格要求有序，所以只能采用顺序查找的方式。</p></blockquote><p><strong>【ASL】</strong></p><p>设长度为n个查找表被均分层b块，每块s条记录</p><ul><li><p>索引表和块内都是顺序查找</p><blockquote><p>ASL<sub>成功</sub> = (b+1)/2 + (s+1)/2 = (s<sup>2</sup>+2s+n)/2</p></blockquote></li><li><p>索引表用二分查找，块内用顺序查找</p><blockquote><p>ALS<sub>成功</sub> = log<sub>2</sub>b + 1  + (s+1)/2</p></blockquote></li></ul><p>分块查找算法的运行效率受两部分影响：查找块的操作和块内查找的操作。查找块的操作可以采用顺序查找，也可以采用折半查找（更优）；块内查找的操作采用顺序查找的方式。相比于折半查找，分块查找时间效率上更低一些；相比于顺序查找，由于在子表中进行，比较的子表个数会不同程度的减少，所有分块查找算法会更优。</p><blockquote><p>总体来说，分块查找算法的效率介于顺序查找和折半查找之间。</p></blockquote><h1 id="4-bb-树"><a class="markdownIt-Anchor" href="#4-bb-树"></a> 4 B(B-)树</h1><p>B-树，有时又写为B_树（其中的“-”或者“_”只是连字符，并不读作“B减树”），又称多路平衡查找树，一颗 m 阶（所有结点的孩子结点数的最大值称为B树的阶）的 B-树，或者本身是空树，否则必须满足以下特性：</p><ul><li>树中每个结点至多有 m 棵子树（即最多含有m-1个关键字）；</li><li>若根结点不是叶子结点，则至少有两棵子树；</li><li>除根之外的所有非终端结点至少有⌈m/2⌉棵子树；</li><li>所有的非终端结点中包含下列信息数据：（n，A0，K1，A1，K2，A2，…，Kn，An）；</li></ul><p>n 表示结点中包含的关键字的个数，取值范围是：<code>⌈m/2⌉-1≤ n ≤m-1</code>。Ki （i 从 1 到 n）为关键字，且 Ki &lt; Ki+1 ；Ai 代表指向子树根结点的指针，且指针 Ai-1 所指的子树中所有结点的关键字都小于 Ki，An 所指子树中所有的结点的关键字都大于 Kn。</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/B%E6%A0%91%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.png" alt="图1 B树结点结构" /></p><p>如图 1 所示，当前结点中有 4 个关键字，之间的关系为：K1&lt;K2&lt;k3&lt;K4。同时对于 A0 指针指向的子树中的所有关键字来说，其值都要比 K1 小；而 A1 指向的子树中的所有的关键字的值，都比 K1 大，但是都要比 K2 小。</p><blockquote><p>所有的叶子结点都出现在同一层次，实际上这些结点都不存在，指向这些结点的指针都为 NULL；</p></blockquote><p>例如图 2 所示就是一棵 4 阶的 B-树，这棵树的深度为 4 ：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/%E6%B7%B1%E5%BA%A6%E4%B8%BA4%E7%9A%84B%E6%A0%91.png" alt="图2 深度为4的B-树" /></p><p>在使用 B-树进行查找操作时，例如在如图 2 所示的 B-树中查找关键字 47 的过程为：</p><ol><li>从整棵树的根结点开始，由于根结点只有一个关键字 35，且 35 &lt; 47 ，所以如果 47 存在于这棵树中，肯定位于 A1 指针指向的右子树中；</li><li>然后顺着指针找到存有关键字 43 和 78 的结点，由于 43 &lt; 47 &lt; 78，所以如果 47 存在，肯定位于 A1 所指的子树中；</li><li>然后找到存有 47、53 和 64 三个关键字的结点，最终找到 47 ，查找操作结束；</li></ol><blockquote><p>以图 2 中的 B-树为例，若查找到深度为 3 的结点还没结束，则会进入叶子结点，但是由于叶子结点本身不存储任何信息，全部为 NULL，所以查找失败。</p></blockquote><blockquote><p>n个关键字，阶数为m，高度为h的B树</p><p>log<sub>m</sub>(n+1) ≤ h ≤ log<sub>⌈m/2⌉</sub>((n+1)/2) + 1</p></blockquote><blockquote><p>在具体实现上，在B树中找结点，是在<mark>磁盘</mark>上查找，在结点中找关键字，是在<mark>内存</mark>中进行</p></blockquote><h2 id="41-b-树中插入关键字构建b-树"><a class="markdownIt-Anchor" href="#41-b-树中插入关键字构建b-树"></a> 4.1 B-树中插入关键字（构建B-树）</h2><p>B-树也是从空树开始，通过不断地插入新的数据元素构建的。但是 B-树构建的过程同二叉排序树和平衡二叉树不同，B-树在插入新的数据元素时并不是每次都向树中插入新的结点。</p><p>因为对于 m 阶的 B-树来说，在定义中规定所有的非终端结点（终端结点即叶子结点，其关键字个数为 0）中包含关键字的个数的范围是<code>[⌈m/2⌉-1,m-1]</code>，所以在插入新的数据元素时，<mark>首先向最底层的某个非终端结点中添加</mark>，如果该结点中的关键字个数没有超过 m-1，则直接插入成功，否则还需要继续对该结点进行处理。</p><p>假设现在图 3 的基础上插入 4 个关键字 30、26、85 和 7：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/3%E9%98%B6B%E6%A0%91.png" alt="图3 3阶B-树（深度为4，省略了叶子结点）" /></p><p>插入关键字 30 ：从根结点开始，由于 30 &lt; 45，所以要插入到以 b 结点为根结点的子树中，再由于 24 &lt; 30，插入到以 d 结点为根结点的子树中，由于 d 结点中的关键字个数小于 m-1=2，所以可以将关键字 30 直接插入到 d 结点中。结果如下图所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/3%E9%98%B6B%E6%A0%91-%E6%8F%92%E5%85%A530%E5%90%8E.png" alt="图4 插入关键字30后的B-树" /></p><p>插入关键字 26：从根结点开始，经过逐个比较，最终判定 26 还是插入到 d 结点中，但是由于 d 结点中关键字的个数超过了 2，所以需要做如下操作：</p><ul><li>关键字 37 及其左右两个指针存储到新的结点中，假设为 d’ 结点；</li><li>关键字 30 存储到其双亲结点 b 中，同时设置关键字 30 右侧的指针指向 d’；</li></ul><p>经过以上操作后，插入 26 后的B-树为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/3%E9%98%B6B%E6%A0%91-%E6%8F%92%E5%85%A526%E5%90%8E.png" alt="图5 插入关键字26后的B-树" /></p><p>插入关键字 85：从根结点开始，经过逐个比较，最终判定插入到 g 结点中，同样需要对 g 做分裂操作：</p><ul><li>关键字 85 及其左右两个指针存储到新的结点中，假设为 g’ 结点；</li><li>关键字 70 存储到其双亲结点 e 中，同时设置 70 的右侧指针指向 g’ ；</li></ul><p>经过以上操作后，插入 85 后的结果图为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/3%E9%98%B6B%E6%A0%91-%E6%8F%92%E5%85%A585%E5%90%8E.png" alt="图6 插入85的效果图" /></p><p>图 6 中，由于关键字 70 调整到其双亲结点中，使得其 e 结点中的关键字个数超过了 2，所以还需进一步调整：</p><ul><li>将 90 及其左右指针存储到一个新的结点中，假设为 e’ 结点；</li><li>关键字 70 存储到其双亲结点 a 中，同时其右侧指针指向 e’ ;</li></ul><p>最终插入关键字 85 后的 B-树为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/3%E9%98%B6B%E6%A0%91-%E6%8F%92%E5%85%A585%E5%90%8E%E5%90%8E.png" alt="图7 插关键字85后的B-树" /></p><p>插入关键字 7：从根结点开始依次做判断，最终判定在 c 结点中添加，添加后发现 c 结点需要分裂，分裂规则同上面的方式一样，结果导致关键字 7 存储到其双亲结点 b 中；后 b 结点分裂，关键字 24 存储到结点 a 中；结点 a 同样需要做分裂操作，最终 B-树为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/3%E9%98%B6B%E6%A0%91-%E6%8F%92%E5%85%A57%E5%90%8E.png" alt="图8 插入关键字7后的B-树" /></p><p>通过上边的例子，可以总结出一下结论：在构建 B-树的过程中，假设 p 结点中已经有 m-1 个关键字，当再插入一个关键字之后，此结点分裂为两个结点，如下图所示：</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/B-树构成过程中的分裂.png" alt="图9 B-树构成过程中的“分裂”"><blockquote><p>提示：如图 9所示，结点分裂为两个结点的同时，还分裂出来一个关键字 K⌈m/2⌉，存储到其双亲结点中。</p></blockquote><h2 id="42-b-树中删除关键字"><a class="markdownIt-Anchor" href="#42-b-树中删除关键字"></a> 4.2 B-树中删除关键字</h2><p>在 B-树种删除关键字时，首先前提是找到该关键字所在结点，在做删除操作的时候分为两种情况，一种情况是删除结点为 B-树的非终端结点（不处在最后一层）；另一种情况是删除结点为 B-树最后一层的非终端结点。</p><p>1）直接删除</p><p>倘若被删除的关键字所在的结点关键字总数＞⌈m/2⌉ - 1，表明删除后仍然满足B树定义，可以直接删除</p><p>2）兄弟够借</p><p>倘若将该关键字删除后，其所在结点的关键字数量不符合B树的定义（关键字数量至少是⌈m/2⌉-1），那么需要从兄弟结点借关键字。</p><ul><li>从左兄弟借。选择被删除关键字结点与左兄弟结点中间夹着的双亲结点关键字A，将A挪动到被删除结点中，并用左兄弟结点中最大的关键字代替A。详情见下文具体操作。</li><li>从右兄弟借。选择被删除关键字结点与右兄弟结点中间夹着的双亲结点关键字A，将A挪动到被删除结点中，并用左兄弟结点中最小的关键字代替A。详情见下文具体操作。</li></ul><p>3）兄弟不够借</p><p>例如图 3 来说，关键字 24、45、53、90属于不处在最后一层的非终端结点，关键字 3、12、37等同属于最后一层的非终端结点。</p><p>如果该结点为非终端结点且不处在最后一层，假设用 Ki 表示，则只需要找到指针 Ai 所指子树中最小的一个关键字代替 Ki，同时将该最小的关键字删除即可。</p><p>例如图 3 中，如果要删除关键字 45 ，只需要使用关键字 50 代替 45 ，同时删除 f 结点中的 50 即可。</p><p>如果该结点为最后一层的非终端结点，有下列 3 种可能：</p><ul><li>被删关键字所在结点中的关键字数目不小于<code>⌈m/2⌉</code>，则只需从该结点删除该关键字 Ki 以及相应的指针 Ai 。</li></ul><p>例如，在图 3 中，删除关键字 12 ，只需要删除该关键字 12以及右侧指向 NULL 指针即可。</p><ul><li>被删关键字所在结点中的关键字数目等于<code>⌈m/2⌉-1</code>，而与该结点相邻的右兄弟结点（或者左兄弟）结点中的关键字数目大于<code>⌈m/2⌉-1</code>，只需将该兄弟结点中的最小（或者最大）的关键字上移到双亲结点中，然后将双亲结点中小于（或者大于）且紧靠该上移关键字的关键字移动到被删关键字所在的结点中。</li></ul><p>例如在图 3 中删除关键字 50，其右兄弟结点 g 中的关键字大于2，所以需要将结点 g 中最小的关键字 61 上移到其双亲结点 e 中（由此 e 中结点有：53，61，90），然后将小于 61 且紧靠 61 的关键字 53 下移到结点 f 中，最终删除后的 B-树如图 10 所示。</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/B%E6%A0%91%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9-50%E5%90%8E.png" alt="图10 删除结点50后的B-树" /></p><ul><li>被删除关键字所在的结点如果和其相邻的兄弟结点中的关键字数目都正好等于⌈m/2⌉-1，假设其有右兄弟结点，且其右兄弟结点是由双亲结点中的指针 Ai 所指，则需要在删除该关键字的同时，将剩余的关键字和指针连同双亲结点中的 Ki 一起合并到右兄弟结点中。</li></ul><p>例如，在图 10 中 B-树中删除关键字 53，由于其有右兄弟，且右兄弟结点中只有 1 个关键字。在删除关键字 53 后，结点 f 中只剩指向叶子结点的空指针，连同双亲结点中的 61（因为 61 右侧指针指向的兄弟结点 g）一同合并到结点 g 中，最终删除 53 后的 B-树为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/B%E6%A0%91%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9-53%E5%90%8E.png" alt="图11 删除结点53后的B-树" /></p><p>在合并的同时，由于从双亲结点中删除一个关键字，若导致双亲结点中关键字数目小于<code>⌈m/2⌉-1</code>，则继续按照该规律进行合并。例如在图 11 中 B-树的情况下删除关键字 12 时，结点 c 中只有一个关键字，然后做删除关键字 37 的操作。此时在删除关键字 37 的同时，结点 d 中的剩余信息（空指针）同双亲结点中的关键字 24 一同合并到结点 c 中，效果图为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/B%E6%A0%91%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9-37%E5%90%8E.png" alt="图12 删除结点 37后的效果图" /></p><p>由于结点 b 中一个关键字也没有，所以破坏了B-树的结构，继续整合。在删除结点 b 的同时，由于 b 中仅剩指向结点 c 的指针，所以连同其双亲结点中的 45 一同合并到其兄弟结点 e 中，最终的B-树为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE/B%E6%A0%91%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9-37%E5%90%8E.png" alt="图13 删除37后的B-树" /></p><h1 id="5-b树"><a class="markdownIt-Anchor" href="#5-b树"></a> 5 B+树</h1><p>一棵m阶B+树满足如下特性：</p><ul><li>每个分支结点最多有m棵子树（子结点）</li><li>若根节点不是终端结点，则至少有两棵子树</li><li>除根节点外的所有非叶结点至少有⌈m/2⌉棵子树，<mark>子树和关键字个数相等</mark></li><li>所有叶结点包含全部关键字及指向响应记录的指针，叶结点中将关键字按大小顺序排列，并且相邻结点按大小顺序连接起来</li><li>所有分支结点（可视为索引的索引）中仅包含它的各个子结点（下一级索引）中关键字的最大值及指向其子结点的指针</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/B+树.png" alt="B+树"><table><thead><tr><th>B树</th><th>B+树</th></tr></thead><tbody><tr><td>具有n个关键字的结点含有n+1棵子树</td><td>n个关键字的结点有n棵子树</td></tr><tr><td></td><td>叶结点包含信息，所有非叶结点仅起到索引的作用。非叶结点中的每个索引项只含有对应子树的最大关键字和指向该子树关键字的指针，不含有该关键字对应记录的存储地址</td></tr><tr><td>叶结点包含的关键字和其他结点包含的关键字是不重复的</td><td>叶结点包含全部的关键字，即在非叶结点中出现的关键字也会出现在叶结点中</td></tr></tbody></table><h1 id="6-散列表"><a class="markdownIt-Anchor" href="#6-散列表"></a> 6 散列表</h1><p>散列函数：把查找表中的关键字映射成该关键字对应的地址的函数</p><p>散列表：根据关键字而直接进行访问的数据结构，它建立了关键字与存储地址之间的一种直接映射关系</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表例子.png" alt="散列表"><h2 id="61-散列函数的构造"><a class="markdownIt-Anchor" href="#61-散列函数的构造"></a> 6.1 散列函数的构造</h2><p><code>Hash(key) = Addr</code></p><p>1）散列函数的定义域必须包含全部需要存储的关键字，而值域的 范围依赖于散列表的大小或地址范围</p><p>2）散列函数计算出来的地址应该能等概率、均匀分布在整个地址空间中，从而减少冲突的发生</p><p>3）散列函数应尽量简单，能够在较短的时间内计算出任一关键字对应的散列地址</p><h3 id="611-直接定值法"><a class="markdownIt-Anchor" href="#611-直接定值法"></a> 6.1.1 直接定值法</h3><p>Hash(key) = a*key + b</p><blockquote><p>方法简单，不会产生冲突，但是若关键字分布不连续，则会浪费空间</p></blockquote><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表-直接定值法.png" alt="散列表-直接定值法"><h3 id="612-除留取余法"><a class="markdownIt-Anchor" href="#612-除留取余法"></a> 6.1.2 除留取余法</h3><p>Hash(key) = key % p</p><blockquote><p>选好p是关键，可以减少冲突的可能</p></blockquote><p><strong>【p的选择】</strong></p><p>假定散列表表长为m，取一个不大于m但最接近或等于m的质数p</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表-除留取余法.png" alt="散列表-除留取余法"><h3 id="613-数字分析法"><a class="markdownIt-Anchor" href="#613-数字分析法"></a> 6.1.3 数字分析法</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表-数字分析法.png" alt="散列表-数字分析法"><h3 id="614-平方取中法"><a class="markdownIt-Anchor" href="#614-平方取中法"></a> 6.1.4 平方取中法</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表-平方取中法.png" alt="散列表-平方取中法"><h3 id="615-折叠法"><a class="markdownIt-Anchor" href="#615-折叠法"></a> 6.1.5 折叠法</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表-折叠法.png" alt="散列表-折叠法"><h2 id="62-冲突处理"><a class="markdownIt-Anchor" href="#62-冲突处理"></a> 6.2 冲突处理</h2><h3 id="621-开放定址法"><a class="markdownIt-Anchor" href="#621-开放定址法"></a> 6.2.1 开放定址法</h3><p><span style="color:blue;font-size:18px">开放定址法：</span>是指可以存放新表项的空闲地址既向它的同义词表项开放，又向它的非同义词表项开放。</p><p>H<sub>i</sub> = (H(key) + d<sub>i</sub>) % m，i = 0,1,2……,k(k ≤ m-1)，m为散列表表长（4k+3），di为增量</p><p><strong>【计算d<sub>i</sub>】</strong></p><ul><li><p>线性探测法</p><p>d<sub>i</sub> = 0,1,2,3,4……,m-1</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表-线性探测法.png" alt="散列表-线性探测法"><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表-堆积现象.png" alt="散列表-堆积现象"></li><li><p>平方探测法</p><p>d<sub>i</sub> = 0<sup>2</sup>，1<sup>2</sup>，-1<sup>2</sup>，2<sup>2</sup>，-2<sup>2</sup>……，k<sup>2</sup>，-k<sup>2</sup>（k≤m/2）</p><p>可以避免堆积问题，缺点是不能探测到散列表上的所有单元</p></li><li><p>再散列法</p><p>d<sub>i</sub> = i * Hash2(key)</p></li><li><p>伪随机序列法</p><p>d<sub>i</sub> = 伪随机序列</p></li></ul><blockquote><p><mark>在开放定址法不能随便删除某个元素</mark></p></blockquote><h3 id="622-拉链法"><a class="markdownIt-Anchor" href="#622-拉链法"></a> 6.2.2 拉链法</h3><p>把所有同义词存放在一个线性表中，这个线性链表由地址唯一标识，即散列表中每个单元存放该链表的表头指针</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/查找/散列表-拉链法.png" alt="散列表-拉链法"><blockquote><p><mark>拉链法适用于经常进行插入和删除的情况</mark></p></blockquote><h2 id="63-散列表查找效率"><a class="markdownIt-Anchor" href="#63-散列表查找效率"></a> 6.3 散列表查找效率</h2><p>查找效率和散列函数、处理冲突的方法和填装因子相关。</p><p>填装因子一般记为α = 表中记录n数/散列表长度m，表示表的装满程度</p>]]></content>
    
    
    <summary type="html">数据结构,查找</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="blog.silverbeats.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="blog.silverbeats.cn/%E5%9B%BE/"/>
    <id>blog.silverbeats.cn/%E5%9B%BE/</id>
    <published>2020-10-25T12:49:47.000Z</published>
    <updated>2020-10-30T02:06:21.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-逻辑结构"><a class="markdownIt-Anchor" href="#1-逻辑结构"></a> 1 逻辑结构</h1><h2 id="11-图的定义"><a class="markdownIt-Anchor" href="#11-图的定义"></a> 1.1 图的定义</h2><p>图G由顶点集V和边集E组成，记为G=（V，E），其中V(G)表示图G中顶点的<mark>有限非空集</mark>，E(G)表示图G中顶点之间的关系（边）集合。|V|表示图G中顶点的个数，也称图G的阶；|E|表示图G中边的条数</p><img alt="图" data-src='http://resource.silverbeats.cn/static/images/算法/数据结构/图/图.png'><h2 id="12-相关概念"><a class="markdownIt-Anchor" href="#12-相关概念"></a> 1.2 相关概念</h2><table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>无向图&amp;有向图</td><td>图的边是否有方向。无向图的边没有方向，用括号表示如：(v,w)<br>有向图的边区分起始点和终止点，有向图的边又称弧，用尖括号表示，如&lt;v,w&gt;</td></tr><tr><td>简单图</td><td>无重复边，不存在结点到自身的边</td></tr><tr><td>多重图</td><td>非简单图</td></tr><tr><td>无向完全图</td><td>任意两个顶点之间都存在边。n个顶点有n(n-1)/2条边</td></tr><tr><td>有向完全图</td><td>任意两个顶点之间都存在方向相反的弧，n个顶点有n(n-1)条弧</td></tr><tr><td>子图</td><td>设有两个图G=（V，E），G<sup>’’</sup>=（V<sup>’’</sup>，E<sup>’’</sup>），若V<sup>’'</sup>是V的子集，E<sup>’'</sup>是E的子集，则成G<sup>’'</sup>是G的子图</td></tr><tr><td>连通</td><td>针对无向图。若从顶点v到顶点w有路径存在，称v和w是连通的</td></tr><tr><td>连通图</td><td>任意两个结点之间都是连通的。n个顶点的连通图最少有n-1条边。</td></tr><tr><td>强连通</td><td>针对有向图。顶点v到w，以及顶点w到v都有路径，则称v与w强连通。</td></tr><tr><td>强连通图</td><td>任意两个结点之间都是强连通的。n个顶点的强连通图最少有n条边</td></tr><tr><td>连通分量&amp;&amp;强连通分量</td><td>极大（强）连通子图。对于G的一个（强）连通子图G<sup>’</sup>，如果不存在G的另一个（强）连通子图G<sup>’‘</sup>，使得G<sup>’</sup>⊂G<sup>’’</sup>，则称G<sup>’</sup>为G的（强）连通分量。<br><mark>（强）连通图，（强）连通分量与原图一致，非（强）连通图，则有多个（强）连通分量</mark></td></tr><tr><td>极小连通子图</td><td>满足连通图的情况下，且包含的边最少的子图</td></tr><tr><td>生成树</td><td>连通图，且包含全部顶点的一个极小连通子图。<mark>不唯一，n个顶点图的生成树有n-1条边</mark></td></tr><tr><td>生成森林</td><td>非连通图所有连通分量的生成树组成生成森林</td></tr><tr><td>顶底的度</td><td>①无向图中，某顶点的度即为和此顶点相连边的数目。<mark>n个顶点，e条边的无向图中的度总数为2e</mark><br>②有向图中，顶点的度 = 入度 + 出度，<mark>n个顶点，e条边的有向图中出度 = 入度 = e</mark></td></tr><tr><td>网</td><td>给图中的每条边增加一个权重</td></tr><tr><td>稠密图&amp;&amp;稀疏图</td><td>稠不稠密，看边多不多。|E| &lt; |V|log|V|</td></tr><tr><td>有向树</td><td>一个顶点的入度为0，其余顶点的入度为1的有向图</td></tr><tr><td>路径</td><td>图中顶点v到w的顶点序列，序列中顶点不重复的路径称为简单路径</td></tr><tr><td>路径长度</td><td>路径上边的 数目，若该路径最短则称距离</td></tr><tr><td>回路</td><td>第一个顶点和最后一个顶点相同的路径</td></tr><tr><td></td><td>倘若回路中除起点终点之外的所有点不重复，则称简单回路</td></tr></tbody></table><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E8%BF%9E%E9%80%9A%E5%AD%90%E5%9B%BE.png" alt="连通子图" /></p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9E%81%E5%A4%A7%E8%BF%9E%E9%80%9A%E5%AD%90%E5%9B%BE.png" alt="极大连通子图" /></p><h1 id="2-存储结构及操作"><a class="markdownIt-Anchor" href="#2-存储结构及操作"></a> 2 存储结构及操作</h1><h2 id="21-邻接矩阵"><a class="markdownIt-Anchor" href="#21-邻接矩阵"></a> 2.1 邻接矩阵</h2><p>存储图，无非是存储点集（一位数组存储）和边集（二维数组存储）。</p><img alt="邻接矩阵-有向图" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-有向图.png"><img alt="邻接矩阵-无向图" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-无向图.png"><img alt="邻接矩阵-网" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-网.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxVertexNum 100typedef char VertexType;typedef in EdgeType;typedef struct &#123;  VertexType Vex[MaxVertexNum];  EdgeType Edge[MaxVertexNum][MaxVertexNum];  int vexnum,arcnum;&#125;MGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【性质】</strong></p><ul><li><p>邻接矩阵的空间复杂度O(n<sup>2</sup>)</p></li><li><p>无向图的邻接矩阵为对称矩阵</p></li><li><p>无向图中第i行（或第j列）非0元素（非正无穷）的个数为第i个顶点的度</p></li><li><p>有向图中第i行（或第j列）非0元素（非正无穷）的个数为第i个顶点的出度（入度）</p></li><li><p>设图G的邻接矩阵为A，矩阵A<sup>n</sup>的含义</p><img alt="邻接矩阵-矩阵乘积" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-矩阵乘积.png"><img alt="邻接矩阵-矩阵乘积2" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-矩阵乘积2.png"></li></ul><h2 id="22-邻接表法"><a class="markdownIt-Anchor" href="#22-邻接表法"></a> 2.2 邻接表法</h2><p>为每个顶点建立一个单链表存放与它相邻的边。</p><p><strong>顶点表</strong></p><p>采用<mark>顺序存储</mark>，每个数组元素存放顶点的数据和边表的头指针</p><p><strong>边表</strong></p><p>采用<mark>链式存储</mark>，单链表中存放与一个顶点相邻的所有边，一个链表结点表示一条从该顶点到链表结点顶点的边</p><img alt="邻接表法-结点结构" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接表法-结点结构.png"><img alt="邻接表法-有向图" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接表法-有向图.png"><img alt='邻接表法-无向图' data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接表法-无向图.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxVertexNum 100&#x2F;&#x2F; 边表结点typedef struct ArcNode&#123;  int adjvex;  struct ArcNode *next;  &#x2F;&#x2F; InfoType info; 边的权重&#125;ArcNode;&#x2F;&#x2F; 顶点表typedef struct VNode&#123;  VertexType data;  ArcNode *first;&#125;VNode,AdjList[MaxVertexNum];&#x2F;&#x2F; 邻接表typedef struct &#123;  AdjList vetices;  int vexnum,arcnum;&#125;ALGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【性质】</strong></p><ul><li><p>若G为无向图，存储空间为O（|V| + 2|E|）</p><p>若G为有向图，存储空间为O（|V| + |E|）</p></li><li><p>邻接表适合存储稀疏图</p></li><li><p>若G为无向图，则结点的度为该结点边表的长度</p><p>若G为有向图，则结点的出度为该结点边表的长度，计算入度则要遍历整个邻接表</p></li><li><p>邻接表不唯一，边表结点的顺序根据算法和输入的不同可能会不同</p></li><li><p><mark>邻接矩阵和邻接表比较</mark></p><img alt="邻接表VS邻接矩阵" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接表VS邻接矩阵.png"></li></ul><h2 id="23-邻接多重表"><a class="markdownIt-Anchor" href="#23-邻接多重表"></a> 2.3 邻接多重表</h2><p><mark>无向图</mark>的一种链式存储</p><img alt="邻接多重表" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接多重表.png"><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>存放数据</td></tr><tr><td>firstedge</td><td>边表单链表头指针</td></tr><tr><td>ivex</td><td>该边的第一个端点</td></tr><tr><td>ilink</td><td>与第一个端点相邻的下一个边表结点指针</td></tr><tr><td>jvex</td><td>第二点端点</td></tr><tr><td>jlink</td><td>与第二个端点相邻的下一个边表结点指针</td></tr><tr><td>info</td><td>非必须</td></tr><tr><td>mark</td><td>非必须</td></tr></tbody></table><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接多重表-步骤.png" alt="邻接多重表-步骤"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxVertexNum 100&#x2F;&#x2F; 边表typedef struct ArcNode&#123;  int ivex,jvex;  struct ArcNode *ilink,*jlink;  &#x2F;&#x2F; infoType info;  &#x2F;&#x2F; bool mark;&#125;ArchNode;&#x2F;&#x2F; 顶点表typedef struct VNode &#123;  VertexType data;  ArcNode *firstedge;&#125;VNode;&#x2F;&#x2F; 邻接多重表typedef struct &#123;  VNode adjmulist[MaxVertexNum];  int vexnum, arcnum;&#125;AMLGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-十字链表"><a class="markdownIt-Anchor" href="#24-十字链表"></a> 2.4 十字链表</h2><p><mark>有向图</mark>的一种<mark>链式存储</mark>结构，邻接表容易找到顶点的出度，但是不容易找该顶点的入度，因此有十字链表来解决这个问题。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/十字链表数据结构.png" alt="十字链表数据结构"><table><thead><tr><th></th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>数据域。存放数据。</td></tr><tr><td>firstin</td><td>入边单链表第一个结点的头指针</td></tr><tr><td>firstout</td><td>出边单链表第一个结点的头指针</td></tr><tr><td>tailvex</td><td>尾域。存放该弧，弧尾的结点指针</td></tr><tr><td>headvex</td><td>头域。存放该弧，弧头的结点指针</td></tr><tr><td>hlink</td><td>指针域。下一个弧头相同的结点指针</td></tr><tr><td>tlink</td><td>指针域。下一个弧尾相同的结点指针</td></tr><tr><td>info</td><td>存放该边数据，比如权重。</td></tr></tbody></table><img alt="十字链表流程" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/十字链表.png"><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E8%AF%A6%E8%A7%A3.png" alt="十字链表详解" /></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxVertexNum 100&#x2F;&#x2F; 边表结点typedef struct ArcNode&#123;  int tailvex,headvex;  struct ArcNode *hlink, *tlink;  &#x2F;&#x2F; InfoType info; 边的权重&#125;ArcNode;&#x2F;&#x2F; 顶点表typedef struct VNode&#123;  VertexType data;  ArcNode *firstin, *firstout;&#125;VNode,AdjList[MaxVertexNum];&#x2F;&#x2F; 十字接表typedef struct &#123;  VNode xlist[MaxVertexNum];  int vexnum,arcnum;&#125;GLGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-十字链表vs邻接多重表"><a class="markdownIt-Anchor" href="#25-十字链表vs邻接多重表"></a> 2.5 十字链表VS邻接多重表</h2><p>十字链表：解决邻接表存储有向图时，得入度难的问题</p><p>邻接多重表：解决邻接表存无向图时，重复存储边的问题</p><h1 id="3-图的遍历"><a class="markdownIt-Anchor" href="#3-图的遍历"></a> 3 图的遍历</h1><p>从图中某一顶点出发，按照某种搜索方法沿着图中的边对图中的所有顶点访问一次且仅访问一次</p><h2 id="31-广度优先遍历"><a class="markdownIt-Anchor" href="#31-广度优先遍历"></a> 3.1 广度优先遍历</h2><p>空间复杂度：O(|V|)</p><p>时间复杂度：</p><pre><code>- 邻接矩阵：O(|V|^2^)- 邻接表法：O(|V| + |E|)</code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool visited[MAX_TREE_SIZE];void BFSTraverse(Graph G) &#123;  for(int i &#x3D; 0; i &lt; G.vexnum; i++) &#123;    visited[i] &#x3D; false;  &#125;  InitQueue(Q);  for(int i; i &lt; G.vexnum; i++) &#123;  if(!visited[i]) BFS(G,i);  &#125;&#125;void BFS(Graph G, int v) &#123;  visit(v);  visited[v] &#x3D; true;  EnQueue(Q,v);  while(!isEmpty(Q)) &#123;    DeQueue(Q,v);    for(w &#x3D; FirstNeighbor(G,v);w&gt;&#x3D;0;w &#x3D; NextNeighbor(G,v,w)) &#123;      if(!visited[w])&#123;        visit[w];        visited[w] &#x3D; true;        EnQueue(Q,w);      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【<mark>无权图</mark>单源最短路径问题】</strong></p><p>定义从顶点u到顶点v经过边数最少的路径称为最短路径d(u,v)。如若u到v没有路径，则d(u,v) = ∞</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void BFS_MIN_Distance(Graph G, int u) &#123;  &#x2F;&#x2F; d为距离数组，数组长度为顶点的数量，每个位置初始化置为最大值  for(int i &#x3D; 0; i &lt; G.vexnum; i++)    d[i] &#x3D; MAX;  &#x2F;&#x2F; u结点访问标识位置为true  visited[u] &#x3D; true;  d[u] &#x3D; 0;  &#x2F;&#x2F; u结点入队列  EnQueue(Q,u);  &#x2F;&#x2F; 队列不为空，至少有u结点  while(!isEmpty(Q)) &#123;    &#x2F;&#x2F; 将结点u出队列，另u为该结点的数组下标，哪个结点出队列，u就为出队列的结点所在数组下标    DeQueue(Q,u);    &#x2F;&#x2F; w为与u结点第一个邻接点    for(w &#x3D; FirstNeighbor(G,u); w &gt;&#x3D; 0; w &#x3D; NextNeighbor(G,u,w)) &#123;      if(!visit[w]) &#123;        visited[w] &#x3D; true;        d[w] &#x3D; d[u] + 1;        EnQuene(Q,w);      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【广度优先生成树】</strong></p><p>在广度遍历过程中，可以得到一颗遍历树，称为广度优先生成树（生成森林）</p><ul><li>结点1入队列，队列Q={1}</li><li>结点1出队列，结点2,3入队列，队列Q={2,3}</li><li>结点2出队列，结点4,5入队列，队列Q={3,4,5}</li><li>结点3出队列，结点6入队列，队列Q={4,5,6}</li><li>结点4入队列，结点7入队列，队列Q={5,6,7}</li><li>结点5出队列</li><li>结点6出队列</li><li>结点7出队列</li></ul><p>在广度优先遍历的过程中存在一个数组，用以标识每个结点是否被访问，放置重复遍历（比如结点4出队列后，结点5和7是要入队列的，此时就不满足每个结点只遍历一次这个要求，所以每个结点需要一个标识位用以判断是否被访问，判断在入队列前）</p><img alt="广度优先生成树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/广度优先生成树.png"><h2 id="32-深度优先遍历"><a class="markdownIt-Anchor" href="#32-深度优先遍历"></a> 3.2 深度优先遍历</h2><p>空间复杂度：O(|V|)</p><p>时间复杂度：</p><ul><li>邻接矩阵法：O(|V|<sup>2</sup>)</li><li>邻接表法：O(|V| + |E|)</li></ul><p><strong>【搜索过程】</strong></p><ul><li>首先访问起始顶点v</li><li>接着由v出发访问v的任意一个邻接但未被访问的邻接顶点w<sub>i</sub></li><li>然后再访问与w<sub>i</sub>邻接且未被访问的任意顶点y<sub>i</sub></li><li>若w<sub>i</sub>没有邻接且未被访问的顶点时，退回到它的上一层顶点v</li><li>重复</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool visited[MAX_TREE_SIZE];void DFSTraverse(Graph G) &#123;  for(int i &#x3D; 0; i &lt; G.vexnuml i++)    visited[i] &#x3D; false;  for(int i &#x3D;0; i &lt; G.vexnum; i++)    if(!visited[i])DFS(G,i);&#125;void DFS(Graph G, int v) &#123;  visit(v);  visited[v] &#x3D; true;  for(w &#x3D; FirstNeighbor(G,v); w &gt;&#x3D; 0; w &#x3D; NextNeighbor(G,v,w)) &#123;    if(!visited[w]) DFS(G,w);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>邻接矩阵法的DFS(BFS)序列是唯一的，邻接表法的不唯一</mark></p><h2 id="33-遍历与连通性"><a class="markdownIt-Anchor" href="#33-遍历与连通性"></a> 3.3 遍历与连通性</h2><ul><li>无向图<ul><li>在任意结点调用BFS或者DFS，倘若能访问所有的结点，说明是连通的</li><li>调用遍历函数（BFS或者DFS）次数为连通分量的个数。（这里的次数是指主函数中使用BFS或者DFS次数，BFS或DFS内部递归调用不算）</li></ul></li></ul><h1 id="4-应用"><a class="markdownIt-Anchor" href="#4-应用"></a> 4 应用</h1><h2 id="41-最小生成树"><a class="markdownIt-Anchor" href="#41-最小生成树"></a> 4.1 最小生成树</h2><p>对于<mark>带权的无向连通图</mark>G，G中所有生成树中边权值之和最小的生成树称为最小生成树(MST)</p><p><strong>【性质】</strong></p><ul><li><p>最小生成树不一定唯一，可以有多个。</p><blockquote><p>满足下列条件，MST唯一</p><ol><li>各边权重不同</li><li>原图本身只有n-1条边，最小生成树是其本身</li></ol></blockquote></li><li><p>最小生成树无论有多少个，它们的权重之和是唯一的</p></li><li><p>最小生成树的边数 = n-  1</p></li></ul><h3 id="411-prim算法"><a class="markdownIt-Anchor" href="#411-prim算法"></a> 4.1.1 Prim算法</h3><p>普里姆算法在找最小生成树时，将顶点分为两类，一类是在查找的过程中已经包含在树中的（假设为 A 类），剩下的是另一类（假设为 B 类）。</p><p>对于给定的连通网，起始状态全部顶点都归为 B 类。在找最小生成树时，选定任意一个顶点作为起始点，并将之从 B 类移至 A 类；然后找出 B 类中到 A 类中的顶点之间权值最小的顶点，将之从 B 类移至 A 类，如此重复，直到 B 类中没有顶点为止。所走过的顶点和边就是该连通图的最小生成树。</p><p>举例步骤如下：</p><p>假如从顶点A出发，顶点 B、C、D 到顶点 A 的权值分别为 2、4、2，所以，对于顶点 A 来说，顶点 B 和顶点 D 到 A 的权值最小，假设先找到的顶点 B：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/prim01.png" alt="" /></p><p>继续分析顶点 C 和 D，顶点 C 到 B 的权值为 3，到 A 的权值为 4；顶点 D 到 A 的权值为 2，到 B 的权值为无穷大（如果之间没有直接通路，设定权值为无穷大）。所以顶点 D 到 A 的权值最小：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/prim02.png" alt="" /></p><p>最后，只剩下顶点 C，到 A 的权值为 4，到 B 的权值和到 D 的权值一样大，为 3。所以该连通图有两个最小生成树：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/prim03.png" alt="" /></p><p>普里姆算法的运行效率只与连通网中包含的<mark>顶点数相关</mark>，而和网所含的边数无关。所以普里姆算法适合于解决<mark>边稠密的网</mark>，该算法运行的</p><p>时间复杂度：O(n<sup>2</sup>)。</p><blockquote><p>如果连通网中所含边的绸密度不高，则建议使用克鲁斯卡尔算法求最小生成树</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define VertexType int#define VRType int#define MAX_VERtEX_NUM 20#define InfoType char   #define INFINITY 65535typedef struct &#123;    VRType adj;                             &#x2F;&#x2F;对于无权图，用 1 或 0 表示是否相邻；对于带权图，直接为权值。    InfoType * info;                        &#x2F;&#x2F;弧额外含有的信息指针&#125;ArcCell,AdjMatrix[MAX_VERtEX_NUM][MAX_VERtEX_NUM];typedef struct &#123;    VertexType vexs[MAX_VERtEX_NUM];        &#x2F;&#x2F;存储图中顶点数据    AdjMatrix arcs;                         &#x2F;&#x2F;二维数组，记录顶点之间的关系    int vexnum,arcnum;                      &#x2F;&#x2F;记录图的顶点数和弧（边）数&#125;MGraph;&#x2F;&#x2F;根据顶点本身数据，判断出顶点在二维数组中的位置int LocateVex(MGraph G,VertexType v)&#123;    int i&#x3D;0;    &#x2F;&#x2F;遍历一维数组，找到变量v    for (; i&lt;G.vexnum; i++) &#123;        if (G.vexs[i]&#x3D;&#x3D;v) &#123;            return i;        &#125;    &#125;    return -1;&#125;&#x2F;&#x2F;构造无向网void CreateUDN(MGraph* G)&#123;    scanf(&quot;%d,%d&quot;,&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));    for (int i&#x3D;0; i&lt;G-&gt;vexnum; i++) &#123;        scanf(&quot;%d&quot;,&amp;(G-&gt;vexs[i]));    &#125;    for (int i&#x3D;0; i&lt;G-&gt;vexnum; i++) &#123;        for (int j&#x3D;0; j&lt;G-&gt;vexnum; j++) &#123;            G-&gt;arcs[i][j].adj&#x3D;INFINITY;            G-&gt;arcs[i][j].info&#x3D;NULL;        &#125;    &#125;    for (int i&#x3D;0; i&lt;G-&gt;arcnum; i++) &#123;        int v1,v2,w;        scanf(&quot;%d,%d,%d&quot;,&amp;v1,&amp;v2,&amp;w);        int m&#x3D;LocateVex(*G, v1);        int n&#x3D;LocateVex(*G, v2);        if (m&#x3D;&#x3D;-1 ||n&#x3D;&#x3D;-1) &#123;            printf(&quot;no this vertex\n&quot;);            return;        &#125;        G-&gt;arcs[n][m].adj&#x3D;w;        G-&gt;arcs[m][n].adj&#x3D;w;    &#125;&#125;&#x2F;&#x2F;辅助数组，用于每次筛选出权值最小的边的邻接点typedef struct &#123;    VertexType adjvex;&#x2F;&#x2F;记录权值最小的边的起始点    VRType lowcost;&#x2F;&#x2F;记录该边的权值&#125;closedge[MAX_VERtEX_NUM];closedge theclose;&#x2F;&#x2F;创建一个全局数组，因为每个函数中都会使用到&#x2F;&#x2F;在辅助数组中找出权值最小的边的数组下标，就可以间接找到此边的终点顶点。int minimun(MGraph G,closedge close)&#123;    int min&#x3D;INFINITY;    int min_i&#x3D;-1;    for (int i&#x3D;0; i&lt;G.vexnum; i++) &#123;        &#x2F;&#x2F;权值为0，说明顶点已经归入最小生成树中；然后每次和min变量进行比较，最后找出最小的。        if (close[i].lowcost&gt;0 &amp;&amp; close[i].lowcost &lt; min) &#123;            min&#x3D;close[i].lowcost;            min_i&#x3D;i;        &#125;    &#125;    &#x2F;&#x2F;返回最小权值所在的数组下标    return min_i;&#125;&#x2F;&#x2F;普里姆算法函数，G为无向网，u为在网中选择的任意顶点作为起始点void miniSpanTreePrim(MGraph G,VertexType u)&#123;    &#x2F;&#x2F;找到该起始点在顶点数组中的位置下标    int k&#x3D;LocateVex(G, u);    &#x2F;&#x2F;首先将与该起始点相关的所有边的信息：边的起始点和权值，存入辅助数组中相应的位置，例如（1，2）边，adjvex为0，lowcost为6，存入theclose[1]中，辅助数组的下标表示该边的顶点2    for (int i&#x3D;0; i&lt;G.vexnum; i++) &#123;        if (i !&#x3D;k) &#123;            theclose[i].adjvex&#x3D;k;            theclose[i].lowcost&#x3D;G.arcs[k][i].adj;        &#125;    &#125;    &#x2F;&#x2F;由于起始点已经归为最小生成树，所以辅助数组对应位置的权值为0，这样，遍历时就不会被选中    theclose[k].lowcost&#x3D;0;    &#x2F;&#x2F;选择下一个点，并更新辅助数组中的信息    for (int i&#x3D;1; i&lt;G.vexnum; i++) &#123;        &#x2F;&#x2F;找出权值最小的边所在数组下标        k&#x3D;minimun(G, theclose);        &#x2F;&#x2F;输出选择的路径        printf(&quot;v%d v%d\n&quot;,G.vexs[theclose[k].adjvex],G.vexs[k]);        &#x2F;&#x2F;归入最小生成树的顶点的辅助数组中的权值设为0        theclose[k].lowcost&#x3D;0;        &#x2F;&#x2F;信息辅助数组中存储的信息，由于此时树中新加入了一个顶点，需要判断，由此顶点出发，到达其它各顶点的权值是否比之前记录的权值还要小，如果还小，则更新        for (int j&#x3D;0; j&lt;G.vexnum; j++) &#123;            if (G.arcs[k][j].adj&lt;theclose[j].lowcost) &#123;                theclose[j].adjvex&#x3D;k;                theclose[j].lowcost&#x3D;G.arcs[k][j].adj;            &#125;        &#125;    &#125;    printf(&quot;\n&quot;);&#125;int main()&#123;    MGraph G;    CreateUDN(&amp;G);    miniSpanTreePrim(G, 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="412-kruskal算法"><a class="markdownIt-Anchor" href="#412-kruskal算法"></a> 4.1.2 Kruskal算法</h3><p>克鲁斯卡尔算法：从边的角度出发，时间复杂度为O(|E|log|E|)，时间复杂度只和边有关系，与普利姆算法（从顶点出发）相反，适合于求边稀疏的网的最小生成树</p><p>克鲁斯卡尔算法的具体思路是：将所有边按照权值的大小进行升序排序，然后从小到大一一判断，条件为：如果这个边不会与之前选择的所有边组成回路，就可以作为最小生成树的一部分；反之，舍去。直到具有 n 个顶点的连通网筛选出来 n-1 条边为止。筛选出来的边和所有的顶点构成此连通网的最小生成树。</p><blockquote><p>判断是否会产生回路的方法为：在初始状态下给每个顶点赋予不同的标记，对于遍历过程的每条边，其都有两个顶点，判断这两个顶点的标记是否一致，如果一致，说明它们本身就处在一棵树中，如果继续连接就会产生回路；如果不一致，说明它们之间还没有任何关系，可以连接。</p></blockquote><p>假设遍历到一条由顶点 A 和 B 构成的边，而顶点 A 和顶点 B 标记不同，此时不仅需要将顶点 A 的标记更新为顶点 B 的标记，还需要更改所有和顶点 A 标记相同的顶点的标记，全部改为顶点 B 的标记。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/Kruskal.png" alt="图1 连通网"><p>例如，使用克鲁斯卡尔算法找图 1 的最小生成树的过程为：</p><p>首先，在初始状态下，对各顶点赋予不同的标记（用颜色区别），如(1)所示：</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/Kruskal01.png" alt="(1)" style="zoom:50%;" /><p>对所有边按照权值的大小进行排序，按照从小到大的顺序进行判断，首先是（1，3），由于顶点 1 和顶点 3 标记不同，所以可以构成生成树的一部分，遍历所有顶点，将与顶点 3 标记相同的全部更改为顶点 1 的标记，如（2）所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal02.png" alt="(2)" /></p><p>其次是（4，6）边，两顶点标记不同，所以可以构成生成树的一部分，更新所有顶点的标记为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal03.png" alt="(3)" /></p><p>其次是（2，5）边，两顶点标记不同，可以构成生成树的一部分，更新所有顶点的标记为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal04.png" alt="(4)" /></p><p>然后最小的是（3，6）边，两者标记不同，可以连接，遍历所有顶点，将与顶点 6 标记相同的所有顶点的标记更改为顶点 1 的标记：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal05.png" alt="(5)" /></p><p>继续选择权值最小的边，此时会发现，权值为 5 的边有 3 个，其中（1，4）和（3，4）各自两顶点的标记一样，如果连接会产生回路，所以舍去，而（2，3）标记不一样，可以选择，将所有与顶点 2 标记相同的顶点的标记全部改为同顶点 3 相同的标记：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal06.png" alt="最终结果" /><br />当选取的边的数量相比与顶点的数量小 1 时，说明最小生成树已经生成。所以最终采用克鲁斯卡尔算法得到的最小生成树如上图所示。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;stdio.h&quot;#include &quot;stdlib.h&quot;#define MAX_VERtEX_NUM 20#define VertexType inttypedef struct edge&#123;    VertexType initial;    VertexType end;    VertexType weight;&#125;edge[MAX_VERtEX_NUM];&#x2F;&#x2F;定义辅助数组typedef struct &#123;    VertexType value;&#x2F;&#x2F;顶点数据    int sign;&#x2F;&#x2F;每个顶点所属的集合&#125;assist[MAX_VERtEX_NUM];assist assists;&#x2F;&#x2F;qsort排序函数中使用，使edges结构体中的边按照权值大小升序排序int cmp(const void *a,const void*b)&#123;    return  ((struct edge*)a)-&gt;weight-((struct edge*)b)-&gt;weight;&#125;&#x2F;&#x2F;初始化连通网void CreateUDN(edge *edges,int *vexnum,int *arcnum)&#123;    printf(&quot;输入连通网的边数：\n&quot;);    scanf(&quot;%d %d&quot;,&amp;(*vexnum),&amp;(*arcnum));    printf(&quot;输入连通网的顶点：\n&quot;);    for (int i&#x3D;0; i&lt;(*vexnum); i++) &#123;        scanf(&quot;%d&quot;,&amp;(assists[i].value));        assists[i].sign&#x3D;i;    &#125;    printf(&quot;输入各边的起始点和终点及权重：\n&quot;);    for (int i&#x3D;0 ; i&lt;(*arcnum); i++) &#123;        scanf(&quot;%d,%d,%d&quot;,&amp;(*edges)[i].initial,&amp;(*edges)[i].end,&amp;(*edges)[i].weight);    &#125;&#125;&#x2F;&#x2F;在assists数组中找到顶点point对应的位置下标int Locatevex(int vexnum,int point)&#123;    for (int i&#x3D;0; i&lt;vexnum; i++) &#123;        if (assists[i].value&#x3D;&#x3D;point) &#123;            return i;        &#125;    &#125;    return -1;&#125;int main()&#123;       int arcnum,vexnum;    edge edges;    CreateUDN(&amp;edges,&amp;vexnum,&amp;arcnum);    &#x2F;&#x2F;对连通网中的所有边进行升序排序，结果仍保存在edges数组中    qsort(edges, arcnum, sizeof(edges[0]), cmp);    &#x2F;&#x2F;创建一个空的结构体数组，用于存放最小生成树    edge minTree;    &#x2F;&#x2F;设置一个用于记录最小生成树中边的数量的常量    int num&#x3D;0;    &#x2F;&#x2F;遍历所有的边    for (int i&#x3D;0; i&lt;arcnum; i++) &#123;        &#x2F;&#x2F;找到边的起始顶点和结束顶点在数组assists中的位置        int initial&#x3D;Locatevex(vexnum, edges[i].initial);        int end&#x3D;Locatevex(vexnum, edges[i].end);        &#x2F;&#x2F;如果顶点位置存在且顶点的标记不同，说明不在一个集合中，不会产生回路        if (initial!&#x3D;-1&amp;&amp; end!&#x3D;-1&amp;&amp;assists[initial].sign!&#x3D;assists[end].sign) &#123;            &#x2F;&#x2F;记录该边，作为最小生成树的组成部分            minTree[num]&#x3D;edges[i];            &#x2F;&#x2F;计数+1            num++;            &#x2F;&#x2F;将新加入生成树的顶点标记全不更改为一样的            for (int k&#x3D;0; k&lt;vexnum; k++) &#123;                if (assists[k].sign&#x3D;&#x3D;assists[end].sign) &#123;                    assists[k].sign&#x3D;assists[initial].sign;                &#125;            &#125;            &#x2F;&#x2F;如果选择的边的数量和顶点数相差1，证明最小生成树已经形成，退出循环            if (num&#x3D;&#x3D;vexnum-1) &#123;                break;            &#125;        &#125;    &#125;    &#x2F;&#x2F;输出语句    for (int i&#x3D;0; i&lt;vexnum-1; i++) &#123;        printf(&quot;%d,%d\n&quot;,minTree[i].initial,minTree[i].end);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-最短路径"><a class="markdownIt-Anchor" href="#42-最短路径"></a> 4.2 最短路径</h2><a href="/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/" title="最短路径">最短路径</a><p>两个顶点之间带权路径长度最短的路径为最短路径。在带权图中，把从一个顶点v到另一个顶点u所经历的边的权值之和称为，路径的带权路径长度。</p><h3 id="421-迪杰斯特拉dijkstra算法"><a class="markdownIt-Anchor" href="#421-迪杰斯特拉dijkstra算法"></a> 4.2.1 迪杰斯特拉（Dijkstra）算法</h3><p><mark>带权图单源最短路径，不适用于含有负权边的图</mark></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/迪杰斯特拉算法.png"><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/迪杰斯特拉算法-通过path数组找到路径.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Dijkstra(Graph G,int v) &#123;  &#x2F;&#x2F; 初始化  int s[G.vexnum];  int path[G.vexnum];  int dist[G.vexnum];  for(int i &#x3D; 0; i &lt; G.vexnum; i++) &#123;    dist[i] &#x3D; G.edge[v][i];    s[i] &#x3D; 0;    if(G.edge[v][i] &lt; MAX) &#123;      path[i] &#x3D; v;    &#125; else &#123;      path[i] &#x3D; -1;    &#125;  &#125;  s[v] &#x3D; 1;  path[v] &#x3D; -1;  for(int i &#x3D; 0; i &lt; G.vexnum; i++)&#123;    int min &#x3D; MAX:    int u;    for(int j &#x3D; 0; j &lt; G.vexnum; j++) &#123;      if(S[j] &#x3D;&#x3D; 0 &amp;&amp; dist[j] &lt; min)&#123;        min &#x3D; dist[j];        u &#x3D; j;      &#125;    &#125;    s[u] &#x3D; 1;    for(int j &#x3D; 0; j &lt; G.vexnum; j++) &#123;      if(s[j] &#x3D;&#x3D; 0 &amp;&amp; dist[u] + G.Edge[i][j] &lt; dist[j]) &#123;        dist[j] &#x3D; dist[u] + G.Edge[u][i];        path[j] &#x3D; u;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="422-弗洛伊德floyd算法"><a class="markdownIt-Anchor" href="#422-弗洛伊德floyd算法"></a> 4.2.2 弗洛伊德（Floyd）算法</h3><p><strong>【算法思想】</strong></p><p>弗洛伊德的核心思想是：对于网中的任意两个顶点（例如顶点 A 到顶点 B）来说，之间的最短路径不外乎有 2 种情况：</p><ol><li>直接从顶点 A 到顶点 B 的弧的权值为顶点 A 到顶点 B 的最短路径；</li><li>从顶点 A 开始，经过若干个顶点，最终达到顶点 B，期间经过的弧的权值和为顶点 A 到顶点 B 的最短路径。<br />所以，弗洛伊德算法的核心为：对于从顶点 A 到顶点 B 的最短路径，拿出网中所有的顶点进行如下判断：</li></ol><blockquote><p>Dis（A，K）+ Dis（K，B）&lt; Dis（A，B）</p></blockquote><p>其中，K 表示网中所有的顶点；Dis（A，B） 表示顶点 A 到顶点 B 的距离。</p><p>也就是说，拿出所有的顶点 K，判断经过顶点 K 是否存在一条可行路径比直达的路径的权值小，如果式子成立，说明确实存在一条权值更小的路径，此时只需要更新记录的权值和即可。</p><p>任意的两个顶点全部做以上的判断，最终遍历完成后记录的最终的权值即为对应顶点之间的最短路径。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/弗洛伊德算法思想.png"><p><strong>【例子】</strong></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/弗洛伊德01.png" alt="img" style="zoom:50%;" alt="图 1 带权图"/><p>例如，在使用弗洛伊德算法计算图 1 中的任意两个顶点之间的最短路径时，具体实施步骤为：</p><p>首先，记录顶点之间初始的权值，如下表所示：</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/弗洛伊德02.png"> <p>依次遍历所有的顶点，假设从 V0 开始，将 V0 作为中间点，看每对顶点之间的距离值是否会更小。最终 V0 对于每对顶点之间的距离没有任何改善。</p><blockquote><p>对于 V0 来说，由于该顶点只有出度，没有入度，所以没有作为中间点的可能。同理，V1也没有可能。</p></blockquote><p>将 V2 作为每对顶点的中间点，有影响的为 （V0，V3） 和 （V1，V3）：</p><blockquote><p>例如，（V0，V3）权值为无穷大，而（V0，V2）+（V2，V3）= 60，比之前的值小，相比而言后者的路径更短；同理 （V1，V3）也是如此。</p></blockquote><p>更新的表格为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B703.png" alt="" /></p><p>以 V3 作为中间顶点遍历各队顶点，更新后的表格为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B704.png" alt="" /></p><p>以 V4 作为中间顶点遍历各队顶点，更新后的表格为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B705.png" alt="" /></p><p>而对于顶点 V5 来说，和顶点 V0 和 V1 相类似，所不同的是，V5 只有入度，没有出度，所以对各队顶点的距离不会产生影响。最终采用弗洛伊德算法求得的各个顶点之间的最短路径如上图所示。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MAX_VERtEX_NUM <span class="token number">20</span>                   </span><span class="token comment">//顶点的最大个数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">VRType <span class="token keyword">int</span>                          </span><span class="token comment">//表示弧的权值的类型</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">VertexType <span class="token keyword">int</span>                      </span><span class="token comment">//图中顶点的数据类型</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">INFINITY <span class="token number">65535</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    VertexType vexs<span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//存储图中顶点数据</span>    VRType arcs<span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>                         <span class="token comment">//二维数组，记录顶点之间的关系</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>arcnum<span class="token punctuation">;</span>                      <span class="token comment">//记录图的顶点数和弧（边）数</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> PathMatrix<span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//用于存储最短路径中经过的顶点的下标</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ShortPathTable<span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//用于存储各个最短路径的权值和</span><span class="token comment">//根据顶点本身数据，判断出顶点在二维数组中的位置</span><span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span> G<span class="token punctuation">,</span>VertexType v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//遍历一维数组，找到变量v</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token operator">-></span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果找不到，输出提示语句，返回-1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span>G<span class="token operator">-></span>vexnum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no such vertex.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//构造有向网</span><span class="token keyword">void</span> <span class="token function">CreateUDG</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>G<span class="token operator">-></span>arcnum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>G<span class="token operator">-></span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INFINITY<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token operator">-></span>arcnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>w<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v1<span class="token punctuation">,</span><span class="token operator">&amp;</span>v2<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>n<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no this vertex\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//弗洛伊德算法，其中P二维数组存放各对顶点的最短路径经过的顶点，D二维数组存储各个顶点之间的权值</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Floyed</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span>PathMatrix <span class="token operator">*</span>P<span class="token punctuation">,</span>ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//对P数组和D数组进行初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> w<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">.</span>arcs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//拿出每个顶点作为遍历条件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//对于第k个顶点来说，遍历网中任意两个顶点，判断间接的距离是否更短</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> w<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断经过顶点k的距离是否更短，如果判断成立，则存储距离更短的路径</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    MGraph G<span class="token punctuation">;</span>    <span class="token function">CreateUDG</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>    PathMatrix P<span class="token punctuation">;</span>    ShortPathTable D<span class="token punctuation">;</span>    <span class="token function">ShortestPath_Floyed</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token operator">&amp;</span>P<span class="token punctuation">,</span> <span class="token operator">&amp;</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="43-拓扑排序"><a class="markdownIt-Anchor" href="#43-拓扑排序"></a> 4.3 拓扑排序</h2><p><span style="color:blue;font-size:18px;">有向无环图：</span>不存在环的有向图，简称DAG图</p><p><span style="color:blue;font-size:18px;">AOV网：</span>若用一个DAG图表示一个工程，其顶点表示活动，用有向边&lt;vi,vj&gt;表示活动vi先于活动vj进行的传递关系，则将这种DAG称为顶点表示活动网络，记为AOV网</p><p><span style="color:blue;font-size:18px;">拓扑排序：</span>对DAG所有顶点的一种排序，使若存在一条从顶点A到顶点B的路径，在排序中B排在A的后面</p><p><strong>【步骤】</strong></p><ol><li>从DAG中选择一个没有前驱的顶点并输出</li><li>从图中删除该顶点和所有以它为起点的有向边</li><li>重复上述步骤，直到当前DAG图为空或者当前图中不存在无前驱的顶点为止。后一种情况说明图中有环。</li></ol><p><mark>拓扑排序不一定唯一 O(|V|+|E|)</mark></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool TopologicalSort(Graph G) &#123;  InitStack(s);  for(int i &#x3D; 0; i &lt; G.vexnum; i++) &#123;    if(indegree[i] &#x3D;&#x3D; 0)      push(s,i);  &#125;  int count &#x3D; 0;  while(!isEmpty(s)) &#123;    pop(s,i);    print[count++] &#x3D; i;    for(p &#x3D; G.Vertices[i].firstarc; p; p&#x3D;p-&gt;next) &#123;      v &#x3D; p-&gt;adjvex;      if(!(--indegree[v]))        push(s,v);    &#125;  &#125;  if(count &lt; G.vexnum)    return false;  else     return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>若邻接矩阵为三角矩阵，则存在拓扑排序，反之不一定成立</p></blockquote><h2 id="44-关键路径"><a class="markdownIt-Anchor" href="#44-关键路径"></a> 4.4 关键路径</h2><p><span style="color:blue;font-size:18px;">AOE网：</span>在有向带权图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销（如完成活动需要的时间），则称这种有向图为用边表示活动的网络，简称AOE网</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/AOE.png" alt="AOE网"><p><span style="color:blue;font-size:18px;">关键路径：</span>从原点到汇点最大路径长度的路径称为关键路径，关键路径上的活动为关键活动</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/关键路径.png"><p>此时，d(i)为0的路径就是关键路径 {a2,a5,a7}</p><blockquote><p><mark>缩短关键活动的时间可以加快整个工程，但缩短到一定大小时，关键路径会发生变化</mark></p><p><mark>当网中关键路径不唯一时，只有加快关键活动或者关键活动组合包括在所有的关键路径上才能缩短工期</mark></p></blockquote><h1 id="5-图的基本操作"><a class="markdownIt-Anchor" href="#5-图的基本操作"></a> 5 图的基本操作</h1><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>Adjacent(G,x,y)</td><td>判断图G是否存在&lt;x,y&gt;或者(x,y)</td></tr><tr><td>Neighbors(G,x)</td><td>列出图G与结点x邻接的边</td></tr><tr><td>InsertVertex(G,x)</td><td>在图G中插入顶点x</td></tr><tr><td>DeleteVertex(G,x)</td><td>图G中删除顶点x</td></tr><tr><td>AddEdge(G,x,y)</td><td>若所添加的边不存在，则添加（x,y）或者&lt;x,y&gt;</td></tr><tr><td>RemoveEdge(G,x,y)</td><td>若该边存在，则删除</td></tr><tr><td>FirstNeighbor(G,x)</td><td>求G中顶点x的第一个邻接点，图中无x点或者没有找到，返回-1</td></tr><tr><td>NextNeighbor(G,x)</td><td>y是x的一个邻接点，返回除y之外的顶点x的下一个邻接点顶点号，若y是x的最后一个邻接点，返回-1</td></tr><tr><td>Get_edge_value(G,x,y)</td><td>得到边的权重</td></tr><tr><td>Set_edge_value(G,x,y)</td><td>设置边的权重</td></tr></tbody></table><ul><li><p>Adjacent，判断图G是否存在某边</p><table><thead><tr><th></th><th>邻接矩阵</th><th>邻接表</th></tr></thead><tbody><tr><td>无向图</td><td>O(1)</td><td>O(|E|)</td></tr><tr><td>有向图</td><td>O(1)</td><td>O(|E|)</td></tr></tbody></table><blockquote><p>邻接矩阵存储。只需要通过数组下标访问某个位置即可，</p><p>邻接表存储。需要遍历单链表</p></blockquote></li><li><p>Neighbors，列出与所给结点邻接的边</p><table><thead><tr><th></th><th>邻接矩阵</th><th>邻接表</th></tr></thead><tbody><tr><td>无向图</td><td>O(|V|)</td><td>O(n),n≤|V|</td></tr><tr><td>有向图</td><td>O(2|V|)</td><td>O(|E|)</td></tr></tbody></table><blockquote><p>有向图【邻接矩阵存储】，找结点出度和入度只需要遍历该结点所在的行与列，遍历的次数为2|V|</p><p>有向图【邻接表存储】，虽然某结点的出度很容易得到，但是统计某结点的入度需要遍历每个结点的链表。次数一共为|E|</p></blockquote></li><li><p>InsertVertex，插入</p><blockquote><p>无向图/有向图【邻接矩阵】，插入结点，需要数组扩容，重新申请一个新数据，将旧数据拷贝（需要|V|<sup>2</sup>次），再将新结点与其他结点的填入扩充出来的位置中（需要|V|次），效率不高。</p><p>无向图/有向图，插入结点，需要扩充顶点表，旧数组中顶点表数据拷贝到新数组（|V|次），然后更新。效率会比邻接矩阵要高</p></blockquote></li><li><p>DeleteVertex</p><blockquote><p>对于邻接矩阵存储删除结点，可以使该结点的行与列置NULL，或者缩小矩阵来实现</p></blockquote></li><li><p>AddEdge</p><blockquote><p>邻接矩阵更快，直接修改矩阵中对应位置的值为1即可</p><p>邻接表，需要创建链表结点，再修改指针</p></blockquote></li><li><p>RemoveEdge</p><blockquote><p>邻接矩阵更快，直接修改数组中的元素数据</p><p>邻接表，找到对应的然后（费时间），然后删除</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">数据结构,图</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="blog.silverbeats.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="blog.silverbeats.cn/%E6%A0%91/"/>
    <id>blog.silverbeats.cn/%E6%A0%91/</id>
    <published>2020-10-25T12:49:33.000Z</published>
    <updated>2020-10-25T13:45:02.602Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-Size:18px;color:blue;padding-right:5px;"><strong>树</strong></span>是n(n&gt;=0)个结点的有限集合，n=0时，称为空树，树是一种逻辑结构。而任意非空树应该满足：</p><p>1）有且仅有一个特定的称为<span style="color:red;"><strong>根的结点</strong></span></p><p>2）当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集合，其中每一个集合本身又是一棵树，称为根结点的<span style="color:red;"><strong>子树</strong></span></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/树.png" alt="树"><p><strong>【相关概念】</strong></p><table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>祖先结点和子孙结点</td><td>A是所有结点的祖先结点，为根节点。B是EF的祖先结点，EF是B的子孙结点</td></tr><tr><td>双亲结点和孩子结点</td><td>B是E的双亲结点，E是B的孩子结点</td></tr><tr><td>兄弟节点</td><td>EF互为兄弟结点，BCD互为兄弟结点</td></tr><tr><td>度</td><td>树中一个结点的子结点的个数称为该结点的度。比如B的度为2，A的度为3</td></tr><tr><td>树的度</td><td>度中取最大值</td></tr><tr><td>分支结点</td><td>度大于0的结点</td></tr><tr><td>叶子结点</td><td>度为0的结点</td></tr><tr><td>结点的层次</td><td>见上图</td></tr><tr><td>结点的高度</td><td>从最底下一层向根节点累计。比如B结点的高度是3</td></tr><tr><td>结点的深度</td><td>与结点高度相反，从根节点开始，B结点的深度为2</td></tr><tr><td>树的高度(深度)</td><td>树中结点的最大层次</td></tr><tr><td>有序树和无序树</td><td>见下图。若为无序树，两个树相同，若为有序树，两个树不同</td></tr><tr><td>路径</td><td>树中两个结点之间的路径是由这两个结点之间所经过的结点序列构成的。树的分支是有向的，即从双亲结点指向孩子结点，所以路径一定是自上而下的。A到E的路径是ABE</td></tr><tr><td>路径长度</td><td>路径上所经历边的个数。A到E的路径长度为2</td></tr><tr><td>森林</td><td>m(m&gt;=0)棵互不相交的树的集合。比如上图去掉根节点A后，1棵树变3棵树</td></tr></tbody></table><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/有序树和无序树.png"><p><strong>【树的性质】</strong></p><ol><li>树中的结点树等于所有结点的度+1</li><li>度为m的树中第i层上最多有m<sup>i-1</sup>个结点(i&gt;=1)</li><li>高度为h的m叉树至多有（m<sup>h</sup>-1）/（m-1）个结点</li><li>具有n个结点的m叉树的最小高度为⌈log<sub>m</sub>（n（m-1） + 1）⌉</li></ol><h1 id="1-二叉树"><a class="markdownIt-Anchor" href="#1-二叉树"></a> 1 二叉树</h1><h2 id="11-二叉树的基本概念"><a class="markdownIt-Anchor" href="#11-二叉树的基本概念"></a> 1.1 二叉树的基本概念</h2><h3 id="111-定义及特点"><a class="markdownIt-Anchor" href="#111-定义及特点"></a> 1.1.1 定义及特点</h3><p>二叉树是逻辑结构。</p><p>二叉树是n(n&gt;=0)个结点的有限集合。</p><ul><li>n=0时，二叉树为空</li><li>n&gt;0时，由根结点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树也分别是一棵二叉树</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉树五种基本形态.png"><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>满二叉树</td><td>一个高度为h的二叉树，且含有2<sup>h</sup>-1个结点的二叉树为满二叉树。</td></tr><tr><td>完全二叉树</td><td>设一个高度为h、有n个结点的二叉树，当且仅当其每个结点都与高度为h的满二叉树中编号1~n的结点一一对应，称为完全二叉树</td></tr><tr><td>二叉排序树</td><td>一个二叉树，若树非空则具有如下性质：对任意结点若存在左子树或右子树，则其左子树上所有结点的关键字均小于该结点，右子树上所有结点的关键字都大于该结点</td></tr><tr><td>平衡二叉树</td><td>树上任意结点的左子树和右子树的深度差不超过1</td></tr></tbody></table><p><strong>【满二叉树】</strong></p><ul><li>高度为h的m叉树，最多有（m<sup>h</sup>-1）/（m-1）个结点。</li><li>对于编号为i的结点，若存在，其双亲的编号为⌊i/2⌋，左孩子为2i，右孩子为2i+1</li></ul><img alt="满二叉树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/满二叉树.png"><p><strong>【完全二叉树】</strong></p><ul><li>若i≤⌊n/2⌋，则结点i为分支结点，否则为叶子结点</li><li>叶子结点只可能在层次最大的两层出现。对于最大层次的叶子结点，都依次排在最左边的位置上。</li><li>度为1的结点倘若存在，只可能存在一个，且是编号最大的分支结点，并孩子结点一定是左结点</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/完全二叉树.png" alt="完全二叉树"><p><strong>【二叉排序树】</strong></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉排序树.png" alt="二叉排序树"><p><strong>【平衡二叉树】</strong></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/平衡二叉树.png" alt="平衡二叉树"><h3 id="112-二叉树的性质"><a class="markdownIt-Anchor" href="#112-二叉树的性质"></a> 1.1.2 二叉树的性质</h3><ol><li><p>非空二叉树上的叶子结点树量等于度为2的结点数量加1，即n<sub>0</sub>=n<sub>2</sub>+1</p></li><li><p>非空二叉树上第k层上最多有2<sup>k-1</sup>个结点（k &gt;=1）</p></li><li><p>高度为h的二叉树至多有2<sup>h</sup>-1个结点（h &gt;=1）</p></li><li><p>结点i所在的层次为⌊log<sub>2</sub>i⌋+1</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/结点i所在层.png"></li><li><p>具有n个（n&gt;0）结点的完全二叉树的高度为⌊log<sub>2</sub>n⌋+1 或者⌈log<sub>2</sub>(n+ 1)⌉</p></li></ol><h2 id="12-二叉树的存储结构"><a class="markdownIt-Anchor" href="#12-二叉树的存储结构"></a> 1.2 二叉树的存储结构</h2><h3 id="121-顺序存储"><a class="markdownIt-Anchor" href="#121-顺序存储"></a> 1.2.1 顺序存储</h3><p>用一组连续的存储单元依次自上而下、自左至右存储完全二叉树的结点元素。顺序存储比较适合存储完全二叉树，通过利用第i个结点的左结点是2i，右结点是2i+1这条性质，来表达逻辑上的结构关系。</p><p>当存储的树不是完全二叉树时，上述所用的性质行不通，可以通过补结点的方式来将此树补成一颗完全二叉树。（倘若补的结点过多，会存在浪费的情况）</p><h3 id="122-链式存储"><a class="markdownIt-Anchor" href="#122-链式存储"></a> 1.2.2 链式存储</h3><p>用链表存放一棵二叉树，二叉树中每个结点用链表的一个链结点来存储</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/链式存储.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct BiTNode &#123;  ElemType data;  struct BiTNode *lchild, *rchild;&#125;BiTNode, *BiTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/链式存储2.png"><p><span style="color:red;">※含有n个结点的二叉链表，有n+1个空链域</span></p><h2 id="13-二叉树的遍历"><a class="markdownIt-Anchor" href="#13-二叉树的遍历"></a> 1.3 二叉树的遍历</h2><p>按某条搜索路径访问树中的每个结点，树的每个结点均被访问一次，而且只访问一次</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉树遍历.png"><h3 id="131-前序遍历"><a class="markdownIt-Anchor" href="#131-前序遍历"></a> 1.3.1 前序遍历</h3><p>根——&gt;左子树——&gt;右子树</p><p>上图遍历顺序：1 2 4 5 3 6</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void PreOrder(BiTree T) &#123;  if(T !&#x3D; NULL) &#123;    visit(T);    PreOrder(T-&gt;lchild);    PreOrder(T-&gt;rchild);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="132-中序遍历"><a class="markdownIt-Anchor" href="#132-中序遍历"></a> 1.3.2 中序遍历</h3><p>左子树——&gt;根——&gt;右子树</p><p>上图遍历顺序：4 2 5 1 6 3</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InOrder(BiTree T) &#123;  if(T !&#x3D; NULL) &#123;    InOrder(T-&gt;lchild);    visit(T);    InOrder(T-&gt;rchild);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【非递归算法】</strong></p><p>1）初始时，一次扫描根结点的所有左侧结点并进栈</p><p>2）出栈一个结点，并访问</p><p>3）扫描该结点的右孩子结点的所有结点并进栈</p><p>4）依次扫描右孩子结点的所有左侧结点并进栈</p><p>5）反复直到栈空</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InOrder(BiTree T) &#123;  InitStack(S);  BiTress p &#x3D; T;  while(p || IsEmpty(S)) &#123;    if(p) &#123;      Push(S,p);      p &#x3D; p-&gt;lchild;    &#125; else &#123;      Pop(S,p);      visit(p);      p&#x3D;p-&gt;rchild;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="133-后序遍历"><a class="markdownIt-Anchor" href="#133-后序遍历"></a> 1.3.3 后序遍历</h3><p>左子树——&gt;右子树——&gt;根</p><p>上图遍历顺序：4 5 2 6 3 1</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void PreOrder(BiTree T) &#123;  if(T !&#x3D; NULL) &#123;    PreOrder(T-&gt;lchild);    PreOrder(T-&gt;rchild);     visit(T);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="134-层次遍历"><a class="markdownIt-Anchor" href="#134-层次遍历"></a> 1.3.4 层次遍历</h3><p><strong>【算法思想】</strong></p><p>1）初始将根入队列并访问根结点，然后出队</p><p>2）若有左子树，则将左子树的根入队</p><p>3）若有右子树，则将右子树的根入队</p><p>4）出队，访问该结点</p><p>5）反复直到队空</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void levelOrder(BiTress T) &#123;  InitQueue(Q);  BiTree(Q,T);  while(!isEmpty(Q)) &#123;    DeQueue(Q,p);    visit(p);    if(p-&gt;lchild !&#x3D; NULL)      EnQueue(Q,p-&gt;lchild);    if(p-&gt;rchild !&#x3D; NULL)      EnQueue(Q,p-&gt;rchild);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-线索二叉树"><a class="markdownIt-Anchor" href="#14-线索二叉树"></a> 1.4 线索二叉树</h2><p><span style="color:blue;font-size:18px">线索化</span></p><p>若无左子树，则将左指针指向其前驱结点</p><p>若无右子树，则将右指针指向其后继结点</p><h3 id="141-先序线索二叉树"><a class="markdownIt-Anchor" href="#141-先序线索二叉树"></a> 1.4.1 先序线索二叉树</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/前序线索二叉树.png" alt="先序线索二叉树"><h3 id="142-中序线索二叉树"><a class="markdownIt-Anchor" href="#142-中序线索二叉树"></a> 1.4.2 中序线索二叉树</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/中序线索二叉树.png" alt="中序线索二叉树"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InThread(ThreadTree &amp;p, ThreadTree &amp;pre) &#123;  if(p !&#x3D; NULL) &#123;    InThread(p-&gt;lchild,pre);    if(p-&gt;lchild &#x3D;&#x3D; NULL) &#123;      p-&gt;lchild &#x3D; pre;      p-&gt;ltag &#x3D; 1;    &#125;    if(pre !&#x3D; NULL &amp;&amp; pre-&gt;rchild &#x3D;&#x3D; NULL) &#123;      pre-&gt;rchild &#x3D; p;      pre-&gt;rtag &#x3D; 1;    &#125;    pre &#x3D; p;    InThread(p-&gt;rchild,pre);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void CreateThread(ThreadTree T) &#123;  ThreadTree pre &#x3D; NULL;  if(T !&#x3D; NULL) &#123;    InThread(T, pre);    pre-&gt;rchild &#x3D; NULL;    pre-&gt;tag &#x3D; 1;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>中序线索二叉树遍历</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ThreadNode * FirstNode(ThreadNode *p) &#123;  while(p-&gt;ltag &#x3D;&#x3D; 0)    p &#x3D; p-&gt;lchild;  return p;&#125;ThreadNode * NextNode(ThreadNode *p) &#123;  if(p-&gt;rtag &#x3D;&#x3D; 0)     return FirstNode(p-&gt;rchild);  else     return p-&gt;rchild;&#125;void InOrder(ThreadNode *T) &#123;  for(ThreadNode *p &#x3D; FirstNode(T); p!&#x3D;NULL; p&#x3D;NextNode(p))    visit(p);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="143-后序线索二叉树"><a class="markdownIt-Anchor" href="#143-后序线索二叉树"></a> 1.4.3 后序线索二叉树</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/后序线索二叉树.png" alt="后序线索二叉树"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct ThreadNode &#123;  ElemType data;  struct ThreedNode *lchild, *rchild;  int ltag, rtag;&#125;ThreadNode, *ThreadTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/线索二叉树结点.png" alt="线索二叉树结点"><h2 id="15-二叉树的应用"><a class="markdownIt-Anchor" href="#15-二叉树的应用"></a> 1.5 二叉树的应用</h2><h3 id="151-二叉排序树"><a class="markdownIt-Anchor" href="#151-二叉排序树"></a> 1.5.1 二叉排序树</h3><p><span style="color:blue;font-size:18px;">二叉排序树</span> BST，也称二叉查找树。二叉排序树可为空树、非空树，当为非空树时有如下特点：</p><p>1）若左子树非空，左子树上的所有结点关键字小于根结点的关键字</p><p>2）若右子树非空，右子树上的所有结点关键字大于根结点的关键字</p><p>3）左、右子树本身也分别是一棵二叉排序树</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉排序树2.png" alt="二叉排序树"><p><strong>【查找】</strong></p><p>①二叉树非空时，查找根结点，若相等则查找成功</p><p>②若不等，当小于根结点，查找左子树，大于根结点，查找右子树</p><p>③查找到叶子结点仍然没有找到，查找失败</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BSTNode *BST_Search(BiTree T, ElemType key, BSTNode * &amp;p) &#123;  &#x2F;&#x2F; p是双亲结点  p &#x3D; NULL;  while(T !&#x3D; NULL &amp;&amp; key !&#x3D; T-&gt;data) &#123;    p &#x3D; T;    if(key &lt; T-&gt;data)      T &#x3D; T-&gt;rchild;    else       T &#x3D; T-&gt;rchild;  &#125;  return T;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【插入】</strong></p><p>①若二叉排序树为空，直接插入</p><p>②若二叉排序树非空，当值小于根结点，插入左子树；大于根结点，插入右子树，当值等于根结点，则不插入</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int BST_Insert(BiTree &amp;T, KeyType k) &#123;  if(T &#x3D;&#x3D; NULL) &#123;    T &#x3D; (BiTree *)malloc(sizeof(BSTNode));    T-&gt;key &#x3D; k;    T-&gt;lchild &#x3D; T-&gt;rchild &#x3D; NULL;    return 1;  &#125;  else if(k &#x3D;&#x3D; T-&gt;key)    return 0;  else if(k &lt; T-&gt;key)    return BST_Insert(T-&gt;lchild,k);  else if(k &gt; T-&gt;key)    return BST_Insert(T-&gt;rchild, k);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【构造二叉排序树】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Create_BST(BiTree &amp;T, KeyType str[], int n) &#123;  T &#x3D; NULL;  int i &#x3D; 0;  while(i &lt; n)    BST_Insert(T, str[i++]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【删除】</strong></p><p>1 ）如果被删除的结点是叶结点，则直接删除</p><p>2）若被删除的结点z只有一颗子树，则让z的子树成为z父结点的子树，代替z结点</p><p>3）若被删除结点z有两棵子树，则让z的中序序列直接后继代替z，并删去直接后继结点</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉排序树（删除）.png" alt="二叉排序树删除节点流程"><p><strong>【查找效率】</strong></p><p>平均查找长度（ASL）取决于树的高度，O(log<sub>2</sub>n)，最坏是O(n)。</p><p>构造二叉排序时最好转成平衡二叉树，这样查找效率是最高的</p><h3 id="152-平衡二叉树"><a class="markdownIt-Anchor" href="#152-平衡二叉树"></a> 1.5.2 平衡二叉树</h3><ul><li><p>高度为h的最小平衡二叉树的结点数N<sub>h</sub> = N<sub>h-1</sub> + N<sub>h-2</sub> + 1</p></li><li><p>平衡二叉树的判断</p><blockquote><p>利用递归的后序遍历过程：</p><p>1）判断左子树是一棵平衡二叉树</p><p>2）判断右子树是一棵平衡二叉树</p><p>3）判断以该结点为根的二叉树为平衡二叉树。左子树和右子树均为平衡二叉树，且左右子树高度差的绝对值小于等于1，则平衡</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Judge_AVL(BiTree bt, int &amp;balance, int &amp;h) &#123;  int bl &#x3D; 0,br &#x3D; 0, hl &#x3D; 0, hr &#x3D; 0;  if(bt &#x3D;&#x3D; NULL) &#123;    h &#x3D; 0;    balance &#x3D; 1;  &#125; else if (bt-&gt;lchild &#x3D;&#x3D; NULL &amp;&amp; bt-&gt;rchild &#x3D;&#x3D; NULL) &#123;    h &#x3D; 1;    balance &#x3D; 1;  &#125; else &#123;    Judge_AVL(bt-&gt;lchild,bl,hl);    Judge_AVL(bt-&gt;rchild,br,hr);    if(hl &gt; hr)      h &#x3D; hl + 1;    else      h &#x3D; hr +1;    if(abs(hl - hr) &lt; 2 &amp;&amp; bl &#x3D;&#x3D; 1 &amp;&amp; br &#x3D;&#x3D; 1)      balance &#x3D; 1;    else       balance &#x3D; 0;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>平衡二叉树的插入</p><blockquote><p>先按照二叉排序树插入，然后进行平衡调整</p></blockquote><img alt="平衡二叉树平衡过程" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/平衡二叉树平衡过程.png"></li></ul><h3 id="153-哈夫曼树及哈夫曼编码"><a class="markdownIt-Anchor" href="#153-哈夫曼树及哈夫曼编码"></a> 1.5.3 哈夫曼树及哈夫曼编码</h3><p>==路径长度：==路径上所经历边的个数</p><p>==结点的权：==结点被赋予的数值</p><p>==树的带权路径长度WPL：==树中叶结点的带权路径长度之和，记为WPL=∑w<sub>i</sub>l<sub>i</sub></p><img alt="带权路径长度求和.png" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/带权路径长度求和.png"><p><strong>【哈夫曼树的构造方法】</strong></p><p>1）将n个结点作为n棵仅含有一个根结点的二叉树，构成森林F</p><p>2）生成一个新结点，并从F中找出根结点全值最小的两棵树作为它的左右子树，且新的结点权值为两棵子树根结点权值之和</p><p>3）从F中删除这两棵树，并将新生成的树加入到F中</p><p>4）重复2,3步，直到森林F中只有一棵树为止</p><img alt="哈夫曼树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/哈夫曼树.png"><p><strong>【哈夫曼编码】</strong></p><p>ABCDE后面的数字为权重，构造出哈夫曼树，然后令结点左边的边为0，右边的边为1，即可得到每个字母对应的哈夫曼编码</p><img alt="哈夫曼编码.png" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/哈夫曼编码.png"><h1 id="2-树和森林"><a class="markdownIt-Anchor" href="#2-树和森林"></a> 2 树和森林</h1><h2 id="21-树的存储结构"><a class="markdownIt-Anchor" href="#21-树的存储结构"></a> 2.1 树的存储结构</h2><h3 id="211-双亲表示法"><a class="markdownIt-Anchor" href="#211-双亲表示法"></a> 2.1.1 双亲表示法</h3><p>采用一组连续的存储空间来存储每个结点，同时在每个结点中增设一个伪指针，指示双亲结点在数组中的位置。根结点的下标为0，其伪指针域为-1</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAX_TREE_SIZE 100typedef struct &#123;  ELemType data;  int parent;&#125;PTNode;typedef struct &#123;  PTNode nodes[MAX_TREE_SIZE];  int n;&#125;PTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img alt="双亲表示法.png" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/双亲表示法.png"><h3 id="212-孩子表示法"><a class="markdownIt-Anchor" href="#212-孩子表示法"></a> 2.1.2 孩子表示法</h3><p>将每个结点的孩子结点都用单链表连接起来形成一个线性结构，n个结点具有n个孩子链表</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAX_TREE_SIZE 100&#x2F;&#x2F; 单链表中的结点typedef struct &#123;  int child;  struct CNode *next;&#125;CNode;&#x2F;&#x2F; 每一个结点存放的数据元素，以及链表第一个结点typedef struct &#123;  ElemType data;  struct Cnode *child;&#125;PNode;typedef struct &#123;  PNode nodes[MAX_TREE_SIZE];  int n;&#125;CTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img alt="孩子表示法" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/孩子表示法.png"><h3 id="213-孩子兄弟表示法"><a class="markdownIt-Anchor" href="#213-孩子兄弟表示法"></a> 2.1.3 孩子兄弟表示法</h3><p>以二叉链表作为树的存储结构，又称二叉树表示法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct CSNode &#123;  ElemType data;  struct CSNode *firstchild,*nextsibling;&#125;CSNode,CSTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img alt="孩子兄弟表示法" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/孩子兄弟表示法.png"><h3 id="214-三种表示法比较"><a class="markdownIt-Anchor" href="#214-三种表示法比较"></a> 2.1.4 三种表示法比较</h3><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>双亲表示法</td><td>寻找结点的双亲结点效率高</td><td>寻找结点的孩子结点效率低</td></tr><tr><td>孩子表示法</td><td>寻找结点的孩子结点效率高</td><td>寻找结点的双亲结点效率低</td></tr><tr><td>孩子兄弟表示法</td><td>寻找结点的孩子结点效率高，方便实现树转二叉树</td><td>寻找结点的双亲结点效率低</td></tr></tbody></table><h2 id="22-树-森林二叉树"><a class="markdownIt-Anchor" href="#22-树-森林二叉树"></a> 2.2 树、森林二叉树</h2><h3 id="221-树转二叉树"><a class="markdownIt-Anchor" href="#221-树转二叉树"></a> 2.2.1 树转二叉树</h3><p>规则：每个结点的左指针指向它的第一个孩子结点，右指针指向它在树中相邻兄弟结点。</p><p>【上图树转二叉树】</p><img alt="上图的树转二叉树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/树转二叉树.png"><h3 id="222-森林转二叉树"><a class="markdownIt-Anchor" href="#222-森林转二叉树"></a> 2.2.2 森林转二叉树</h3><p>规则：将每棵树转换为二叉树，将每棵二叉树的根一次作为上一棵二叉树的右子树</p><img alt="森林转二叉树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/森林转二叉树.png"><h3 id="223-树的遍历"><a class="markdownIt-Anchor" href="#223-树的遍历"></a> 2.2.3 树的遍历</h3><ul><li><p>先根遍历（类比二叉树的先序遍历）</p><p>树的先根遍历序列与这棵树对应的二叉树的先序遍历序列相同</p></li><li><p>后根遍历</p><p>后根遍历顺序类比二叉树的后序遍历，但是最后得到的遍历序列与该树对应的二叉树的中序遍历相同</p></li><li><p>层次遍历（类比二叉树的层次遍历）</p></li></ul><h3 id="224-森林的遍历"><a class="markdownIt-Anchor" href="#224-森林的遍历"></a> 2.2.4 森林的遍历</h3><ul><li><p>森林的先序遍历</p><img alt="森林的先序遍历" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/森林的先序遍历.png"></li><li><p>森林的中序遍历</p><img alt="森林的中序遍历" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/森林的中序遍历.png"></li></ul><img alt="森林、树、二叉树遍历序列的关系" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/森林、树、二叉树遍历序列的关系.png"><h2 id="23-树的应用并查集"><a class="markdownIt-Anchor" href="#23-树的应用并查集"></a> 2.3 树的应用–并查集</h2><p>并查集是一种简单的集合表示</p><ul><li>通常用树的<mark>双亲表示法</mark>作为并查集的存储结构</li><li>通常用数组元素的下标代表元素名，用根结点的下标代表子集合名，根结点的双亲结点为负数</li></ul><table><thead><tr><th>基本操作</th><th></th></tr></thead><tbody><tr><td>Initial(S)</td><td>将集合S中的每个元素都初始化为只有一个单元数的子集合</td></tr><tr><td>Union(S,Root1,Root2)</td><td>把集合S中的子集合(互不相交)Root2并入子集合Root1</td></tr><tr><td>Find(S,x)</td><td>查找集合S中单元数x所在子集合，并返回该孩子集合的名字</td></tr></tbody></table><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define SIZE 100int UFSets[SIZE];void Initial(int S[]) &#123;  for(int i &#x3D; 0; i &lt; size; i++) &#123;    S[i] &#x3D; -1;  &#125;&#125;int Find(int S[], int x) &#123;  while(S[x] &gt;&#x3D;0)    x &#x3D; S[x];  return x;&#125;void Union(int S[], int Root1, int Roo2) &#123;  S[Root2] &#x3D; Root1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">数据结构,树</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="blog.silverbeats.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>栈和队列</title>
    <link href="blog.silverbeats.cn/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>blog.silverbeats.cn/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2020-10-25T12:37:16.000Z</published>
    <updated>2020-10-25T13:52:56.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-栈"><a class="markdownIt-Anchor" href="#1-栈"></a> 1 栈</h1><h2 id="11-基本概念"><a class="markdownIt-Anchor" href="#11-基本概念"></a> 1.1 基本概念</h2><p>只允许在一端进行插入或删除操作的线性表，LIFO（后进先出）</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/栈和队列/栈.png"><table><thead><tr><th>基本操作</th><th>说明</th></tr></thead><tbody><tr><td>InitStack(&amp;S)</td><td>初始化空栈S</td></tr><tr><td>StackEmpty(S)</td><td>栈判空</td></tr><tr><td>Push(&amp;S,x)</td><td>压栈</td></tr><tr><td>Pop(&amp;S,&amp;x)</td><td>出栈，返回出栈元素</td></tr><tr><td>GetTop(S,&amp;x)</td><td>获取栈顶</td></tr><tr><td>ClearStack(&amp;S)</td><td>销毁栈</td></tr></tbody></table><h2 id="12-存储结构"><a class="markdownIt-Anchor" href="#12-存储结构"></a> 1.2 存储结构</h2><h3 id="121-顺序栈-采用顺序存储的栈"><a class="markdownIt-Anchor" href="#121-顺序栈-采用顺序存储的栈"></a> 1.2.1 顺序栈 采用顺序存储的栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxSize 50typedef struct &#123;  ElemType data[MaxSize];  int top;&#125;SqStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 栈空S.top &#x3D;&#x3D; -1;&#x2F;&#x2F; 栈满S.top &#x3D;&#x3D; MaxSize - 1;&#x2F;&#x2F; 栈长S.top + 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【栈判空】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool StackEmpty(SqStack S) &#123;  if(S.top &#x3D;&#x3D; -1) &#123;    return true;  &#125; else &#123;    return false;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【进栈】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool Push(SqStack &amp;S, ElemType x) &#123;  if(S.top &#x3D;&#x3D; MaxSize - 1) return false;  S.data[++S.top] &#x3D; x;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【出栈】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool Pop(SqStack &amp;S, ElemType &amp;x) &#123;  if(S.top &#x3D;&#x3D; -1) return false;  x &#x3D; S.data[S.top--];  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【读栈顶】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool GetTop(SqStack &amp;S, ElemType &amp;x) &#123;  if(S.top &#x3D;&#x3D; -1)return false;  x &#x3D; S.data[S.top];  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="122-共享栈"><a class="markdownIt-Anchor" href="#122-共享栈"></a> 1.2.2 共享栈</h3><p>将两个栈底设置在共享空间的两端，栈顶向空间中间延伸</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 判空0号栈：top &#x3D;&#x3D; -1;1号栈：top &#x3D;&#x3D; MaxSize;&#x2F;&#x2F; 栈满top1 - top0 &#x3D;&#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="123-链栈"><a class="markdownIt-Anchor" href="#123-链栈"></a> 1.2.3 链栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LinkNode() &#123;  ElemType data;  struct LinkNode *next;&#125; *LiStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-栈的应用"><a class="markdownIt-Anchor" href="#12-栈的应用"></a> 1.2 栈的应用</h2><h3 id="121-合法出栈个数"><a class="markdownIt-Anchor" href="#121-合法出栈个数"></a> 1.2.1 合法出栈个数</h3><p>f(n) =  C(2n,n) /（n+1）</p><h3 id="122-括号匹配"><a class="markdownIt-Anchor" href="#122-括号匹配"></a> 1.2.2 括号匹配</h3><p>【算法思想】</p><p>1）初始空栈，顺序读入括号</p><p>2）若是右括号，则弹出栈顶元素进行匹配。成功继续，失败return false</p><p>3）若是左括号，压栈</p><p>4）全部元素遍历结束后，栈非空，序列不合法</p><p>【代码】</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;string&#125; s * @return &#123;boolean&#125; */</span><span class="token keyword">let</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> letter <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token string">"("</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">"["</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">"&#123;"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">")"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">"]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"["</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">"&#125;"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token operator">!</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="123-表达式求值"><a class="markdownIt-Anchor" href="#123-表达式求值"></a> 1.2.3 表达式求值</h3><ul><li><p>中缀表达式（A+B）</p><pre class="line-numbers language-none"><code class="language-none">[(A+B)*C]-[E-F]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>前缀表达式（+AB）</p><pre class="line-numbers language-none"><code class="language-none">[(A+B)*C]-[E-F]&#x3D;&#x3D;&gt; [+AB * C] - [-EF]&#x3D;&#x3D;&gt; [*+ABC] - [-EF]&#x3D;&#x3D;&gt; -*+ABC-EF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后缀表达式（AB+）</p><pre class="line-numbers language-none"><code class="language-none">[(A+B)*C]-[E-F]&#x3D;&#x3D;&gt; [AB+*C] - [EF-]&#x3D;&#x3D;&gt; [AB+C*] - [EF-]&#x3D;&#x3D;&gt; AB+C*EF--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>【算法思想（中缀转后缀）】</strong></p><p>1）数字直接加入后缀表示</p><p>2）运算符：</p><ul><li>若为&quot;(&quot;，入栈</li><li>若为&quot;)&quot;，依次把栈中的运算符加入后缀表达式，直到出现&quot;(&quot;，并从栈中删除&quot;(&quot;</li><li>若为±*/<ul><li>栈空入栈</li><li>栈顶元素为&quot;(&quot;，入栈<ul><li>高于栈顶元素优先级，入栈</li><li>否则，依次弹出栈顶运算符，直到弹出优先级比它低的运算符或者&quot;(&quot;为止</li></ul></li></ul></li><li>遍历完成，栈非空，依次弹出所有元素</li></ul><h3 id="124-递归"><a class="markdownIt-Anchor" href="#124-递归"></a> 1.2.4 递归</h3><p>若一个函数、过程或数据结构的定义中又应用了它自身，则称为递归。</p><p>递归调用过程中，系统为每一层的返回点、局部变量、传入实参等开辟了递归工作栈进行数据存储，递归次数多了，容易造成栈溢出，通常情况下，递归效率不高</p><p>【斐波那契数列】</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int Fib(int n) &#123;  if(n &#x3D;&#x3D; 0)return 0;  else if(n &#x3D;&#x3D; 1)return 1;  else return Fib(n-1) + Fib(n-2);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-队列"><a class="markdownIt-Anchor" href="#2-队列"></a> 2 队列</h1><h2 id="21-基本概念"><a class="markdownIt-Anchor" href="#21-基本概念"></a> 2.1 基本概念</h2><p>只允许在表的一段进行插入，在另一端进行删除，先进先出（FIFO）</p><table><thead><tr><th>基本操作</th><th>说明</th></tr></thead><tbody><tr><td>InitQueue(&amp;Q)</td><td>初始化队列</td></tr><tr><td>QueueEmpty(Q)</td><td>判断</td></tr><tr><td>EnQueue(&amp;Q,x)</td><td>入队</td></tr><tr><td>DeQueue(&amp;Q,&amp;x)</td><td>出队</td></tr><tr><td>GetHead(Q,&amp;x)</td><td>读队头元素，非空返回队头</td></tr><tr><td>ClearQueue(&amp;Q)</td><td>销毁队列，释放队列Q占用的内存空间</td></tr></tbody></table><h2 id="22-存储结构"><a class="markdownIt-Anchor" href="#22-存储结构"></a> 2.2 存储结构</h2><h3 id="221-顺序存储"><a class="markdownIt-Anchor" href="#221-顺序存储"></a> 2.2.1 顺序存储</h3><p>front 指向队首元素</p><p>rear指向队尾元素的下一个位置</p><p>初始时：front == rear == 0</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxSize 50typedef struct &#123;  ElemType data[MaxSize];  int front,rear;&#125;SqQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>普通队列</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;队列判空条件Q.front &#x3D;&#x3D; Q.rear;&#x2F;&#x2F;队列对长Q.rear - Q.front;&#x2F;&#x2F;队满条件Q.rear &#x3D;&#x3D; MaxSize; &#x2F;&#x2F; 存在假溢出，可以使用循环队列来解决<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>循环队列</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/栈和队列/循环队列.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 出队列，front指针移动Q.front &#x3D; (Q.front +1)%MaxSize;&#x2F;&#x2F; 进队列，rear指针移动Q.rear &#x3D; (Q.rear + 1)%MaxSize;&#x2F;&#x2F; 队列长度(Q.rear + MaxSize - Q.front)%MaxSize;&#x2F;&#x2F; 对空条件Q.front &#x3D;&#x3D; Q.rear;&#x2F;&#x2F; 判断队满条件&lt;牺牲一个存储单元&gt;Q.front &#x3D;&#x3D; (Q.rear + 1)%MaxSize;&#x2F;&#x2F; 判断队满条件&lt;使用一个变量记录队列元素的个数&gt;Q.size &#x3D;&#x3D; MaxSize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【初始化】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InitQueue(SqQueue &amp;Q) &#123;  Q.rear &#x3D; Q.front &#x3D; 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>【判断队空】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool isEmpty(SqQueue Q) &#123;  if(Q.rear &#x3D;&#x3D; Q.front) &#123;    return true;  &#125; else &#123;    return false;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【入队】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool EnQueue(SqQueue &amp;Q, ElemType x) &#123;  &#x2F;&#x2F; 如果队满  if(Q.front &#x3D;&#x3D; (Q.rear + 1)%MaxSize)return false;  Q.data[Q.rear] &#x3D; x;  Q.rear &#x3D; (Q.rear + 1)%MaxSize;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【出队】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool DeQueue(SqQueue &amp;Q,ElemType &amp;x) &#123;  if(Q.rear &#x3D;&#x3D; Q.front)return false;  x &#x3D; Q.data[Q.front];  Q.front &#x3D; (Q.front + 1)%MaxSize;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="222-链式存储"><a class="markdownIt-Anchor" href="#222-链式存储"></a> 2.2.2 链式存储</h3><p>队头指针front，指向头结点，从链头出队列</p><p>链表尾指针rear，从链尾入队</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct &#123;ElemType data;  struct LinkNode *next;&#125;LinkNode;typedef struct &#123;  LinkNode *front, *rear;&#125;LinkQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【初始化】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InitQueue(LinkQueue &amp;Q) &#123;  Q.front &#x3D; (LinkNode *)malloc(sizeof(LinkNode));  Q.rear &#x3D; Q.front;  Q.front-&gt;next &#x3D; NULL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【入队列】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void EnQueue(LinkQueue &amp;Q, ElemType x) &#123;  &#x2F;&#x2F; 创建新结点  LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));  s-&gt;data &#x3D; x;  s-&gt;next &#x3D; Null;  Q.rear-&gt;next &#x3D; s;  Q.rear &#x3D; s;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【出队列】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool DeQueue(LinkQueue &amp;Q, ElemType &amp;x) &#123;  if(Q.front &#x3D;&#x3D; Q.rear) return false;  &#x2F;&#x2F; 存储被删除的结点  LinkNode *p &#x3D; Q.front-&gt;next;  x &#x3D; p-&gt;data;  Q.front-&gt;next &#x3D; p-&gt;next;  &#x2F;&#x2F; 针对队列中只有一个结点的情况  if(Q.rear &#x3D;&#x3D; p) Q.rear &#x3D; Q.front;  free(p);  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【判空】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool isEmpty(LinkQueue Q) &#123;  if(Q.front &#x3D;&#x3D; Q.rear)&#123;    return true;  &#125; else &#123;    return false;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="223-队列的应用"><a class="markdownIt-Anchor" href="#223-队列的应用"></a> 2.2.3 队列的应用</h3><ul><li><p>层次遍历</p></li><li><p>计算机系统</p></li></ul><h3 id="224-双端队列"><a class="markdownIt-Anchor" href="#224-双端队列"></a> 2.2.4 双端队列</h3><p>两端都可以进行入队和出队</p><ul><li>输出受限的双端队列</li><li>输入受限的双端队列</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/栈和队列/受限的双端队列.png"><h1 id="3-数组"><a class="markdownIt-Anchor" href="#3-数组"></a> 3 数组</h1><h2 id="31-数组的定义"><a class="markdownIt-Anchor" href="#31-数组的定义"></a> 3.1 数组的定义</h2><p><span style="color:blue;font-Size: 18px;"><strong>数组</strong></span>是由n（n&gt;=1）个相同类型的数据元素构成的有限序列，每个数据元素称为一个数组元素，每个元素受n个线性关系的约束，每个元素在n个线性关系中的序号称为下标（索引），并称该数组为n为数组。</p><p><mark><strong>数组是一种逻辑结构，是线性表的推广</strong></mark></p><h2 id="32-矩阵的压缩存储"><a class="markdownIt-Anchor" href="#32-矩阵的压缩存储"></a> 3.2 矩阵的压缩存储</h2><p>压缩存储：多个值相同的元素只分配一个存储空间，对零元素不分配存储空间</p><p>特殊矩阵：指具有许多相同元素或者零元素，并且呈现一定分布规律的矩阵。比如对称矩阵、反对称矩阵、单位阵</p><p>特殊矩阵的压缩存储：找出特殊矩阵中值相同的矩阵元素的分布规律，把呈现规律性分布、值相同的多个矩阵元素压缩存储到一个存储空间上。</p>]]></content>
    
    
    <summary type="html">数据结构,栈和队列</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="blog.silverbeats.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="blog.silverbeats.cn/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>blog.silverbeats.cn/%E7%BA%BF%E6%80%A7%E8%A1%A8/</id>
    <published>2020-10-25T12:24:31.000Z</published>
    <updated>2020-10-25T12:35:25.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-线性表的定义和基本操作"><a class="markdownIt-Anchor" href="#1-线性表的定义和基本操作"></a> 1 线性表的定义和基本操作</h1><h2 id="11-定义及特点"><a class="markdownIt-Anchor" href="#11-定义及特点"></a> 1.1 定义及特点</h2><p>【定义】</p><p>线性表是具有相同类型的n（n&gt;=0）个元素的有限序列（<mark>长度有限</mark>），其中n为表长，当n=0时，为空表。</p><p>若L命名为线性表，一般表示为：L = (a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,…,a<sub>i+1</sub>,a<sub>i+2</sub>,…a<sub>n</sub>)</p><p>【逻辑结构】</p><img data-src='http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/线性表-逻辑结构.png'><p>【特点】</p><ul><li>元素个数<span style="color:red"><u>有限</u></span></li><li>元素具有逻辑上的顺序性，序列中各个元素排序有<span style="color:red"><u>先后次序</u></span></li><li>表中元素都是<span style="color:red"><u>数据元素</u></span>，每个元素都是单个元素</li><li>表中元素的<span style="color:red"><u>数据类型相同</u></span></li><li>表中元素<span style="color:red"><u>具有抽象性</u></span>，讨论元素之间一对一的逻辑关系时，而不考虑元素究竟表示内容</li><li>线性表是<span style="color:red"><strong><u>逻辑结构</u></strong></span>，表示元素之间一对一相邻的关系</li></ul><h2 id="12-线性表九种基本操作"><a class="markdownIt-Anchor" href="#12-线性表九种基本操作"></a> 1.2 线性表九种基本操作</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>InitList(&amp;L)</td><td>初始化表。构造空的线性表</td></tr><tr><td>DestroyList(&amp;L)</td><td>销毁。销毁线性表，释放线性表L所占的内存空间</td></tr><tr><td>LocateElem(L,e)</td><td>按值查找。在表中L查找具有给定关键字值的元素</td></tr><tr><td>GetElem(L,i)</td><td>按位查找。获取表L中第i个位置的元素值</td></tr><tr><td>ListInsert(&amp;L,i,e)</td><td>插入。在L的第i个位置插入元素e(前插)</td></tr><tr><td>ListDelete(&amp;L,i,&amp;e)</td><td>删除。删除L中第i个位置的元素，并用e返回删除元素的值</td></tr><tr><td>PrintList(L)</td><td>输出。按前后顺序输出线性表L的所有元素值</td></tr><tr><td>Empty(L)</td><td>判空。空返回True</td></tr><tr><td>Length(L)</td><td>表长。即元素的个数。</td></tr></tbody></table><h1 id="2-线性表的顺序表示"><a class="markdownIt-Anchor" href="#2-线性表的顺序表示"></a> 2 线性表的顺序表示</h1><h2 id="21-顺序表的定义"><a class="markdownIt-Anchor" href="#21-顺序表的定义"></a> 2.1 顺序表的定义</h2><p>线性表的顺序存储又称<span style="color:#1f6bd5"><strong><u>顺序表</u></strong></span></p><p>一组地址连续存放的存储单元依次存放线性表元素，从而使得逻辑上相邻的两个元素，在物理位置上也相邻。</p><p>顺序表往往用数组来实现。</p><p>【数组与顺序表区别】</p><ol><li>顺序表下标从1开始，数组从0开始</li><li>顺序表容量可扩充，数组不能</li><li>顺序表是一维的，数组可以是多维的</li></ol><p>【顺序表程序语言描述—C语言】</p><ul><li>数组静态分配</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数组动态分配</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  ElemType <span class="token operator">*</span>data<span class="token punctuation">;</span>  <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">L<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>Elemtype<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token operator">*</span>InitSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="22-顺序表的基本操作"><a class="markdownIt-Anchor" href="#22-顺序表的基本操作"></a> 2.2 顺序表的基本操作</h2><p>【插入操作】</p><p>将插入位置后面的元素向后挪动。</p><ul><li>MaxSize是数组最大容量</li><li>Length是顺序表的长度，在这里的作用和ArrayList中的size是一样 ，表示当前数组元素的个数，并非数组的长度。</li><li>这里的插入是向顺序表插入，顺序表下标从1开始，因为是用数组实现该顺序表（下标从0开始），所以在插入时，需要减1。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListInsert(SqList &amp;L, int pos, ElemType e) &#123;  if(pos &lt; 1 || pos &gt; L.length + 1) return false;  if(L.length &gt;&#x3D; MaxSize) return false;  for(int j &#x3D; L.length; j &gt;&#x3D; pos; j--) &#123;    L.data[j] &#x3D; L.data[j-1];  &#125;  L.data[pos - 1] &#x3D; e;  L.length++;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>最好时间复杂度</th><th>平均时间复杂度</th><th>最坏时间复杂度</th></tr></thead><tbody><tr><td>O(1)</td><td>O(n)</td><td>o(n)</td></tr></tbody></table><p>【删除操作】</p><p>将被删除位置的后面元素向前移动，进行覆盖</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListDelete(SqList &amp;L, int pos, ElemType &amp;e) &#123;  &#x2F;&#x2F; 判断合法性  if(pos &lt; 1 || pos &gt; L.length)return false;  &#x2F;&#x2F; 保存被删除的元素  e &#x3D; L.data[pos - 1];  for(int i &#x3D; pos; i &lt; L.length; i++) &#123;    L.data[i - 1] &#x3D; L.data[i];  &#125;  L.length--;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>最好时间复杂度</th><th>平均时间复杂度</th><th>最坏时间复杂度</th></tr></thead><tbody><tr><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><p>【按值查找】</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int LocateElem(SqList L, ElemType e) &#123;  for(int i &#x3D; 0; i &lt; L.length; i++) &#123;    if(L.data[i] &#x3D;&#x3D; e)return i + 1;  &#125;  return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>最好时间复杂度</th><th>平均时间复杂度</th><th>最坏时间复杂度</th></tr></thead><tbody><tr><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h1 id="3-线性表的链式表示"><a class="markdownIt-Anchor" href="#3-线性表的链式表示"></a> 3 线性表的链式表示</h1><h2 id="31-单链表定义"><a class="markdownIt-Anchor" href="#31-单链表定义"></a> 3.1 单链表定义</h2><p>线性表的链式存储称为<span style="color:#1f6bd5"><strong><u>单链表</u></strong></span>，通过指针来实现线性的逻辑关系</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LNode&#123;  ElemType data;  struct LNode *next;&#125;LNode, *LinkList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>【头结点的优点】</p><ul><li>链表的第一个位置和其他位置的操作统一</li><li>空表和非空表操作统一</li></ul><h2 id="32-单链表的基本操作"><a class="markdownIt-Anchor" href="#32-单链表的基本操作"></a> 3.2 单链表的基本操作</h2><p><strong>【头插法建立单链表】</strong></p><pre class="line-numbers language-none"><code class="language-none">s-&gt;next &#x3D; L-&gt;next;L-&gt;next &#x3D; s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList List_HeadInsert(LinkList &amp;L) &#123;  LNode *s; int x;  L &#x3D; (LinkList)malloc(sizeof(LNode));  L-&gt;next &#x3D; NULL;  scanf(&quot;%d&quot;,&amp;x);  while(x !&#x3D; 9999) &#123;    s &#x3D; (LNode*)malloc(sizeof(LNode));    s-&gt;data &#x3D; x;    s-&gt;next &#x3D; L-&gt;next;    L-&gt;next &#x3D; s;    scanf(&quot;%d&quot;,&amp;x);  &#125;  return L;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【尾插法建立单链表】</strong></p><p>要有一个尾指针r</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList List_TailInsert(LinkList &amp;L) &#123;  int x;  L &#x3D; (LinkList)malloc(sizeof(LNode));  LNode *s, *r &#x3D; L;  scanf(&quot;%d&quot;,&amp;x);  while(x !&#x3D; 9999) &#123;    s &#x3D; (LNode*)malloc(sizeof(LNode));    s-&gt;data &#x3D; x;    r-&gt;next &#x3D; s;    r &#x3D; s;    scanf(&quot;%d&quot;,&amp;x);  &#125;  r-&gt;next &#x3D; NULL;  return L;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【按序号查找&amp;&amp;按值查找】</strong></p><p>都需要遍历单链表，但是按序号查找需要用到一个变量来记录当前结点的序号</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 按序号查找LNode *GetElem(LinkList L, int i) &#123;  &#x2F;&#x2F; 记录序号的变量  int count &#x3D; 1;  &#x2F;&#x2F; p当前指向第一个结点  LNode *p &#x3D; L-&gt;next;  if(i &#x3D;&#x3D; 0)return L;  if(i &lt; 1)return NULL;  while(p&amp;&amp;count&lt;i) &#123;    count++;    p &#x3D; p-&gt;next;  &#125;  return p;&#125;&#x2F;&#x2F; 按值查找LNode *LocateElem(LinkList L, ElemType e) &#123;  LNode *p &#x3D; L-&gt;next;  while(p!&#x3D;NULL&amp;&amp;p-&gt;data!&#x3D;e) &#123;    p&#x3D;p-&gt;next;  &#125;  return p;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【插入结点】</strong></p><p>插入有前插法（在插入位置的前面插入，需要获取插入位置的前一个结点地址）和后插法（在插入位置的后面插入，需要获取插入位置的地址）之分。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/头插法和后插法.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 前插法pre &#x3D; GetElem(L,i-1);&#x2F;&#x2F; 获取插入位置的结点的前一个s-&gt;next &#x3D; pre-&gt;next;&#x2F;&#x2F; s是要插入结点的指针pre-&gt;next &#x3D; s;&#x2F;&#x2F; 后插法p &#x3D; GetElem(L,i);s-&gt;next &#x3D; p-&gt;next;p-&gt;next &#x3D; s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>后插法可以转换为前插法</mark></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 1. 先后插法p &#x3D; GetElem(L,i);s-&gt;next &#x3D; p-&gt;next;p-&gt;next &#x3D; s;&#x2F;&#x2F; 临时变量存储要插入的结点数据ElemType temp &#x3D; s-&gt;data;&#x2F;&#x2F; 2. 交换数据s-&gt;data &#x3D; p-&gt;data;p-&gt;data &#x3D; temp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【删除结点】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pre &#x3D; GetElem(L, i-1);&#x2F;&#x2F; 获取要删除位置的结点的前一个q &#x3D; pre-&gt;next;pre-&gt;next &#x3D; pre-&gt;next-&gt;next;free(q);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【求表长】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int count &#x3D; 0;p &#x3D; head;while(p-&gt;next !&#x3D; NULL) &#123;  count++;  p &#x3D; p-&gt;next;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【判空】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">head-&gt;next &#x3D;&#x3D; NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="33-几种常用的链表"><a class="markdownIt-Anchor" href="#33-几种常用的链表"></a> 3.3 几种常用的链表</h2><h3 id="331-双向链表"><a class="markdownIt-Anchor" href="#331-双向链表"></a> 3.3.1 双向链表</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/双向链表.png"><p><strong>【插入】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">s-&gt;next &#x3D; p-&gt;next;p-&gt;next-&gt;prior &#x3D; s;s-&gt;prior &#x3D; p;p-&gt;next &#x3D; s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【删除】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 存储被删除的结点（已知被删除结点的前驱结点地址）LNode *temp &#x3D; p-&gt;next;p-&gt;next-&gt;next-&gt;prior &#x3D; p;p-&gt;next &#x3D; p-&gt;next-&gt;next;free(temp);&#x2F;&#x2F; 存储被删除的结点（已知被删除结点地址）LNode *temp &#x3D; p;p-&gt;prior-&gt;next &#x3D; p-&gt;next;p-&gt;next-&gt;prior &#x3D; p-&gt;prior;free(temp);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="332-循环链表"><a class="markdownIt-Anchor" href="#332-循环链表"></a> 3.3.2 循环链表</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/循环单链表.png"><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/循环双向链表.png"><h3 id="33-静态链表"><a class="markdownIt-Anchor" href="#33-静态链表"></a> 3.3. 静态链表</h3><p>用数组实现链式存储</p><h1 id="4-顺序表与链表对比"><a class="markdownIt-Anchor" href="#4-顺序表与链表对比"></a> 4 顺序表与链表对比</h1><table><thead><tr><th>区别</th><th>顺序表</th><th>单链表</th></tr></thead><tbody><tr><td>存取方式</td><td>顺序存取和随机存取</td><td>顺序存取</td></tr><tr><td>逻辑结构和物理结构</td><td>逻辑相邻物理上也相邻，通过相邻表示逻辑关系</td><td>逻辑连续，物理上不一定连续，通过指针表示逻辑关系</td></tr><tr><td>插入操作</td><td>挪动元素O(n)</td><td>修改指针O(n)，已知插入位置O(1)</td></tr><tr><td>删除操作</td><td>挪动元素O(n)</td><td>修改指针O(n)，已知删除位置O(1)</td></tr><tr><td>查找操作</td><td>按值O(n)和按下标O(1)</td><td>按值、按下标都是O(n)</td></tr><tr><td>内存空间</td><td>静态分配，容量定死，太大太小都不好<br>动态分配，扩充需要移动大量元素，效率低下</td><td>按需分配，但指针的存储需要额外的空间</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">数据结构,线性表部分</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="blog.silverbeats.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>课外书</title>
    <link href="blog.silverbeats.cn/%E8%AF%BE%E5%A4%96%E4%B9%A6/"/>
    <id>blog.silverbeats.cn/%E8%AF%BE%E5%A4%96%E4%B9%A6/</id>
    <published>2020-10-24T11:19:20.000Z</published>
    <updated>2020-10-24T11:43:19.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-语言相关"><a class="markdownIt-Anchor" href="#1-语言相关"></a> 1 语言相关</h1><h2 id="11-java"><a class="markdownIt-Anchor" href="#11-java"></a> 1.1 Java</h2><ul><li><a href="https://pan.baidu.com/s/1wt3zH-_r770xySpbBGb-Jw">3y教你学java</a>（提取码：vzs2）</li><li><a href="https://pan.baidu.com/s/1uwhkr1eddD-xdUhwP4vSbQ">Effective Java 原书第三版</a>（提取码：4f4l ）</li><li></li></ul><h2 id="12-javascript"><a class="markdownIt-Anchor" href="#12-javascript"></a> 1.2 JavaScript</h2><ul><li><a href="https://pan.baidu.com/s/1YWxoT-n0PopRPUslmSfrxQ">阮一峰 ES6</a> （提取码：kgp9 ）</li><li><a href="https://pan.baidu.com/s/16GyNcqoPxWYHuQvBrFztVQ">Javascript高级程序设计</a>（提取码：ic9o）</li><li><a href="https://pan.baidu.com/s/1cOUWovvcq7EbI3cEts0LkA">JavaScript设计模式—张容铭</a>（提取码：i41t）</li><li>[<a href="https://pan.baidu.com/s/1A2Ww88GSVswgzWD3tAMmPA">JavaScript设计模式—Ross Harmes</a>（提取码：23uw）</li><li><a href="https://pan.baidu.com/s/1d_Z5Euyhqey8XCZIopFi9Q">编写可维护的JavaScript</a>（提取码：asjn）</li><li><a href=""></a></li></ul><h1 id="2-web"><a class="markdownIt-Anchor" href="#2-web"></a> 2 Web</h1><ul><li><a href="https://pan.baidu.com/s/1rARXGS-sJspYDj5XOv55rA">图解HTTP</a>（提取码：vybw）</li><li><a href=""></a></li><li><a href=""></a></li></ul><h1 id="3-版本控制"><a class="markdownIt-Anchor" href="#3-版本控制"></a> 3 版本控制</h1><ul><li><a href="https://pan.baidu.com/s/1n02pT3qMVI3eI0C_Ty7riA">GitHub入门与实践 </a>（提取码：yxcl）</li></ul><h1 id="4-服务器"><a class="markdownIt-Anchor" href="#4-服务器"></a> 4 服务器</h1><ul><li><a href="http://tengine.taobao.org/book/index.html">Nginx开发从入门到精通</a> (淘宝团队出品)</li><li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/">Nginx教程从入门到精通</a>(PDF版本，运维生存时间出品)</li></ul><h1 id="5-设计模式"><a class="markdownIt-Anchor" href="#5-设计模式"></a> 5 设计模式</h1><ul><li><a href="https://pan.baidu.com/s/16zKfTP3FZRL1wXxco3vkZA">设计模式_可复用面向对象软件的基础 C/C++</a>（提取码：6l3a）</li></ul><h1 id="6-分布式系统"><a class="markdownIt-Anchor" href="#6-分布式系统"></a> 6 分布式系统</h1><ul><li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf">走向分布式</a></li></ul>]]></content>
    
    
    <summary type="html">课外书汇总</summary>
    
    
    
    <category term="书籍" scheme="blog.silverbeats.cn/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="书籍" scheme="blog.silverbeats.cn/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="blog.silverbeats.cn/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>blog.silverbeats.cn/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-24T05:31:01.000Z</published>
    <updated>2020-10-25T13:42:29.503Z</updated>
    
    <content type="html"><![CDATA[<p>推荐文章：</p><ul><li><a href="https://blog.csdn.net/weixin_36586120/article/details/105522491">你知道吗？枚举单例模式是世界上最好的单例模式！！！</a></li><li><a href="https://blog.csdn.net/fvdfsdafdsafs/article/details/88541909">https://blog.csdn.net/fvdfsdafdsafs/article/details/88541909</a></li></ul><h1 id="1-饿汉式单例"><a class="markdownIt-Anchor" href="#1-饿汉式单例"></a> 1 饿汉式单例</h1><ul><li><p>构造器私有化</p></li><li><p>JVM保证线程安全</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>不管是否使用，一上来就会加载对象，会浪费空间</p></li><li><p>反射可破坏单例</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon01</span> <span class="token punctuation">&#123;</span><span class="token comment">// 构造器私有</span><span class="token keyword">private</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 类加载到内存后,就实例化一个单例,JVM保证线程安全</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingleTon01</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon01</span> <span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-反射破坏单例"><a class="markdownIt-Anchor" href="#11-反射破坏单例"></a> 1.1 反射破坏单例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testsingle01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 获取SingleTon01的Class属性</span>  <span class="token class-name">Class</span> singleTon01Class <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.silverbeats.singleton.SingleTon01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过正常方式获取instance1,instance2</span>  <span class="token class-name">SingleTon01</span> instance1 <span class="token operator">=</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">.</span><span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SingleTon01</span> instance2 <span class="token operator">=</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">.</span><span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取该Class的无参构造器</span>  <span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">=</span> singleTon01Class<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 破坏构造器私有</span>  declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过反射创建instance3和instance4</span>  <span class="token class-name">SingleTon01</span> instance3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon01</span><span class="token punctuation">)</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SingleTon01</span> instance4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon01</span><span class="token punctuation">)</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出instance1、instance2、instance3、instance4的地址</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果：</p><pre class="line-numbers language-none"><code class="language-none">com.silverbeats.singleton.SingleTon01@504bae78com.silverbeats.singleton.SingleTon01@504bae78com.silverbeats.singleton.SingleTon01@3b764bcecom.silverbeats.singleton.SingleTon01@759ebb3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可知，通过非反射的方式获取的instance1和instance2是同一个对象，符合单例。但是通过==<strong>反射</strong>==可以创建多个对象，破坏单例的效果，如instance3和instance4，都是不同于instance1的对象实例。</p><h2 id="12-序列化破坏单例"><a class="markdownIt-Anchor" href="#12-序列化破坏单例"></a> 1.2 序列化破坏单例</h2><p>倘若该单例实现了序列化接口<code>java.io.Serializable</code>，会被序列化反序列化破坏单例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serializeSingle01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SingleTon01</span> instance <span class="token operator">=</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">.</span><span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// instance序列化输出流</span>  <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/singleton01.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 序列化</span>  objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭输出流</span>  fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个对象用来接收反序列化的结果</span>  <span class="token class-name">SingleTon01</span> instance2<span class="token punctuation">;</span>  <span class="token comment">// instance反序列化,输入流</span>  <span class="token class-name">FileInputStream</span> fileIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/singleton01.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反序列化</span>  instance2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon01</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭输入流</span>  in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fileIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否是同一个对象</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-懒汉式写法一"><a class="markdownIt-Anchor" href="#2-懒汉式写法一"></a> 2 懒汉式：写法一</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon02</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon02</span> INSTANCE<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon02</span> <span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 倘若没有创建,则创建对象</span><span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* 这里可以加线程睡眠,模拟效果 */</span>INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-懒汉式写法二"><a class="markdownIt-Anchor" href="#3-懒汉式写法二"></a> 3 懒汉式：写法二</h1><p>加锁，方法锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingleTon02</span> <span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 这里可以加线程睡眠,模拟效果 */</span>    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-懒汉式写法三"><a class="markdownIt-Anchor" href="#3-懒汉式写法三"></a> 3 懒汉式：写法三</h1><p>==<strong>双重检查</strong>==单例。添加volatile保证创建对象是原子性，防止指令重排</p><blockquote><p>创建对象的过程：</p><ul><li>分配内存空间</li><li>执行构造方法，初始化对象</li><li>把对象指向这个空间</li></ul><p>上面三个步骤，可能会出现指令重排现象,导致线程不安全</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon02</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// volatile保证创建对象是原子性</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">SingleTon02</span> INSTANCE<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon02</span> <span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon02</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 这里可以加线程睡眠,模拟效果 */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-懒汉式写法四"><a class="markdownIt-Anchor" href="#4-懒汉式写法四"></a> 4 懒汉式：写法四</h1><p><mark><strong>枚举类</strong></mark></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EnumClass</span> <span class="token punctuation">&#123;</span>INSTANCE<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EnumClass</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**多线程测试：**通过,打印的都是同一个hashCode</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SingleTon03</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**反射测试：**结果报错，无法创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> singleTon01Class <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.silverbeats.singleton.SingleTon03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取无参构造器</span><span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">=</span> singleTon01Class<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 破坏私有</span>declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建对象</span><span class="token class-name">SingleTon01</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon01</span><span class="token punctuation">)</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>序列化测试：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serializeEnumClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">EnumClass</span> instance <span class="token operator">=</span> <span class="token class-name">EnumClass</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>  <span class="token comment">// instance序列化输出流</span>  <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/enumInstance.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 序列化</span>  objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭输出流</span>  fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个对象用来接收反序列化的结果</span>  <span class="token class-name">EnumClass</span> instance2<span class="token punctuation">;</span>  <span class="token comment">// instance反序列化,输入流</span>  <span class="token class-name">FileInputStream</span> fileIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/enumInstance.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反序列化</span>  instance2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EnumClass</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭输入流</span>  in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fileIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否是同一个对象</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="41-防止反射的原因"><a class="markdownIt-Anchor" href="#41-防止反射的原因"></a> 4.1 防止反射的原因</h2><p>反射newInstance方法中有这样一段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span>ENUM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot reflectively create enum objects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可知，枚举类型不可被创建，故可以防反射破坏枚举单例。枚举类型最终反编译源码中没有无参构造器，有一个接受string和int两个参数的有参构造器</p><h2 id="42-防序列化的原因"><a class="markdownIt-Anchor" href="#42-防序列化的原因"></a> 4.2 防序列化的原因</h2><p>Java的序列化专门对枚举的序列化做了规定，在序列化时，只是将枚举对象的name属性输出到结果中，在反序列化时通过<code>java.lang.Enum</code>的<code>valueOf</code>方法根据名字查找对象，而不是新建一个新的对象，所以防止了反序列化对单例的破坏。</p><p>可以查看<code>java.io.ObjectInputStream#readObject</code>验证。<code>readObject</code>判断到枚举类时，调用的了这个方法<code>java.io.ObjectInputStream#readEnum</code></p><p>jdk文档：</p><blockquote><p>枚举常数的反序列化与普通可序列化或外部化对象不同。 枚举常数的序列化形式仅由其名称组成;  不传输常数的字段值。 要反序列化枚举常量，ObjectInputStream从流中读取常量名称;  然后通过使用枚举常量的基本类型和接收的常量名称作为参数调用静态方法<code>Enum.valueOf(Class, String)</code>获得反序列化常数。  像其他可序列化或可外部化的对象一样，枚举常量可以作为随后在序列化流中出现的反向引用的目标。  枚举常量被反序列化的过程无法自定义：在反序列化期间将忽略由枚举类型定义的任何特定于类的readObject，readObjectNoData和readResolve方法。  类似地，任何serialPersistentFields或serialVersionUID字段声明也被忽略 -  所有枚举类型都有一个固定的serialVersionUID为0L。</p></blockquote><h1 id="5-单例模式总结"><a class="markdownIt-Anchor" href="#5-单例模式总结"></a> 5 单例模式总结</h1><table><thead><tr><th>单例写法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>饿汉式</td><td>JVM保证线程安全</td><td>①浪费空间；<br/>②反射可以破坏单例<br/>③序列化可以破坏单例</td></tr><tr><td>懒汉式：写法一</td><td>需要的时候创建，避免空间的浪费</td><td>①线程不安全；<br/>②反射可破坏单例<br/>③序列化可以破坏单例</td></tr><tr><td>懒汉式：写法二</td><td>①需要的时候创建，避免空间的浪费<br/>②线程安全</td><td>①因为加锁，影响效率；<br/>②反射可破坏单例<br/>③序列化可以破坏单例</td></tr><tr><td>懒汉式：写法三</td><td>①需要的时候创建，避免空间的浪费<br/>②线程安全</td><td>①比上面的写法效率会高一些；<br>②反射破坏单例<br/>③序列化可以破坏单例</td></tr><tr><td>懒汉式：写法四</td><td>①需要的时候创建，避免空间的浪费<br/>②线程安全<br/>③没有锁，效率高<br/>④防反射、防序列化</td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">单例模式</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    <category term="设计模式" scheme="blog.silverbeats.cn/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="blog.silverbeats.cn/tags/java/"/>
    
    <category term="设计模式" scheme="blog.silverbeats.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23种设计模式概述</title>
    <link href="blog.silverbeats.cn/GOF23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
    <id>blog.silverbeats.cn/GOF23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</id>
    <published>2020-10-23T14:07:56.000Z</published>
    <updated>2020-11-09T08:17:12.631Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解</p><h1 id="1-优点"><a class="markdownIt-Anchor" href="#1-优点"></a> 1 优点</h1><ul><li>可以提高思维能力、编程能力和设计能力</li><li>程序设计更加标准化、编码编制更加工程化，使软件开发效率提高，缩短开发周期</li><li>使代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强</li></ul><h1 id="2-基本要素"><a class="markdownIt-Anchor" href="#2-基本要素"></a> 2 基本要素</h1><ul><li>模式名称</li><li>问题</li><li>解决方案</li><li>效果</li></ul><h1 id="3-分类"><a class="markdownIt-Anchor" href="#3-分类"></a> 3 分类</h1><h2 id="31-创建型模式"><a class="markdownIt-Anchor" href="#31-创建型模式"></a> 3.1 创建型模式</h2><p>单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</p><h2 id="32-构建型模式"><a class="markdownIt-Anchor" href="#32-构建型模式"></a> 3.2 构建型模式</h2><p>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</p><h2 id="33-行为模式"><a class="markdownIt-Anchor" href="#33-行为模式"></a> 3.3 行为模式</h2><p>模板方法模式，命令模式，迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</p><h1 id="4-面向对象oop七大原则"><a class="markdownIt-Anchor" href="#4-面向对象oop七大原则"></a> 4 面向对象OOP七大原则</h1><ol><li>开闭原则：对扩展开放，对修改关闭</li><li>里氏替换原则：继承必须确保超类所拥有的性质在之类中仍然成立。不要破坏继承关系。</li><li>依赖倒置原则：<mark>要面向接口编程</mark>，不要面向实现编程</li><li>单一职责原则：控制类的粒度大小、将对象解耦、提高其内聚性。<mark>要求每个类的职责单一。</mark></li><li>接口隔离原则：要为各类建立它们需要的专用接口。<mark>保证接口的精简和单一。</mark></li><li>迪米特法则：只与你的直接朋友交谈，不跟陌生人说话。<mark>降低程序之间的耦合度</mark></li><li>合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系实现</li></ol><h1 id="5-创建型模式"><a class="markdownIt-Anchor" href="#5-创建型模式"></a> 5 创建型模式</h1><ul><li><a href="/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" title="单例模式">单例模式</a></li><li><a href="#">Post not found: 工厂模式 工厂模式</a></li><li><a href="#">Post not found: 抽象工厂模式 抽象工厂模式</a></li><li><a href="#">Post not found: 建造者模式 建造者模式</a></li><li><a href="#">Post not found: 原型模式 原型模式</a></li></ul><h1 id="6-构建型模式"><a class="markdownIt-Anchor" href="#6-构建型模式"></a> 6 构建型模式</h1><ul><li><a href="#">Post not found: 适配器模式 适配器模式</a></li><li><a href="#">Post not found: 桥接模式 桥接模式</a></li><li><a href="#">Post not found: 装饰模式 装饰模式</a></li><li><a href="#">Post not found: 组合模式 组合模式</a></li><li><a href="#">Post not found: 外观模式 外观模式</a></li><li><a href="#">Post not found: 享元模式 享元模式</a></li><li><a href="/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/" title="代理模式">代理模式</a></li></ul>]]></content>
    
    
    <summary type="html">java23种设计模式详解</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    <category term="设计模式" scheme="blog.silverbeats.cn/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="blog.silverbeats.cn/tags/java/"/>
    
    <category term="设计模式" scheme="blog.silverbeats.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构题目</title>
    <link href="blog.silverbeats.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E7%9B%AE/"/>
    <id>blog.silverbeats.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E7%9B%AE/</id>
    <published>2020-10-21T01:56:26.000Z</published>
    <updated>2020-10-28T14:01:27.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-线性表"><a class="markdownIt-Anchor" href="#1-线性表"></a> 1 线性表</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLinearNode</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> elemData<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">SingleLinearNode</span> next<span class="token punctuation">;</span>  <span class="token comment">// 以及get、set方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-单链表原地逆置"><a class="markdownIt-Anchor" href="#11-单链表原地逆置"></a> 1.1 单链表原地逆置</h2><blockquote><p>单链表原地逆置（假定需要逆置的单链表不含头结点）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">reverseLinear</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SingleLinearNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinearNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> lp<span class="token punctuation">;</span>  lp <span class="token operator">=</span> linear<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    temp <span class="token operator">=</span> lp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">;</span>    lp <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-将两个有序的单链表合并合并后结果仍然有序"><a class="markdownIt-Anchor" href="#12-将两个有序的单链表合并合并后结果仍然有序"></a> 1.2 将两个有序的单链表合并，合并后结果仍然有序</h2><blockquote><p>将两个有序的单链表合并，合并后结果仍然有序（假定两个链表不含头结点并非减）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">combineTwoLinear</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear1<span class="token punctuation">,</span> <span class="token class-name">SingleLinearNode</span> linear2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SingleLinearNode</span> p1 <span class="token operator">=</span> linear1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> linear2<span class="token punctuation">;</span>  <span class="token class-name">SingleLinearNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinearNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hp <span class="token operator">=</span> head<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getElemData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span><span class="token function">getElemData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>      hp <span class="token operator">=</span> p1<span class="token punctuation">;</span>      p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>      hp <span class="token operator">=</span> p2<span class="token punctuation">;</span>      p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果某个链表还有节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-现有两个递增单链表要求合并后递减"><a class="markdownIt-Anchor" href="#13-现有两个递增单链表要求合并后递减"></a> 1.3 现有两个递增单链表，要求合并后递减</h2><blockquote><p>现有两个递增单链表，要求合并后递减，含关键字的节点需要利用原有的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token class-name">MergeDiminishing</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear1<span class="token punctuation">,</span> <span class="token class-name">SingleLinearNode</span> linear2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">reverseLinear</span><span class="token punctuation">(</span><span class="token function">combineTwoLinear</span><span class="token punctuation">(</span>linear1<span class="token punctuation">,</span> linear2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="14-一个数组正数负数混合以最快的速度将所有的负数挪到整个数组的最前面"><a class="markdownIt-Anchor" href="#14-一个数组正数负数混合以最快的速度将所有的负数挪到整个数组的最前面"></a> 1.4 一个数组正数负数混合，以最快的速度将所有的负数挪到整个数组的最前面</h2><blockquote><p>一个数组，其中有正数和负数，以最快的速度将所有的负数挪到整个数组的最前面</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">negativeFrontPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// left表示负数存储的下标,right表示正数的位置</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>left<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span>right<span class="token punctuation">;</span>    <span class="token comment">// 经过两个while,left的位置是正数,right的位置是负数,进行交换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>left<span class="token punctuation">;</span>    <span class="token operator">--</span>right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-一个递增有序数组以最快的方式找到某个值找到则将该值与后继进行交换找不到则插入"><a class="markdownIt-Anchor" href="#15-一个递增有序数组以最快的方式找到某个值找到则将该值与后继进行交换找不到则插入"></a> 1.5 一个递增有序数组，以最快的方式找到某个值，找到则将该值与后继进行交换，找不到则插入</h2><blockquote><p>一个递增有序数组，以最快的方式找到某个值，找到则将该值与后继进行交换，找不到则插入</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findSwapOrInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>target<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 二分查找</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果找到了</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果没找到</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 此时i就是插入位置</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> newArr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-判断某单链表前n个字符是否是中心对称"><a class="markdownIt-Anchor" href="#16-判断某单链表前n个字符是否是中心对称"></a> 1.6 判断某单链表前n个字符是否是中心对称</h2><blockquote><p>判断某单链表前n个字符是否是中心对称</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCenterSymmetry</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 先统计linear有多少个节点</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token class-name">SingleLinearNode</span> lp <span class="token operator">=</span> linear<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">++</span>count<span class="token punctuation">;</span>    lp <span class="token operator">=</span> lp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 可能会出现链表4个节点,让判断前5个乃至更多是否中心对称</span>  <span class="token keyword">int</span> realN <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个数组用来存储linear前realN个关键字</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>realN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> realN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> linear<span class="token punctuation">.</span><span class="token function">getElemData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    linear <span class="token operator">=</span> linear<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 定义左右指针</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> realN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否中心对称</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!=</span> arr<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-删除不带头结点的单链表begin位置后的len个节点"><a class="markdownIt-Anchor" href="#17-删除不带头结点的单链表begin位置后的len个节点"></a> 1.7 删除不带头结点的单链表，begin位置后的len个节点</h2><blockquote><p>删除不带头结点的单链表，begin位置后的len个节点</p></blockquote><ul><li>begin = 0：从单链表第一个节点开始删</li><li>begin = 1：从单链表第二个位置开始删除，第一个节点保留</li><li>……</li><li>起始位置超出链表长度：报错</li><li>能删除的节点数量不足len个：有多少删多少</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">deleteNodeFrom</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"deleteNodeFrom参数错误,begin需要≥0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"deleteNodeFrom参数错误,len需要≥0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>linear <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 令传递过来的单链表配上一个头结点</span>  <span class="token class-name">SingleLinearNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinearNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hp <span class="token operator">=</span> head<span class="token punctuation">;</span>  head<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>linear<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> begin <span class="token operator">&amp;&amp;</span> hp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> hp <span class="token operator">=</span> hp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>hp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"起始位置超出链表长度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此时,从hp后面的节点开始计数len个要删除</span>  <span class="token class-name">SingleLinearNode</span> temp <span class="token operator">=</span> hp<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此时temp指向被删除的最后一个节点</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 说明能删的不够len个</span>  <span class="token keyword">else</span> hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-定位到单链表中某个位置"><a class="markdownIt-Anchor" href="#18-定位到单链表中某个位置"></a> 1.8 定位到单链表中某个位置</h2><ul><li>如果需要定位的位置超过链表长度：返回null</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">getPos</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"getPos参数错误,position需要≥1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>linear <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token class-name">SingleLinearNode</span> lp <span class="token operator">=</span> linear<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pos <span class="token operator">&amp;&amp;</span> lp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    lp <span class="token operator">=</span> lp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> lp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-删除linear1自begin后面的len个节点并将linear1剩余的节点插入到linear2第insertpos位置之前"><a class="markdownIt-Anchor" href="#19-删除linear1自begin后面的len个节点并将linear1剩余的节点插入到linear2第insertpos位置之前"></a> 1.9 删除linear1自begin后面的len个节点,并将linear1剩余的节点插入到linear2第insertPos位置之前</h2><blockquote><p>删除linear1自begin后面的len个节点,并将linear1剩余的节点插入到linear2第insertPos位置之前</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">q7</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear1<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token class-name">SingleLinearNode</span> linear2<span class="token punctuation">,</span> <span class="token keyword">int</span> insertPos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>insertPos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"linear2插入位置需要≥0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先对linear1进行处理,进行删除</span>  linear1 <span class="token operator">=</span> <span class="token function">deleteNodeFrom</span><span class="token punctuation">(</span>linear1<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断经过删除后,linear1还有没有可以插入的节点</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>linear1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// p定位到linear1的最后一个节点</span>    <span class="token class-name">SingleLinearNode</span> p <span class="token operator">=</span> linear1<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>insertPos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 找到linear的第j个位置的前一个位置</span>      <span class="token class-name">SingleLinearNode</span> prePos <span class="token operator">=</span> <span class="token function">getPos</span><span class="token punctuation">(</span>linear2<span class="token punctuation">,</span> insertPos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>prePos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>prePos<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prePos<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>linear1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果定位失败,则将linear1剩下的节点插入到linear2的最后</span>        <span class="token comment">// 此时p指向linear2的最后一个节点</span>        p <span class="token operator">=</span> linear2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// linear1剩余节点插入linear2最后</span>        p<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>linear1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若j=0</span>      p<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>linear2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> linear1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> linear2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-栈和队列"><a class="markdownIt-Anchor" href="#2-栈和队列"></a> 2 栈和队列</h1><h2 id="21-给定入栈序列和某个出栈序列判断该出栈序列是否合法"><a class="markdownIt-Anchor" href="#21-给定入栈序列和某个出栈序列判断该出栈序列是否合法"></a> 2.1 给定入栈序列和某个出栈序列，判断该出栈序列是否合法</h2><blockquote><p>给定入栈序列和某个出栈序列，判断该出栈序列是否合法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param inStackSeq: 入栈顺序* @param outStackSeq: 出栈顺序* @return: boolean*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isRightOutStackSeq</span><span class="token punctuation">(</span><span class="token class-name">String</span> inStackSeq<span class="token punctuation">,</span> <span class="token class-name">String</span> outStackSeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>inStackSeq<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> outStackSeq<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 入栈序列和出栈序列转为数组,方便处理</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inStackSeqChars <span class="token operator">=</span> inStackSeq<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> outStackSeqChars <span class="token operator">=</span> outStackSeq<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个栈</span>  <span class="token class-name">SequenceStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>inStackSeqChars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个指针i,指向出栈序列,这里不借助队列实现</span>  <span class="token comment">// 指针j指向入栈序列</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> inStackSeqChars<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inStackSeqChars<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每次入栈和出栈顺序队列第一个比较,如果相等</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> outStackSeqChars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> i <span class="token operator">>=</span> outStackSeqChars<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-前缀-中缀-后缀表达式"><a class="markdownIt-Anchor" href="#22-前缀-中缀-后缀表达式"></a> 2.2 前缀、中缀、后缀表达式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param char1: 第一个运算符* @param char2: 第二个运算符* @return: int* @description: 返回0,优先级一致;正数,前面优先级高;负数,前面优先级低*/</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> char1<span class="token punctuation">,</span> <span class="token keyword">char</span> char2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> item <span class="token operator">:</span> chars<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> item <span class="token operator">:</span> chars<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'^'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> item <span class="token operator">:</span> chars<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char2<span class="token punctuation">)</span> <span class="token operator">-</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** @param op: 操作符* @return: boolean* @description: 判断是否是操作符*/</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isOp</span><span class="token punctuation">(</span><span class="token keyword">char</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> op <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'%'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'^'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="221-中缀前缀表达式"><a class="markdownIt-Anchor" href="#221-中缀前缀表达式"></a> 2.2.1 中缀——&gt;前缀表达式</h3><blockquote><p>遵循右优先，倘若一个中缀表达式右边的运算符能够先运算，该右边的运算符优先级高</p></blockquote><p>规则：</p><ul><li>从右向左遍历</li><li>操作数前插</li><li>操作符，若栈空入栈；不空，则将栈中大于当前运算符优先级出栈进行前插,或遇到右括号停止。之后再将当前运算符压栈</li><li>右括号入栈，遇到左括号不断弹出操作符前插，直到遇到右括号</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param nifixExpression : 中缀表达式* @return: String* @description: 中缀转前缀*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">nifixToPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nifixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储表达式拼接的结果</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储界限符和运算符的栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> top<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nifixExpression<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> temp <span class="token operator">=</span> nifixExpression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 如果长度是1,可能是：1位数字,界限符,操作符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> item <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果是操作符</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOp</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> top<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是左括号,不断出栈直到遇到右括号</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">')'</span><span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是1位数字</span>        sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果长度不为1,说明是多位的数字,进行前插</span>      sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="222-前缀中缀表达式"><a class="markdownIt-Anchor" href="#222-前缀中缀表达式"></a> 2.2.2 前缀——&gt;中缀表达式</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/前缀to中缀.png"><p>该前缀表达式的运算符从右向左依次生效，故前缀转中缀规则：</p><ul><li>从右向左遍历</li><li>将操作数压栈</li><li>遇到操作符，则将栈中最上面的两个元素弹出比如A和B，进行拼接。最后将拼接结果压栈</li><li>整个数组遍历结束后，栈中就是中缀结果</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param prefixExpression: 前缀表达式* @return: String* @description: 后缀转中缀*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">PrefixToNifix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prefixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>prefixExpression<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> top1<span class="token punctuation">,</span> top2<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> prefixExpression<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> item <span class="token operator">=</span> prefixExpression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isOp</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是操作符,则取出栈中最上面两个元素进行合并</span>      top1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      top2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 合并后重新压栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'('</span> <span class="token operator">+</span> top1 <span class="token operator">+</span> item <span class="token operator">+</span> top2 <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是操作数直接压栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 此时栈顶元素就是中缀表达式</span>  <span class="token class-name">String</span> res <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理多余的括号</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="223-中缀后缀表达式"><a class="markdownIt-Anchor" href="#223-中缀后缀表达式"></a> 2.2.3 中缀——&gt;后缀表达式</h3><blockquote><p>遵循左优先，倘若一个中缀表达式左边的运算符能够先运算，该左边的运算符可以运算</p></blockquote><p>规则：</p><ul><li>遇到操作数。直接加入后缀表达式</li><li>遇到界限符。比如()[]{}，遇到左半部分入栈，遇到右半部分依次弹出栈内运算符并加入后缀表达式，直到弹出对应的左半部分界限符</li><li>遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式。若遇到左半部分界限符或者栈空，则停止。之后再把当前运算符入栈。</li><li>将栈中剩余元素弹出加入表达式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param nifixExpression : 中缀表达式* @return: String* @description: 中缀转后缀*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">nifixToPostfix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nifixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储界限符和运算符的栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> top<span class="token punctuation">,</span> item<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> nifixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每个s判断长度,如果是1,则可能为：一位的数字,操作符或者界限符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      item <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOp</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果遇到运算符,将优先级高于或等于item的运算符出栈加入表达式,直到栈空或遇到左半部分括号</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token string">'('</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> top<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是界限符的右半部分</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 不断出栈加入表达式中,直到遇到右半部分的括号</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 长度大于1说明一定是多位数字操作数</span>      sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="224-后缀中缀表达式"><a class="markdownIt-Anchor" href="#224-后缀中缀表达式"></a> 2.2.4 后缀——&gt;中缀表达式</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/后缀to中缀.png"><p>该后缀表达式的运算符从左向右依次生效，故后缀转中缀规则：</p><ul><li>从左向右遍历</li><li>将操作数压栈</li><li>遇到操作符，则将栈中最上面的两个元素弹出比如A和B，进行拼接。需要注意拼接时，先弹出来的要放到操作符的后面，比如B*A。最后将拼接结果压栈</li><li>整个数组遍历结束后，栈中就是中缀结果</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param postfixExpression: 后缀表达式* @return: String* @description: 后缀转中缀*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">PostfixToNifix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postfixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>postfixExpression<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> top1<span class="token punctuation">,</span> top2<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> postfixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isOp</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是操作符,则取出栈中最上面两个元素进行合并</span>      top1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      top2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 合并后重新压栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'('</span> <span class="token operator">+</span> top2 <span class="token operator">+</span> item <span class="token operator">+</span> top1 <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是操作数直接压栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 此时栈顶元素就是中缀表达式</span>  <span class="token class-name">String</span> res <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理多余的括号</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-树"><a class="markdownIt-Anchor" href="#3-树"></a> 3 树</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> elem<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">TreeNode</span> lChild<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">TreeNode</span> rChild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="31-遍历-递归"><a class="markdownIt-Anchor" href="#31-遍历-递归"></a> 3.1 遍历 递归</h2><h3 id="311-先序遍历递归"><a class="markdownIt-Anchor" href="#311-先序遍历递归"></a> 3.1.1 先序遍历（递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 先序遍历  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="312-中序遍历递归"><a class="markdownIt-Anchor" href="#312-中序遍历递归"></a> 3.1.2 中序遍历（递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 中序遍历  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="313-后序遍历递归"><a class="markdownIt-Anchor" href="#313-后序遍历递归"></a> 3.1.3 后序遍历（递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 后序遍历  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-遍历-非递归"><a class="markdownIt-Anchor" href="#32-遍历-非递归"></a> 3.2 遍历 非递归</h2><h3 id="321-先序遍历非递归"><a class="markdownIt-Anchor" href="#321-先序遍历非递归"></a> 3.2.1 先序遍历（非递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 先序遍历,非递归  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrderNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * 规则： * 1. 先将根节点入栈 * 2. 栈不为空, 出栈, 访问, 将出栈元素的右孩子、左孩子入栈 * 3. 循环第二步 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储访问结果</span>  <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指针</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根节点入栈</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 元素出栈</span>    p <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问出栈元素</span>    res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 右孩子存在,入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 左孩子存在,入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="322-中序遍历非递归"><a class="markdownIt-Anchor" href="#322-中序遍历非递归"></a> 3.2.2 中序遍历（非递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 中序遍历,非递归  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrderNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * 规则： * 1. 先将根节点入栈 * 2. 如果该节点有左孩子,循环将所有左孩子入栈 * 3. 出栈,访问,如果出栈元素有右孩子,压栈 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储访问结果</span>  <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指针</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将节点的所有左孩子入栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 出栈, 访问, 若有右孩子, 则入栈</span>      p <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="323-后序遍历非递归双栈"><a class="markdownIt-Anchor" href="#323-后序遍历非递归双栈"></a> 3.2.3 后序遍历（非递归|双栈）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 后序遍历,非递归,双栈  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrderNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * 规则： * 1. 先按照根-右-左的顺序入栈 * 2.等所有节点入栈结束后, 一个个出栈 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储访问结果</span>  <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指针</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈</span>  stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 元素出栈</span>    p <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问出栈元素</span>    stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 左孩子存在,入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 右孩子存在,入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问出栈元素</span>    res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="324-后序遍历非递归单栈"><a class="markdownIt-Anchor" href="#324-后序遍历非递归单栈"></a> 3.2.4 后序遍历（非递归|单栈）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>  <span class="token class-name">MyEntry</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">V</span> old <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">return</span> old<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现Map.Entry接口，重写方法</li><li>stack中存储的是一个键值对，key是树的节点，value是该节点的右孩子是否被访问，是boolean类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 后序遍历,非递归,一个栈*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrderNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储访问结果</span>  <span class="token class-name">TreeNode</span> bt <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指针</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEntry</span><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span></span> stackNode<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将该bt指向的节点以及所有的左孩子入栈</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// false表示该节点的右孩子没有被访问过</span>      stackNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stackNode<span class="token punctuation">)</span><span class="token punctuation">;</span>      bt <span class="token operator">=</span> bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 栈不空,并且栈顶元素的右孩子被访问过</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 出栈,加入遍历结果中</span>      res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 令栈顶的右孩子被访问</span>      stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// bt指向栈顶节点的右孩子</span>      bt <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="325-层次遍历"><a class="markdownIt-Anchor" href="#325-层次遍历"></a> 3.2.5 层次遍历</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 层次遍历*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 记录遍历结果</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 队列</span>  <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> node<span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-获取树的高度"><a class="markdownIt-Anchor" href="#33-获取树的高度"></a> 3.3 获取树的高度</h2><blockquote><p>获取树的高度</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 获取树的高度/深度*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 获取左子树高度</span>  <span class="token keyword">int</span> leftChildHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取右子树高度</span>  <span class="token keyword">int</span> rightChildHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftChildHeight<span class="token punctuation">,</span> rightChildHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-判断该树是否是平衡二叉树"><a class="markdownIt-Anchor" href="#34-判断该树是否是平衡二叉树"></a> 3.4 判断该树是否是平衡二叉树</h2><blockquote><p>判断该树是否是平衡二叉树</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 判断是否是AVL树*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAVL</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果是空树</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 获取左子树高度</span>  <span class="token keyword">int</span> leftChildHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取右子树高度</span>  <span class="token keyword">int</span> rightChildHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftChildHeight <span class="token operator">-</span> rightChildHeight<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-给定一个数组建树"><a class="markdownIt-Anchor" href="#35-给定一个数组建树"></a> 3.5 给定一个数组建树</h2><blockquote><p>给定一个数组建树。利用层次遍历</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param arr: 数组* @return: TreeNode* @description: 根据数组创建树*/</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">createTreeByArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 建立根节点</span>  <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建队列</span>  <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>  <span class="token comment">// i用来指向数组元素的位置</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 根节点入队列</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 出队列一个节点</span>    node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新建一个节点,将出栈节点的左指针指向该节点,新建的节点入栈</span>    temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果数组还有元素,新建一个节点,将出栈节点的右指针指向该节点,新建的节点入栈</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      temp<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      node<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  queue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="36-判断一颗树是否是完全二叉树"><a class="markdownIt-Anchor" href="#36-判断一颗树是否是完全二叉树"></a> 3.6 判断一颗树是否是完全二叉树</h2><blockquote><p>判断一颗树是否是完全二叉树</p></blockquote><p>原理：若节点无左子树，则不应该有右子树</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 判断是否是FBT树*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFBT</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFBT</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果是空树</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 声明一个队列,对树进行层次遍历</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当第一次出现null时,tag会置位true</span><span class="token keyword">boolean</span> tag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node<span class="token punctuation">;</span><span class="token comment">// 根节点入队列</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 出队列</span>node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果有左孩子并且还没有出现第一个null</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span>tag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 如果有右孩子并且还没有出现第一个null</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span>tag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="37-给定一棵树的根节点和某个值得到该值对应的所有祖先节点"><a class="markdownIt-Anchor" href="#37-给定一棵树的根节点和某个值得到该值对应的所有祖先节点"></a> 3.7 给定一棵树的根节点和某个值,得到该值对应的所有祖先节点</h2><blockquote><p>给定一棵树的根节点和某个值,得到该值对应的所有祖先节点</p></blockquote><ul><li>利用单栈的后序遍历</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 树的根节点* @param x: 被查找的值* @return: TreeNode* @description: 根据数组创建树*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getParents</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储该node节点的所有祖先</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEntry</span><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> bt <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果bt有左孩子,并且bt的值不为x,则沿左分支向下入栈</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bt<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bt <span class="token operator">=</span> bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// bt指针一定不空,并且指向的节点要么是某个节点的左分支最后一个,要么该节点的值就位x</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bt<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bt <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="38-统计某二叉树度1节点的数量"><a class="markdownIt-Anchor" href="#38-统计某二叉树度1节点的数量"></a> 3.8 统计某二叉树度1节点的数量</h2><blockquote><p>统计某二叉树度1节点的数量</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 树的根节点* @param degree: 度* @return: int* @description: 统计数中度为degree的节点数量*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">treeCountDegree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> degree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> bt<span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过层次遍历实现统计</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    bt <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      temp<span class="token operator">++</span><span class="token punctuation">;</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      temp<span class="token operator">++</span><span class="token punctuation">;</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> degree<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="39-交换一个树所有节点的左右之树"><a class="markdownIt-Anchor" href="#39-交换一个树所有节点的左右之树"></a> 3.9 交换一个树所有节点的左右之树</h2><blockquote><p>交换一个树所有节点的左右之树</p></blockquote><ul><li>递归版本</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 交换树的左右子树, 递归*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeLeftAndRightChild</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 交换左右子树</span>    <span class="token class-name">TreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归修改左子树</span>    <span class="token function">changeLeftAndRightChild</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归修改左子树</span>    <span class="token function">changeLeftAndRightChild</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>非递归版本</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 交换树的左右子树, 非递归*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeLeftAndRightChildNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 利用层次遍历来完成</span>  <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> temp<span class="token punctuation">,</span>bt<span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    bt <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 交换bt的左右子树</span>    temp <span class="token operator">=</span> bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bt<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bt<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="310-已知先序和中序构建二叉树"><a class="markdownIt-Anchor" href="#310-已知先序和中序构建二叉树"></a> 3.10 已知先序和中序构建二叉树</h2><blockquote><p>已知先序和中序构建二叉树</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param inOrder:  中序遍历数组* @param preOrder: 先序遍历数组* @param li:       中序遍历数组的左边界* @param ri:       中序遍历数组的右边界* @param lp:       先序遍历数组的左边界* @param rp:       先序遍历数组的右边界* @return: tree.TreeNode* @description: 根据中序和先序序列创建树, 递归*/</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">createTreeByInOrderAndPreOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inOrder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preOrder<span class="token punctuation">,</span> <span class="token keyword">int</span> li<span class="token punctuation">,</span> <span class="token keyword">int</span> ri<span class="token punctuation">,</span> <span class="token keyword">int</span> lp<span class="token punctuation">,</span> <span class="token keyword">int</span> rp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建根节点</span>  <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>preOrder<span class="token punctuation">[</span>lp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将根节点到中序遍历序列去遍历定位</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> li<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inOrder<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> inOrder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 此时,i的这个位置的左边就是左子树序列,右边就是右子树序列</span>  <span class="token comment">// 左子树节点个数：i-li; 右子树节点个数ri-i</span>  <span class="token comment">// 左子树的节点在先序遍历数组中的下标范围是：[lp+1,lp+i-li]</span>  <span class="token comment">// 右子树的节点在先序遍历数组中的下标范围是：[lp+i-li+1,rp]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> li<span class="token punctuation">)</span> root<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> root<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span><span class="token function">createTreeByInOrderAndPreOrder</span><span class="token punctuation">(</span>inOrder<span class="token punctuation">,</span> preOrder<span class="token punctuation">,</span> li<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> lp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lp <span class="token operator">+</span> i <span class="token operator">-</span> li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> ri<span class="token punctuation">)</span> root<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> root<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span><span class="token function">createTreeByInOrderAndPreOrder</span><span class="token punctuation">(</span>inOrder<span class="token punctuation">,</span> preOrder<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ri<span class="token punctuation">,</span> lp <span class="token operator">+</span> i <span class="token operator">-</span> li <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="311-已知后序和中序构建二叉树"><a class="markdownIt-Anchor" href="#311-已知后序和中序构建二叉树"></a> 3.11 已知后序和中序构建二叉树</h2><blockquote><p>已知先序和中序构建二叉树</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param inOrder:   中序遍历数组* @param postOrder: 后序遍历数组* @param li:        中序遍历数组的左边界* @param ri:        中序遍历数组的右边界* @param lp:        后序遍历数组的左边界* @param rp:        后序遍历数组的右边界* @return: tree.TreeNode* @description: 根据中序和后序序列创建树, 递归*/</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">createTreeByInOrderAndPostOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inOrder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postOrder<span class="token punctuation">,</span> <span class="token keyword">int</span> li<span class="token punctuation">,</span> <span class="token keyword">int</span> ri<span class="token punctuation">,</span> <span class="token keyword">int</span> lp<span class="token punctuation">,</span> <span class="token keyword">int</span> rp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 后序遍历数组的最后一个是根节点,然后创建根节点</span>  <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>postOrder<span class="token punctuation">[</span>rp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据这个根节点元素,去中序遍历数组中定位,然后划分左右子树</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inOrder<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> inOrder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 此时,i的这个位置的左边就是左子树序列,右边就是右子树序列</span>  <span class="token comment">// 左子树节点个数：i-li; 右子树节点个数ri-i</span>  <span class="token comment">// 左子树的节点在后序遍历数组中的下标范围是：[lp,lp+i-li-1]</span>  <span class="token comment">// 右子树的节点在后序遍历数组中的下标范围是：[rp-ri+i,rp-1]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> li<span class="token punctuation">)</span> root<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> root<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span><span class="token function">createTreeByInOrderAndPostOrder</span><span class="token punctuation">(</span>inOrder<span class="token punctuation">,</span> postOrder<span class="token punctuation">,</span> li<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> lp<span class="token punctuation">,</span> lp <span class="token operator">+</span> i <span class="token operator">-</span> li <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> ri<span class="token punctuation">)</span> root<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> root<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span><span class="token function">createTreeByInOrderAndPostOrder</span><span class="token punctuation">(</span>inOrder<span class="token punctuation">,</span> postOrder<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ri<span class="token punctuation">,</span> rp <span class="token operator">-</span> ri <span class="token operator">+</span> i<span class="token punctuation">,</span> rp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="312-给定一个整数数组构建二叉排序树"><a class="markdownIt-Anchor" href="#312-给定一个整数数组构建二叉排序树"></a> 3.12 给定一个整数数组，构建二叉排序树</h2><blockquote><p>给定一个数组，构建二叉排序树</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param arr: 数组* @return: TreeNode* @description: 构建二叉排序树*/</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">createBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 创建根节点</span>  <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根节点入栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> temp<span class="token punctuation">,</span> top<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果栈顶元素关键字的值&lt;当前要插入的节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          top<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果栈顶元素关键字的值>当前要插入的节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          top<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-查找"><a class="markdownIt-Anchor" href="#4-查找"></a> 4 查找</h1><h2 id="41-avl树"><a class="markdownIt-Anchor" href="#41-avl树"></a> 4.1 AVL树</h2><p>平衡二叉树（AVL Tree），要求每个节点的左右子树高度差在[-1,1]取值，下图列举了在构建平衡二叉树过程中出现的四大类不平衡情况，以及对应类型的说明。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/平衡二叉树平衡过程.png" alt="平衡二叉树平衡过程"><p>插入节点后，原本平衡的二叉树变的不平衡，假设插入位置是c，距离插入位置c最近的不平衡节点为a，对上面四种类型做出解释：</p><ul><li>LL：c在a的左子树的左子树</li><li>RR：c在a的右子树的右子树</li><li>LR：c在a的左子树的右子树</li><li>RL：c在a的右子树的左子树</li></ul><p>判断是哪种类型的不平衡，是根据a，c两个节点相对位置而言的，而类型后面的文字则是表示调整这种类型不平衡需要旋转的方向。在下面方法命名中，以旋转方向命名。</p><h2 id="42-构建一颗平衡二叉树"><a class="markdownIt-Anchor" href="#42-构建一颗平衡二叉树"></a> 4.2 构建一颗平衡二叉树</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVLTree</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 全局变量,记录插入节点后,整棵树的高度是否增加</span>  <span class="token keyword">boolean</span> taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">AVLTreeNode</span> <span class="token function">createAVLTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建根节点</span>    <span class="token class-name">AVLTreeNode</span> root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 不断插入节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果该元素在树中找不到,则进行插入</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">findInAVL</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>        root <span class="token operator">=</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回根节点</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token class-name">AVLTreeNode</span> <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果树空,则直接插入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AVLTreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      root<span class="token punctuation">.</span>data <span class="token operator">=</span> elem<span class="token punctuation">;</span>      <span class="token comment">// 全局高度会增加</span>      taller <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>data <span class="token operator">&lt;</span> elem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">AVLTreeNode</span> temp <span class="token operator">=</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild <span class="token operator">!=</span> temp<span class="token punctuation">)</span> root<span class="token punctuation">.</span>rightChild <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token comment">// 如果此时insertNode函数传过来的root节点值 &lt; elem,说明elem应该在root的右子树进行插入</span>      <span class="token comment">// root指向的是离插入节点Node最近的失衡节点或者Node节点的父亲节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>taller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 现在已经明确往右子树添加一个节点Node,此时的taller为true只是说明添加新节点后可能会使</span>        <span class="token comment">// 整个树的高度增加,实际上增不增加,需要看Node的父亲节点的平衡因子,也就是后面的switch干的事情</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// root的bf是0,说明添加Node之前左子树高,所以右子树添加Node后,不会影响树的平衡</span>            <span class="token comment">// 并且还能让root的bf变成0,并且可以知道此时的整个树并没有增高</span>          <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            root<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">// 倘若root节点的bf为0,说明root节点左右之树原先一样高,那么在其右子树添加一个节点必然会导致右子树变高</span>          <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            root<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            taller <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">// 倘若root节点bf为-1,说明未添加Node节点之前,root的右子树就高,此时又添加一个节点,会导致平衡破坏</span>          <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>            <span class="token comment">// 因为是右子树的插入导致的失衡,调用rightBalance方法,此时传递的root节点指向的是距离新插入的Node最近的失衡节点</span>            root <span class="token operator">=</span> <span class="token function">rightBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unexpected value: "</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>bf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">AVLTreeNode</span> temp <span class="token operator">=</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild <span class="token operator">!=</span> temp<span class="token punctuation">)</span> root<span class="token punctuation">.</span>leftChild <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>          root <span class="token operator">=</span> <span class="token function">leftBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>          taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>          root<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          taller <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>          root<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回节点</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/** * @param root: * @return: null * @description: 进行平衡调整 */</span>  <span class="token keyword">private</span> <span class="token class-name">AVLTreeNode</span> <span class="token function">rightBalance</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// root为Node节点的祖先节点,temp的父亲节点</span>    <span class="token comment">// temp指向root的右子树,temp指向插入节点Node的父亲节点</span>    <span class="token class-name">AVLTreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>rightChild<span class="token punctuation">,</span> rd<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        rd <span class="token operator">=</span> temp<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>rd<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            root<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            root<span class="token punctuation">.</span>bf <span class="token operator">=</span> temp<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>            root<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        rd<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>rightChild <span class="token operator">=</span> <span class="token class-name">R_Rotate</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token class-name">L_Rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>        root<span class="token punctuation">.</span>bf <span class="token operator">=</span> temp<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 左旋后,根节点发生变化,进行更新</span>        root <span class="token operator">=</span> <span class="token class-name">L_Rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token class-name">AVLTreeNode</span> <span class="token function">leftBalance</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// root为Node节点的祖先节点,temp的父亲节点</span>    <span class="token comment">// temp指向root的右子树,temp指向插入节点Node的父亲节点</span>    <span class="token class-name">AVLTreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>leftChild<span class="token punctuation">,</span> rd<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>        rd <span class="token operator">=</span> temp<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>rd<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            root<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            root<span class="token punctuation">.</span>bf <span class="token operator">=</span> temp<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>            root<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        rd<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token class-name">L_Rotate</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token class-name">R_Rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        root<span class="token punctuation">.</span>bf <span class="token operator">=</span> temp<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token class-name">R_Rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/** * @param root: 不平衡的树的根节点 * @description: LL类型不平衡的右旋处理 */</span>  <span class="token keyword">private</span> <span class="token class-name">AVLTreeNode</span> <span class="token class-name">R_Rotate</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AVLTreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>leftChild <span class="token operator">=</span> temp<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>rightChild <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment">// 返回调整过后的新的根节点</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/** * @param root: 不平衡的树的根节点 * @description: RR类型不平衡的左旋处理 */</span>  <span class="token keyword">private</span> <span class="token class-name">AVLTreeNode</span> <span class="token class-name">L_Rotate</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AVLTreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>rightChild <span class="token operator">=</span> temp<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>leftChild <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment">// 返回调整过后的新的根节点</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/** * @param root: 树根节点 * @param elem: 需要被查找的元素 * @description: 判断该二叉排序树中是否有elem这个节点 */</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">findInAVL</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>data <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>data <span class="token operator">></span> elem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">findInAVL</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">findInAVL</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-排序"><a class="markdownIt-Anchor" href="#5-排序"></a> 5 排序</h1><a href="/%E6%8E%92%E5%BA%8F/" title="点击这里查看内部排序详解">点击这里查看内部排序详解</a>]]></content>
    
    
    <summary type="html">数据结构算法设计题目,线性表、栈和队列、树、查找、排序</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="blog.silverbeats.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计题目" scheme="blog.silverbeats.cn/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="blog.silverbeats.cn/Mybatis/"/>
    <id>blog.silverbeats.cn/Mybatis/</id>
    <published>2020-10-18T08:39:50.000Z</published>
    <updated>2020-11-06T14:48:11.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h1><h2 id="11-什么是mybatis"><a class="markdownIt-Anchor" href="#11-什么是mybatis"></a> 1.1 什么是Mybatis</h2><ul><li><p>MyBatis<strong>本是apache</strong>的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且<strong>改名为MyBatis</strong> 。2013年11月<strong>迁移到Github</strong></p></li><li><p>MyBatis 是一款优秀的<strong>持久层框架</strong></p></li><li><p>它支持自定义 SQL、存储过程以及高级映射。</p></li><li><p>MyBatis免除了几乎所有的 JDBC代码以及设置参数和获取结果集的工作。MyBatis可以通过简单的XML或注解来配置和映射原始类型、接口和 Java的POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></li></ul><h2 id="12-获得mybatis"><a class="markdownIt-Anchor" href="#12-获得mybatis"></a> 1.2 获得Mybatis</h2><ul><li>Maven仓库</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="#https://github.com/mybatis/mybatis-3/releases">GitHub</a></li><li><a href="#https://mybatis.org/mybatis-3/zh/getting-started.html">中文文档</a></li></ul><h2 id="12-使用mybatis的原因"><a class="markdownIt-Anchor" href="#12-使用mybatis的原因"></a> 1.2 使用Mybatis的原因</h2><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql</li></ul><h1 id="2-第一个mybatis程序"><a class="markdownIt-Anchor" href="#2-第一个mybatis程序"></a> 2. 第一个Mybatis程序</h1><h2 id="21-环境搭建"><a class="markdownIt-Anchor" href="#21-环境搭建"></a> 2.1 环境搭建</h2><ul><li>搭建数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>mybatistest<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>mybatistest<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"1234567"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"1234568"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>创建Maven项目</p></li><li><p>删除src目录</p></li><li><p>导入Maven依赖</p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--mysql驱动--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--mybatis--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--Junit--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-创建一个模块"><a class="markdownIt-Anchor" href="#22-创建一个模块"></a> 2.2 创建一个模块</h2><ul><li>在resources文件夹下，创建Mybatis核心配置文件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--configuration核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--多个环境--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开发环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--事务管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--数据库相关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatistest?useSSL=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写Mybatis的工具类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>silverbeats<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtil</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用Mybatis第一步：获取SQLSessionFactory对象</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>      <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>  <span class="token comment">//SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession</span>  <span class="token comment">//实例来直接执行已映射的 SQL 语句</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSession</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-编写代码"><a class="markdownIt-Anchor" href="#23-编写代码"></a> 2.3 编写代码</h2><ul><li>实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>  <span class="token comment">// 以及空参、有参、get、set、toString方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Dao接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>接口实现类</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span><span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--命名空间 绑定一个对应的dao接口也就是mapper接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--id对应绑定接口的方法,resultType返回类型要写全类名--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from mybatistest.user  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-junit测试"><a class="markdownIt-Anchor" href="#24-junit测试"></a> 2.4 Junit测试</h2><p>根据上面的内容进行测试一定出现下面的异常</p><pre class="line-numbers language-none"><code class="language-none">绑定异常org.apache.ibatis.binding.BindingException: Type interface com.silverbeats.dao.UserMapper is not known to the MapperRegistry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是因为在Maybatis核心配置文件中缺少内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册,这里就是MapperRegistry--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/silverbeats/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是运行单元测试还是会出现下面的异常，表示找不到配置文件</p><pre class="line-numbers language-none"><code class="language-none">java.lang.ExceptionInInitializerErrorat com.silverbeats.dao.UserMapperTest.test(UserMapperTest.java:15)……Caused by: org.apache.ibatis.exceptions.PersistenceException: ### Error building SqlSession.### The error may exist in com&#x2F;silverbeats&#x2F;dao&#x2F;UserMapper.xml### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource com&#x2F;silverbeats&#x2F;dao&#x2F;UserMapper.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为Maven项目中资源导出的问题，需要在父工程或者子工程的pom.xml导入如下代码（保险起见都父子工程导入）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获得SqlSession对象</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 方式一：执行sql</span>    <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 方法2</span>    <span class="token comment">// List&lt;User> userList = sqlSession.selectList("com.silverbeats.dao.UserMapper.getUserList");</span>    <span class="token comment">// 打印数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 关闭SqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-总结"><a class="markdownIt-Anchor" href="#25-总结"></a> 2.5 总结</h2><p>上面的第一个程序中，一共创建了6个文件</p><ul><li>子工程resources/mybatis-config.xml Mybatis核心配置文件</li><li>子工程java目录下建包，dao目录下User实体类对应的接口UserMapper</li><li>dao目录下实体类接口UserMapper对应的配置文件UserMapper.xml，并且每个xml配置文件都需要在Mybatis核心配置文件中进行注册</li><li>pojo目录下，User实体类，JavaBean</li><li>utils目录下，MybatisUtil工具类，加载核心配置文件，返回sqlSession</li><li>test目录下，对应目录结构，创建了Junit测试类</li></ul><p>其中，在后期使用过程中，有一些文件是不需要修改的：</p><ol><li>MybatisUtil类不需要修改</li><li>User实体类不需要变动，除非数据库对应的字段发生变化</li></ol><p>当需要向数据库添加新的表时，只需要在dao目录下创建对应的Mapper、Mapper.xml并在Mybatis-config.xml进行注册，以及pojo下的实体类即可</p><h1 id="3-crud"><a class="markdownIt-Anchor" href="#3-crud"></a> 3. CRUD</h1><p>在UserMapper.xml书写sql，进行CRUD</p><h2 id="31-select标签"><a class="markdownIt-Anchor" href="#31-select标签"></a> 3.1 select标签</h2><ul><li>编写接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查询全部用户</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据id查询用户</span><span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写对应Mapper.xml的sql</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--普通查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from mybatistest.user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--带有条件的查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from mybatistest.user where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>id 绑定的namespace中的方法名</li><li>resultType sql语句执行的返回值</li><li>parameterType 参数类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-insert标签"><a class="markdownIt-Anchor" href="#32-insert标签"></a> 3.2 insert标签</h2><ul><li>编写接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入用户</span><span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除用户</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写对应Mapper.xml的sql</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into mybatistest.user (id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"胡娜"</span><span class="token punctuation">,</span> <span class="token string">"asdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入成功，提交事务</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-update标签"><a class="markdownIt-Anchor" href="#33-update标签"></a> 3.3 update标签</h2><ul><li>编写接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 修改用户</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>编写对应Mapper.xml的sql</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  update mybatistest.user set name=#&#123;name&#125;, pwd=#&#123;pwd&#125; where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"胡娜12"</span><span class="token punctuation">,</span> <span class="token string">"asdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新成功，提交事务</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-delete标签"><a class="markdownIt-Anchor" href="#34-delete标签"></a> 3.4 delete标签</h2><ul><li>编写接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 删除用户</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>编写对应Mapper.xml的sql</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  delete from mybatistest.user where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入成功，提交事务</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-map"><a class="markdownIt-Anchor" href="#35-map"></a> 3.5 Map</h2><p>倘若实体类或者数据库中的表字段过多，可以考虑使用Map集合来解决</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用map插入用户</span><span class="token keyword">int</span> <span class="token function">addUser2</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--通过map添加--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into mybatistest.user (id, name, pwd) values(#&#123;userid&#125;, #&#123;userName&#125;, #&#123;password&#125;);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token string">"呼啦啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"lliiww"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userMapper<span class="token punctuation">.</span><span class="token function">addUser2</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map传递参数，直接在sql中取出对应的key即可，parameterType=“map”</p><p>对象传递参数，直接在sql中取对象的属性即可，parameterType=“com.silverbeats.pojo.User”</p><p>在只有一个基本类型参数的情况下，可以直接在sql中取到</p><p>多个参数用Map，或者<strong>注解</strong></p><h1 id="4-配置解析"><a class="markdownIt-Anchor" href="#4-配置解析"></a> 4. 配置解析</h1><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html">配置文档</a></p><h2 id="41-核心配置文件mybatis-configxml"><a class="markdownIt-Anchor" href="#41-核心配置文件mybatis-configxml"></a> 4.1 核心配置文件mybatis-config.xml</h2><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/核心配置文件目录.png"><p><strong>标签书写顺序</strong></p><p>The content of element type “configuration” must match “(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)”.</p><h2 id="42-properties-属性"><a class="markdownIt-Anchor" href="#42-properties-属性"></a> 4.2 properties 属性</h2><p>可以通过properties 属性来实现引用配置文件</p><p>这些属性可以在外部进行配置，并可以进行动态替换。既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置</p><p>在[上面的程序](#2. 第一个Mybatis程序)的核心配置文件中，可以将其中的driver、url、username、password写到properties文件中</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatistest?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在核心配置文件中引入该properties文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入外部配置文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/silverbeats/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时properties标签内可以使用property标签来添加属性，比如将username和password用property传递，url和driver用properties文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatistest?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样也可以达到相同的效果。</p><p>倘若是下面这种情况</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会优先使用properties文件中的password值</p><h2 id="43-settings-设置"><a class="markdownIt-Anchor" href="#43-settings-设置"></a> 4.3 settings 设置</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings 设置文档</a></p><h2 id="44-typealiases-类型别名"><a class="markdownIt-Anchor" href="#44-typealiases-类型别名"></a> 4.4 typeAliases 类型别名</h2><p>在核心配置文件中给实体类起别名，这样，可以在Mapper.xml中的resultType和parameterType直接使用这个别名即可，而不需要写全类名</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--给实体类起别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以指定一个包名，Mybatis会在包名下面搜索需要的JavaBean，在没有注解的情况下，扫描到的Bean别名模式是类名小写</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三种起别名方式为加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"hulala"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>上面三个方式都可以给实体类起别名，优先级不同，第一种直接给实体类起别名优先级最高，其次是注解，最后是指定包名给实体类起别名</p></blockquote><h2 id="45-environments-环境变量"><a class="markdownIt-Anchor" href="#45-environments-环境变量"></a> 4.5 environments 环境变量</h2><p>MyBatis 可以配置成适应多种环境，<strong>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--通过修改default的值来切换环境--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>transactionManager事务管理器</p><ul><li>JDBC 默认</li><li>MANAGED</li></ul></li><li><p>dataSource数据源，dataSource元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源，三种内建的数据源类型</p><ul><li><p>UNPOOLED</p><blockquote><p>这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形</p></blockquote></li><li><p>POOLED 默认</p><blockquote><p>这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求</p></blockquote></li><li><p>JNDI</p><blockquote><p>这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用</p></blockquote></li></ul></li></ul><h2 id="46-映射器mappers"><a class="markdownIt-Anchor" href="#46-映射器mappers"></a> 4.6 映射器Mappers</h2><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等。例如：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用相对于类路径的资源引用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/mybatis/builder/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/mybatis/builder/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/mybatis/builder/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用完全限定资源定位符（URL） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///var/mappers/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///var/mappers/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///var/mappers/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面两个方法需要注意：</p><ul><li>接口和它的Mapper配置文件必须同名</li><li>接口和它的Mapper配置文件必须同包</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.builder.AuthorMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.builder.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.builder.PostMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.builder<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="47-其他"><a class="markdownIt-Anchor" href="#47-其他"></a> 4.7 其他</h2><ul><li><p>typeHandlers 类型处理器</p></li><li><p>objectFactory 对象工厂</p></li><li><p>plugins 插件</p><ul><li>Mybatis-generator-core</li><li>Mybatis-plus</li><li>通用mapper</li></ul></li></ul><h1 id="5-生命周期和作用域"><a class="markdownIt-Anchor" href="#5-生命周期和作用域"></a> 5. 生命周期和作用域</h1><p>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong></p><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/生命周期和作用域.png"><p><strong>对象生命周期和依赖注入框架</strong></p><p>依赖注入框架可以创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。 如果对如何通过依赖注入框架使用 MyBatis 感兴趣，可以研究一下 MyBatis-Spring 或 MyBatis-Guice 两个子项目。</p><h2 id="51-sqlsessionfactorybuilder"><a class="markdownIt-Anchor" href="#51-sqlsessionfactorybuilder"></a> 5.1 SqlSessionFactoryBuilder</h2><ul><li>可实例化</li><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li><strong>作用域：局部变量</strong></li></ul><h2 id="52-sqlsessionfactory"><a class="markdownIt-Anchor" href="#52-sqlsessionfactory"></a> 5.2 SqlSessionFactory</h2><ul><li>一旦创建，一直存在</li><li>可以想象为：数据库连接池</li><li>单例模式或静态单例模式</li><li><strong>作用域：全局作用域</strong></li></ul><h2 id="53-sqlsession"><a class="markdownIt-Anchor" href="#53-sqlsession"></a> 5.3 SqlSession</h2><ul><li>每个线程都应该有它自己的 SqlSession 实例，可以理解为连接到连接池的一个请求，需要自行请求和关闭</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的</li><li><strong>用完就关闭</strong>，否则会出现资源占用</li><li><strong>最佳的作用域是请求或方法作用域</strong></li></ul><h1 id="6-解决属性名和字段名不一致的问题"><a class="markdownIt-Anchor" href="#6-解决属性名和字段名不一致的问题"></a> 6. 解决属性名和字段名不一致的问题</h1><p>当实体类中的私有属性，比如password，而在数据库中对应的字段名是pwd，倘若通过id查询，是不会获得对应的值的。</p><p>因为在Mapper.xml中对应的sql是这样写的：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mybatistest<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment">#&#123;id&#125;;</span><span class="token comment">-- 实际上是：</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>pwd <span class="token keyword">from</span> mybatistest<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment">#&#123;id&#125;;</span><span class="token comment">-- 目标就是，如何将查询到的pwd值给到password</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法</p><ul><li>起别名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>pwd <span class="token keyword">as</span> password <span class="token keyword">from</span> mybatistest<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment">#&#123;id&#125;;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>resultMap结果集映射，在Mapper.xml中写</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--column和property值一样，可省略--></span>  <span class="token comment">&lt;!--column对应数据库的列--></span>  <span class="token comment">&lt;!--property对应实体类的属性值--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!--column和property值一样，可省略--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--此时不需要resultType--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from mybatistest.user where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-日志"><a class="markdownIt-Anchor" href="#7-日志"></a> 7. 日志</h1><h2 id="71-日志工厂"><a class="markdownIt-Anchor" href="#71-日志工厂"></a> 7.1 日志工厂</h2><p>如果一个数据库操作出现异常，需要排错，日志就是最好的助手。</p><p>在核心配置文件中配置logImpl，指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p><ul><li>SLF4J</li><li>LOG4J 【掌握】【需要导包】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING【掌握】【可以直接用】</li><li>NO_LOGGING</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="72-log4j"><a class="markdownIt-Anchor" href="#72-log4j"></a> 7.2 LOG4J</h2><ul><li><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIXSyslog守护进程等；</p></li><li><p>可以控制每一条日志的输出格式</p></li><li><p>可以定义每一条日志信息的级别，能够更加细致地控制日志的生成过程</p></li><li><p>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p></li></ul><ol><li>导入LOG4J包</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>log4j.properties</li></ol><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#将登记为DEBUG的日志信息输出到console和file两个目的地</span><span class="token attr-name">log4j.rootLogger</span> <span class="token punctuation">=</span> <span class="token attr-value">debug,console,file</span><span class="token comment">#控制台输出的相关配置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out </span><span class="token attr-name">log4j.appender.console.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[%c]-%m%n</span><span class="token comment">#文件输出相关配置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span> <span class="token punctuation">=</span> <span class="token attr-value">./logs/log.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span> <span class="token punctuation">=</span> <span class="token attr-value">10mb</span><span class="token comment">##输出DEBUG级别以上的日志</span><span class="token attr-name">log4j.appender.file.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><span class="token comment">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PrepareStatement</span><span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置核心文件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token attr-name">&lt;setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="8-分页"><a class="markdownIt-Anchor" href="#8-分页"></a> 8. 分页</h1><h2 id="81-limit分页"><a class="markdownIt-Anchor" href="#81-limit分页"></a> 8.1 limit分页</h2><p>分页的原因：减少数据的处理量，提高效率</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">limit</span> startIndex<span class="token punctuation">,</span> pageSize<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试分页</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Mapper.xml</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from mybatistest.user limit #&#123;startIndex&#125;, #&#123;pageSize&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="82-rowbounds分页"><a class="markdownIt-Anchor" href="#82-rowbounds分页"></a> 8.2 RowBounds分页</h2><ol><li>接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用RowBounds查询</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Mapper.xml</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from mybatistest.user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRoundBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// RowBounds实现</span><span class="token class-name">RowBounds</span> rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过java代码层面实现分页</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> selectList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.silverbeats.dao.UserMapper.getUsersByRowBounds"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> selectList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="83-分页插件"><a class="markdownIt-Anchor" href="#83-分页插件"></a> 8.3 分页插件</h2><p><a href="#https://pagehelper.github.io/docs/howtouse/">pagehelper</a></p><h1 id="9-使用注解"><a class="markdownIt-Anchor" href="#9-使用注解"></a> 9. 使用注解</h1><p><strong>接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法存在多个参数,所有参数前面必须要有@Param</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入用户</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"insert into mybatistest.user (id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"insert into mybatistest.user (id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 更新</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update user set name = #&#123;name&#125; where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除</span><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from user where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/注解.png"><p>@Param()注解</p><ul><li>基本类型的参数或者String类型，需要加上注解</li><li>如果只有一个基本类型，可以忽略</li><li>引用类型不需要加</li><li>在sql引用的就是这里设定的属性名</li></ul><p><strong>核心配置xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--绑定接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-lombok"><a class="markdownIt-Anchor" href="#10-lombok"></a> 10. Lombok</h1><p>Lombok项目是一个Java库，它会自动插入您的编辑器和构建工具中，从而使您的Java更加生动有趣。永远不要再写另一个getter或equals方法，带有一个注释的您的类有一个功能全面的生成器，自动执行记录变量等。</p><ul><li>idea中安装插件</li><li>项目中导入lombok的jar包</li></ul><pre class="line-numbers language-none"><code class="language-none">@data: 可以添加无参构造、get、set、toString、hashCode、equals@ToString: 重写toString方法@AllArgsConstructor: 添加有参构造@NoArgsConstructor: 添加无参构造@EqualsAndHashCode: 添加hashCode、equals方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="11-复杂查询环境"><a class="markdownIt-Anchor" href="#11-复杂查询环境"></a> 11. 复杂查询环境</h1><ul><li>搭建环境，创建学生表和老师表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> teacher<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'乌拉拉'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>tid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'小张'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'小李'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="111-多对一"><a class="markdownIt-Anchor" href="#111-多对一"></a> 11.1 多对一</h2><p>多个学生关联一个老师</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Teacher</span> teacher<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 在mybatis实现下面的sql</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s<span class="token punctuation">,</span> teacher t <span class="token keyword">where</span> s<span class="token punctuation">.</span>tid <span class="token operator">=</span> t<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>①先获取所有学生的信息</p><p>②根据学生的tid获取对应老师的信息</p><p><strong>按照查询嵌套</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentInfo<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from student;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from teacher where id = #&#123;tid&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按照结果嵌套</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentInfo2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select s.id sid, s.name sname, t.name tname  from student s, teacher t  where s.tid = t.id;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="112-一对多"><a class="markdownIt-Anchor" href="#112-一对多"></a> 11.2 一对多</h2><p>一个老师关联多个学生</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> tid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取指定老师下的学生信息和老师信息</span><span class="token class-name">Teacher</span> <span class="token function">getTeacherById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>按照结果嵌套</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--获取指定老师下的学生信息和老师信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacherById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select s.id sid, s.name sname, t.name tname, t.id tid  from student s, teacher t  where s.tid = tid and tid = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按照查询嵌套</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacherById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from teacher where id = #&#123;tid&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentsByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentsByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from student where tid = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="12-动态sql"><a class="markdownIt-Anchor" href="#12-动态sql"></a> 12. 动态sql</h1><p>根据不同的条件生成不同的sql</p><ul><li>环境</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客作者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览量'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Blog</span> blog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">IDUtils</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Mybatis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"狂神说"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setViews</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">addBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">IDUtils</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">addBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">IDUtils</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">addBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">IDUtils</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"微服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">addBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.dao.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into blog(id, title, author, create_time, views)    values(#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> view<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="121-if"><a class="markdownIt-Anchor" href="#121-if"></a> 12.1 iF</h2><ul><li>接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查询blog</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">queryBlogIF</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Mapper.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog where 1=1  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and title = #&#123;title&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and author = #&#123;author&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"Spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogIF</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Blog</span> blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="122-choosewhen-otherwise"><a class="markdownIt-Anchor" href="#122-choosewhen-otherwise"></a> 12.2 choose(when、otherwise)</h2><p><em>choose</em>标签，当满足第一个when的条件就不会再往下走了</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试choose--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title = #&#123;title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and author = #&#123;author&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>and views = #&#123;views&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="123-trimwhere-set"><a class="markdownIt-Anchor" href="#123-trimwhere-set"></a> 12.3 trim（where、set）</h2><p><em>where</em> 元素<mark>只会在子元素返回任何内容的情况下才插入 “WHERE” 子句</mark>。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试where--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title = #&#123;title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and author = #&#123;author&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试set--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  update blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title = #&#123;title&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>author = #&#123;author&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="124-foreach"><a class="markdownIt-Anchor" href="#124-foreach"></a> 12.4 foreach</h2><p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试foreach--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select *   from blog  where views in  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    #&#123;item&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实质：循环字符串拼接</p><ul><li>collection：需要遍历的集合</li><li>item：被遍历集合的每个元素</li><li>index：被遍历元素的索引</li><li>open：开始的字符</li><li>close：结束的字符</li><li>separator：分隔符</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试foreach</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">queryForeach</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*----------------------------------------------------------*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">TestForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryForeach</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="125-sql片段"><a class="markdownIt-Anchor" href="#125-sql片段"></a> 12.5 sql片段</h2><p>有的时候，会将公共的部分抽取出来，方便反复使用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试sql片段--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if_title_author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and title = #&#123;title&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and author = #&#123;author&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--测试where--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogWhere<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if_title_author<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最好基于单表来定义sql片段</li><li>sql片段中不要存在where标签</li></ul><h1 id="13-缓存"><a class="markdownIt-Anchor" href="#13-缓存"></a> 13. 缓存</h1><p>读写分离，主从复制</p><p>经常查询并且不经常改变的数据可以使用缓存</p><h2 id="131-mybatis的缓存"><a class="markdownIt-Anchor" href="#131-mybatis的缓存"></a> 13.1 Mybatis的缓存</h2><ul><li>Mybatis包含了一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存，缓存可以极大地提升查询效率</li><li>Mybatis系统中默认定义了两级缓存：<strong>一级缓存和二级缓存</strong><ul><li>默认情况下，只有一级缓存开启，（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存</li><li>为了提高扩展性，Mybatis定义了缓存接口Cache，可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><h2 id="132-一级缓存"><a class="markdownIt-Anchor" href="#132-一级缓存"></a> 13.2 一级缓存</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt="" /></p><p>可以看到，只有一次SQL查询，并且user1和user2是同一个对象</p><p>缓存失效的情况</p><ul><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改编原来的数据，所以会刷新缓存</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新id=2的用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"嗯哼2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">updateUserById</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img data-src="http://resource.silverbeats.cn/static/images/Mybatis/缓存失效_更新.png"><ul><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清理缓存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img data-src="http://resource.silverbeats.cn/static/images/Mybatis/缓存失效_更新.png"><h2 id="133-二级缓存"><a class="markdownIt-Anchor" href="#133-二级缓存"></a> 13.3 二级缓存</h2><p>二级缓存也称全局缓存，是基于namespace级别的缓存，一个名称空间对应一个二级缓存</p><p>工作机制</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了，但是目标是：一级缓存消失，会将其中的数据保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查出的数据可以放在自己对应的缓存（map）中</li></ul><p><strong>步骤：</strong></p><ul><li>开启全局缓存</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在Mapper.xml中添加cache标签</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession1 <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> sqlSession2 <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper1 <span class="token operator">=</span> sqlSession1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper2 <span class="token operator">=</span> sqlSession2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper1<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭sqlSession1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/二级缓存.png"><p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</p><p>可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><p>默认的清除策略是 LRU。</p><p>flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p><p>size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p><p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p><h2 id="134-缓存原理"><a class="markdownIt-Anchor" href="#134-缓存原理"></a> 13.4 缓存原理</h2><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/缓存原理.png"><p><strong>缓存顺序：</strong></p><ul><li>先找二级缓存</li><li>再找一级缓存</li><li>最后查询数据库</li></ul>]]></content>
    
    
    <summary type="html">Mybatis笔记整理</summary>
    
    
    
    <category term="java" scheme="blog.silverbeats.cn/categories/java/"/>
    
    <category term="Mybatis" scheme="blog.silverbeats.cn/categories/java/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="blog.silverbeats.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析-动态规划</title>
    <link href="blog.silverbeats.cn/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>blog.silverbeats.cn/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-10-02T08:27:27.000Z</published>
    <updated>2020-10-21T06:24:07.258Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划和分治法类似，其基本思想也是将待求解问题分解成若干个子问题。不同点在于，适用于动态规划的问题，其子问题往往不是相互独立，倘若使用分治法，会进行大量的重复计算。比如斐波那契数列求解问题，当计算Fib(10)时，会需要用到Fib(9)和Fib(8)，而计算Fib(9)也需要用到Fib(8)，实际上Fib(8)只需要计算一次即可，倘若使用分治法会对其进行两次的计算。（然而实际上，计算斐波那契数列不会用到这种求解方式，可以使用迭代解决，或者直接使用通项公式求解）</p><p>动态规划通常可以按下面四个步骤设计：</p><ul><li>找出最优解的性质，并刻画其结构特征</li><li>递归定义最优解</li><li>以自底向上的方式计算出最优解</li><li>根据计算最优时得到的信息，构造最优解</li></ul><p>动态规划往往是利用空间换时间</p><h1 id="1-矩阵连乘"><a class="markdownIt-Anchor" href="#1-矩阵连乘"></a> 1. 矩阵连乘</h1><p>矩阵的乘法有结合律，不同的计算顺序所耗费的代价不同。比如：</p><table><thead><tr><th>矩阵1</th><th>矩阵2</th><th>矩阵3</th></tr></thead><tbody><tr><td>A<sub>10×100</sub></td><td>A<sub>100×5</sub></td><td>A<sub>5×50</sub></td></tr></tbody></table><ul><li><p>计算顺序1：（矩阵1×矩阵2）×矩阵3</p><p>所需要的乘法次数：10×5×100 + 10×50×5 = 7500次</p><p>所需要的加法次数：10×5×99 + 10×50×4 = 6950次</p></li><li><p>计算顺序2：矩阵1×（矩阵2×矩阵3）</p><p>所需要的乘法次数：100×50×5 + 10×50×100  = 750000次</p><p>所需要的加法次数：100×50×4 + 10×50×99 = 497000次</p></li></ul><p>这里不做矩阵相乘的O(n<sup>3</sup>)写法，相关代码可以参考<a href="/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%88%86%E6%B2%BB%E6%B3%95/" title="算法设计与分析——分治法">算法设计与分析——分治法</a>Strassen矩阵乘法。</p><h1 id="2-最长公共子序列"><a class="markdownIt-Anchor" href="#2-最长公共子序列"></a> 2. 最长公共子序列</h1><h1 id="3-最大子段和"><a class="markdownIt-Anchor" href="#3-最大子段和"></a> 3. 最大子段和</h1><h1 id="4-凸多边形最优三角剖分"><a class="markdownIt-Anchor" href="#4-凸多边形最优三角剖分"></a> 4. 凸多边形最优三角剖分</h1><h1 id="5-多边形游戏"><a class="markdownIt-Anchor" href="#5-多边形游戏"></a> 5. 多边形游戏</h1><h1 id="6-图像压缩"><a class="markdownIt-Anchor" href="#6-图像压缩"></a> 6. 图像压缩</h1><h1 id="7-电路布线"><a class="markdownIt-Anchor" href="#7-电路布线"></a> 7. 电路布线</h1><h1 id="8-流水作业调度"><a class="markdownIt-Anchor" href="#8-流水作业调度"></a> 8. 流水作业调度</h1><h1 id="9-背包问题"><a class="markdownIt-Anchor" href="#9-背包问题"></a> 9. 背包问题</h1><h1 id="10-最优二叉搜索树"><a class="markdownIt-Anchor" href="#10-最优二叉搜索树"></a> 10. 最优二叉搜索树</h1>]]></content>
    
    
    <summary type="html">算法设计与分析教材，分治法篇，相关例题具体实现与解析、说明、详解</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法设计与分析" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="算法" scheme="blog.silverbeats.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="blog.silverbeats.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>KMP</title>
    <link href="blog.silverbeats.cn/KMP/"/>
    <id>blog.silverbeats.cn/KMP/</id>
    <published>2020-09-29T05:08:18.000Z</published>
    <updated>2020-10-22T12:20:40.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-kmp简介"><a class="markdownIt-Anchor" href="#1-kmp简介"></a> 1. KMP简介</h1><p>KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的时间复杂度O(m+n)</p><h1 id="2-kmp图解"><a class="markdownIt-Anchor" href="#2-kmp图解"></a> 2. KMP图解</h1><h2 id="21-通览编号从0开始"><a class="markdownIt-Anchor" href="#21-通览编号从0开始"></a> 2.1 通览(编号从0开始)</h2><h3 id="211-情况一"><a class="markdownIt-Anchor" href="#211-情况一"></a> 2.1.1 情况一</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_初始.png" alt="初始状态"><p>以上述主串和模式串为例子，可知，i指针指向主串，j指针指向模式串</p><p><strong>当主串i位置与模式串j位置字符一样，i，j向后移动一个位置</strong></p><h3 id="212-情况二"><a class="markdownIt-Anchor" href="#212-情况二"></a> 2.1.2 情况二</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_con1.png" alt="模式串编号5位置出现不匹配"><p>易知，当i=5，j=5时，主串与模式串发生不匹配，此时需要进行的操作就是KMP的精华所在。</p><ul><li>找到不匹配位置之前的字符串的最大公共前后缀。易知，最长公共前后缀是{A,B}，长度是2</li><li>进行如上图下半部分的操作。将字符串向后挪动，让前缀处于后缀的位置</li><li>易知，此时指针i是不需要任何变动。</li><li>挪动后，i，j所指向的位置继续比较。</li><li>字符串是不可能挪动的，实际上改变的是指针j，易知，挪动后指针j指向模式串编号为2的位置</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_con2.png" alt="模式串编号6位置出现不匹配"><p>上图，指针j经过调整后，从模式串编号2开始，继续和主串进行比较，当j指向编号6时发生不匹配，进行上述提到的步骤，经过调整得到下图情况三。</p><h3 id="213-情况三"><a class="markdownIt-Anchor" href="#213-情况三"></a> 2.1.3 情况三</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_con3.png" alt="需要匹配的模式串长度超出主串长度"><p><strong>每次移动指针j后，需要检查主串剩余长度是否≥模式串需要匹配的长度</strong></p><h3 id="214-综合"><a class="markdownIt-Anchor" href="#214-综合"></a> 2.1.4 综合</h3><p>根据上面提到的情况进行汇总，也就是代码实现的需要用到的步骤</p><ul><li>当主串i位置与模式串j位置字符一样，i，j向后移动一个位置</li><li>当出现不匹配时，需要寻找不匹配位置之前的串的最大公共前后缀长度，比如长度是n，并将j移动到编号为n的位置，这里需要结合next数组，详情见[Next数组](#3. Next数组)</li><li>移动指针j后，需要检查主串剩余长度是否≥模式串需要匹配的长度，不符合条件直接break，返回匹配失败</li><li>当j的位置超过了模式串的编号，说明匹配成功，返回模式串第一个字符在主串出现的位置</li></ul><h2 id="22-通览编号从1开始"><a class="markdownIt-Anchor" href="#22-通览编号从1开始"></a> 2.2 通览(编号从1开始)</h2><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_b1_con2.png"><p>整个过程与上面标号从0开始的过程大体一致，只有一个区别就是：调整指针j的值，指的位置是<mark>不匹配位置之前的字符串的<strong>最大公共前后缀长度+1</strong></mark></p><h1 id="3-next数组"><a class="markdownIt-Anchor" href="#3-next数组"></a> 3. Next数组</h1><p>通过上一节内容可以知道，KMP算法核心是指向模式串的指针j的移动，该指针的如何移动实际上与主串是什么无关，只与模式串有关。只需要将模式串研究明白，则可以对任意主串进行匹配。</p><p>因为要匹配任意主串，故很容易知道，模式串的<strong>每个位置</strong>都有可能和主串出现不匹配。这时，当模式串每个位置出现不匹配时，此时的指针j应该调整到哪个位置，需要研究。</p><ul><li>模式串第一个位置不匹配，j应该重新指向模式串的哪个位置</li><li>模式串第二个位置不匹配，j应该重新指向模式串的哪个位置</li><li>……</li></ul><p>将j重新指向的位置整理记录下来，存储到数组中，就是Next数组，Next数组的下标代表着该模式串出现不匹配的位置，数组下标对应的值就是j重新指向的位置。</p><p>同时需要考虑另外一个问题，这个问题在上面的内容有所体现。就是模式串起始编号是0还是1。起始编号不同，Next数组不同，二者之间相差一个位置</p><blockquote><p>在进行KMP算法之前，是需要先获取模式串的Next数组，以便使用。</p></blockquote><h2 id="31-起始位置0"><a class="markdownIt-Anchor" href="#31-起始位置0"></a> 3.1 起始位置：0</h2><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_next_s0.png" alt="模式串编号从0开始"><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_next_s0des.png" alt="上next数组表一些情况举例说明"><p>上图提供的示例不全，但足以说明当某个位置出现不匹配时，指针j重新定位的位置为：不匹配位置之前字符串的最大公共前后缀长度所对应的编号</p><p>首先，为什么首位是-1，因为模式串首位不匹配需要挪动的是指向主串的i指针，是特殊情况，这样在获取next数组值的时候发现是-1，就知道需要挪动i指针，然而在实现时，只需要判断j时候等于0即可，并不需要访问next[0]时候等于-1。</p><h2 id="32-起始位置1"><a class="markdownIt-Anchor" href="#32-起始位置1"></a> 3.2 起始位置：1</h2><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_next_s1.png" alt="模式串编号从1开始"><h1 id="4-nextval数组"><a class="markdownIt-Anchor" href="#4-nextval数组"></a> 4. NextVal数组</h1><h1 id="5-代码"><a class="markdownIt-Anchor" href="#5-代码"></a> 5. 代码</h1><h2 id="51-next"><a class="markdownIt-Anchor" href="#51-next"></a> 5.1 Next</h2><h3 id="511-模式串从0标号"><a class="markdownIt-Anchor" href="#511-模式串从0标号"></a> 5.1.1 模式串从0标号</h3><p>代码实现所使用到的next数组并不是[上面](#3.1 起始位置：0)提到的next数组。这里的next数组是每一位的最长公共前后缀的长度。比如next[2]=2，表示模式串前三个包括第三个字符，它们的最长公共前后缀长度是2。所以，倘若是模式串j位置出现不匹配，那么j位置之前的字符的最长公共前后缀长度是next[j-1]</p><p>关于下面<code>getNext</code>方法，可以理解为自己匹配自己</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取该模式串每个位置的最大公共前后缀长度</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 模式串长度</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>  next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// i代表最长前后缀长度</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>      i <span class="token operator">=</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token keyword">else</span>      next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 模式串匹配kmp算法,匹配成功返回匹配的位置,失败则返回-1</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里的next数组是每个位置的最长公共前后缀的长度</span>  <span class="token comment">// 比如next[2]表示0、1、2三个位置组成的字符串公共前后缀的最大长度</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 主串的长度mainLen,i指向主串比较的位置,j指向模式串比较的位置</span>  <span class="token keyword">int</span> mainLen <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> mainLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 情况三: 主串不够长</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mainLen <span class="token operator">-</span> i <span class="token operator">&lt;</span> pattern<span class="token punctuation">.</span>length <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">// 情况一: 主串的字符与模式串字符相等</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">// 当j指向的位置已经超过模式串长度时,说明匹配成功,则返回模式串在主串中匹配成功的位置</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> i <span class="token operator">-</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 情况二: 出现不匹配</span>      <span class="token comment">// 如果j是模式串0位置,特殊情况</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 挪动主串指针i</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 重定位到不匹配位置之前字符，最大公共前后缀长度</span>        j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 默认失败</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_s0_res.png" alt="运行结果"><p>同时可以发现，倘若要得到上面提到的那种next数组，只需要将里面所有的元素后移一个位置，然后首位添-1即可。上图中最后面的1会被舍弃。</p><h3 id="512-模式串从1标号"><a class="markdownIt-Anchor" href="#512-模式串从1标号"></a> 5.1.2 模式串从1标号</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取模式串的next数组</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 模式串长度</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>  next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// i代表最长前后缀长度</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>      i <span class="token operator">=</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span>next<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 倘若写上了这一步,下面的kmp中的最后一个else只需要写j = next[j]即可</span>  <span class="token comment">// 倘若没有这一步,下面的kmp中的最后一个else需要写成j = next[j - 1] + 1</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> next<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    next<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取该模式串的next数组</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">getNext2</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 主串的长度mainLen,i指向主串比较的位置,j指向模式串比较的位置</span>  <span class="token keyword">int</span> mainLen <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> mainLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mainLen <span class="token operator">-</span> i <span class="token operator">&lt;</span> pattern<span class="token punctuation">.</span>length <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">// 主串的字符与模式串字符相等</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">// 当j指向的位置已经超过模式串长度时,说明匹配成功,则返回模式串在主串中匹配成功的位置</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> i <span class="token operator">-</span> pattern<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这里有变化</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果模式串在j这个位置与主串i这个位置字符不相等,则需要通过next数组来重新定位指向模式串字符的j的值</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里有变化,倘若getNext有最后一个for循环</span>        j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 倘若getNext没有最后一个for循环需要下面这种写法</span>        <span class="token comment">// j = next[j - 1] + 1;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 默认失败</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_s1_res.png" alt="运行结果"><h2 id="52-nextval"><a class="markdownIt-Anchor" href="#52-nextval"></a> 5.2 NextVal</h2>]]></content>
    
    
    <summary type="html">数据结构中理解起来比较困难的KMP算法详解以及代码实现</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="串" scheme="blog.silverbeats.cn/tags/%E4%B8%B2/"/>
    
    <category term="KMP" scheme="blog.silverbeats.cn/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析——分治法</title>
    <link href="blog.silverbeats.cn/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    <id>blog.silverbeats.cn/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%88%86%E6%B2%BB%E6%B3%95/</id>
    <published>2020-09-19T23:48:47.000Z</published>
    <updated>2020-10-22T12:32:33.944Z</updated>
    
    <content type="html"><![CDATA[<p>分治法的基本思想是将一个规模为n的问题分解为k个规模较小的子问题，这些子问题互相独立且与原问题相同。递归的解决这些子问题，然后将各个子问题的解合并得到原问题。</p><h1 id="1-二分搜索法"><a class="markdownIt-Anchor" href="#1-二分搜索法"></a> 1. 二分搜索法</h1><p>最简单的想法是从头找到尾，进行遍历，时间复杂度为O(n)，而利用分治法思想，使用二分搜索法，可以将时间复杂度缩小为O(logn)，但是该方法有一个前提就是，这一个序列必须有序。</p><p><strong>下面代码假设序列是非递减序列</strong></p><ul><li>递归写法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这说明没有数字了,说明没找到,返回-1</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">to</span> <span class="token operator">&lt;</span> from<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 得到from至to中间位置的数字的下标</span>  <span class="token keyword">int</span> midPos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">to</span> <span class="token operator">+</span> from<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 如果找到了该数字,返回数组下标</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>midPos<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> midPos<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>midPos<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果中间的数字比目标值大,说明目标值值在中间值的左边</span>    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> from<span class="token punctuation">,</span> midPos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果中间的数字比目标值大,说明目标值值在中间值的右边</span>    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> midPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>非递归写法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 两个指针指向target存在区域的左右边界,圈定范围</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 得到该范围的中间位置</span>    <span class="token keyword">int</span> midPos <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 说明找到了</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>midPos<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> midPos<span class="token punctuation">;</span>    <span class="token comment">// 如果中间值大,说明目标值在中间值左边,右边界right指针挪到midPos的前一个</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>midPos<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> midPos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 如果中间值大,说明目标值在中间值左边,右边界left指针挪到midPos的后一个</span>    <span class="token keyword">else</span> left <span class="token operator">=</span> midPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 找不到返回-1</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-大整数乘法"><a class="markdownIt-Anchor" href="#2-大整数乘法"></a> 2. 大整数乘法</h1><p>对于乘法，直接使用乘法的运算符会很方便，但是仅限于参加运算的整数能在计算机硬件对整数的表示范围内直接处理时才是合理的。当需要处理很大的整数时，无法在计算机硬件能直接表示的整数范围内进行处理，若用浮点数表示，只能得到近似值，计算结果中的有效位数也会受到限制。</p><p>同时，当XY分3块，4块乃至更多，只会越来越慢。当分两块时，初步版需要4次，改进版需要3次相乘；而分成3块，其初步版就需要9次，想要得到比分成2块改进版的3次更少的乘法次数是不可能的，更何况是16次乘法的分4块初步版。</p><p>同时下图所示的过程有前提条件：</p><ul><li>X,Y都是n位，且n是2的整数次幂，只有这样才能保证每次划分A,B,C,D四个部分位数保持一致</li><li>（A-B），(D-C)这个两个数也需要满足上面这一条要求。因为这两个数相乘也是需要递归使用同一个函数</li></ul><p>然而前提条件很多，实际上在使用时，上面两个条件都很难达到。当落地时，是实现初步版，计算4次乘法。</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95/%E5%A4%A7%E6%95%B4%E6%95%B0%E4%B9%98%E6%B3%95.png" alt="大整数乘法逻辑" /></p><p>这里进行说明，为什么X可以那样表示。</p><p>比如一个十进制数1234，一共4位，按照上面的样子进行划分成左右AB两部分，则1234 = 12 * 10<sup>2</sup> + 34，这里的10其实是进制</p><p>同理，案例中，XY都是二进制，如X = 1101，X = 11 * 2<sup>2</sup> + 01，1101的十进制是13，11的十进制是3，01的十进制是1，X = 3 * 4 + 1 = 13</p><h2 id="21-on2写法"><a class="markdownIt-Anchor" href="#21-on2写法"></a> 2.1 O(n<sup>2</sup>)写法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 因为数字很大,无法用某个整数数据类型表示,需要转换成整型数组,方便处理</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">NumToArr</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  num <span class="token operator">=</span> <span class="token function">fliter</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 倘若传进来的字符串num中有0开头,比如0123,,或者00123,需要将0去掉</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fliter</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> pos0 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pos0 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>pos0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>pos0<span class="token punctuation">)</span><span class="token punctuation">;</span>    pos0 <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// O(n2)的大整数乘法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">LargeIntegerMultiplication</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len1 <span class="token operator">=</span> num1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span> len2 <span class="token operator">=</span> num2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len1 <span class="token operator">*</span> len2<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> p <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理进制</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>      res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 从后向前充填res数组，可能没有填满，导致前几位有0</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从头向后遍历当遇到第一次非0数字后,flag为true</span>  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-分治法版本的on2"><a class="markdownIt-Anchor" href="#22-分治法版本的on2"></a> 2.2 分治法版本的O(n<sup>2</sup>)</h2><h3 id="221-主体"><a class="markdownIt-Anchor" href="#221-主体"></a> 2.2.1 主体</h3><p>这里使用字符串，方便截取获得ABCD</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 大整数乘法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储num1乘num2的结果的数组</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">;</span>  <span class="token comment">// 只要有一个字符串数字长度为1,那么就可以直接相乘了</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 相乘</span>    res <span class="token operator">=</span> <span class="token function">mult</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 因为num1和num2长度不一定相同,假设num1长度为a,num2长度为b,同样分成两部分</span>    <span class="token comment">// num1 = A*10^(a/2) + B</span>    <span class="token comment">// num2 = C*10^(b/2) + D</span>    <span class="token comment">// num1*num2 = AC*10^(a/2+b/2) + BD + AD10^(a/2) + BC*10^(b/2)</span>    <span class="token comment">// 开始截取字符串,得到ABCD</span>    <span class="token keyword">int</span> halfNum1 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> halfNum2 <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token class-name">A</span> <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> halfNum1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">B</span> <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>halfNum1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">C</span> <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> halfNum2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">D</span> <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>halfNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始相乘</span>    <span class="token class-name">String</span> AC <span class="token operator">=</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BD <span class="token operator">=</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    AD <span class="token operator">=</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BC <span class="token operator">=</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 位移,相加并得到最终结果</span>    res <span class="token operator">=</span> <span class="token function">arrAddArr</span><span class="token punctuation">(</span>      <span class="token function">strNumToArr</span><span class="token punctuation">(</span>BD<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">arrAddArr</span><span class="token punctuation">(</span>        <span class="token function">arrAddArr</span><span class="token punctuation">(</span>          <span class="token function">move</span><span class="token punctuation">(</span><span class="token function">strNumToArr</span><span class="token punctuation">(</span>AC<span class="token punctuation">)</span><span class="token punctuation">,</span> halfNum1 <span class="token operator">+</span> halfNum2<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">move</span><span class="token punctuation">(</span><span class="token function">strNumToArr</span><span class="token punctuation">(</span>AD<span class="token punctuation">)</span><span class="token punctuation">,</span> halfNum1<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">move</span><span class="token punctuation">(</span><span class="token function">strNumToArr</span><span class="token punctuation">(</span>BC<span class="token punctuation">)</span><span class="token punctuation">,</span> halfNum2<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理进制</span>  <span class="token function">decimalism</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理首位0,并转成字符串返回</span>  <span class="token keyword">return</span> <span class="token function">arrToStr</span><span class="token punctuation">(</span><span class="token function">filterZero</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/分治法/字符串大整数乘法结果.png" alt="运行结果"><h3 id="222-主体之外的函数"><a class="markdownIt-Anchor" href="#222-主体之外的函数"></a> 2.2.2 主体之外的函数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 只有当str1或者str2的length为1时才会执行这里</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mult</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 将两个字符串变为数组,并且每个元素都是int类型</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 二者进行相乘</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回乘积结果</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 字符串数字变数组</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">strNumToArr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 数组变字符串</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">arrToStr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// arr数组所代表的数字扩大n位</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 两个数组相加</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrAddArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//123,12</span>  <span class="token comment">// 这里还需要长度＋1是因为：900 + 900 = 1800类似这种情况</span>  <span class="token comment">// 另外两个相加的数组的长度不一定一样</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> p <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> dist <span class="token operator">=</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dist <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arr1短</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr2<span class="token punctuation">[</span>i <span class="token operator">-</span> dist<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span>dist <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dist <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arr2短</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i <span class="token operator">+</span> dist<span class="token punctuation">]</span> <span class="token operator">+</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> dist <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理进制</span>  <span class="token function">decimalism</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 再次考虑,当res[0]为0的情况</span>  <span class="token keyword">return</span> <span class="token function">filterZero</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 进制处理</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">decimalism</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 处理进制</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理数组arr首位为0的情况</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">filterZero</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token comment">// 从头遍历arr,当出现第一个不为0的数字后,会变成true</span>  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 用来统计非0数字前面,0的个数</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 倘若还没有遇到第一个不为0的数字,计数+1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 比如[0,0,1,2,3],经过统计k=2,那么最终的finalRes长度应该是3 = arr.length - k</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> finalRes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 开始拷贝的位置下标应该是k</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> finalRes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> finalRes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> finalRes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-strassen矩阵乘法"><a class="markdownIt-Anchor" href="#3-strassen矩阵乘法"></a> 3. Strassen矩阵乘法</h1><p>矩阵乘法，线性代数常见，假设两个矩阵同型AB，都是n×n的矩阵，C = AB，则在计算矩阵C时，C中每个元素都需要进行n次乘法和n-1次加法，最终求出C，n<sup>2</sup>个元素需要的计算时间复杂度是O(n<sup>3</sup>)</p><h2 id="31-on3写法"><a class="markdownIt-Anchor" href="#31-on3写法"></a> 3.1 O(n<sup>3</sup>)写法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 矩阵m1,a行b列;矩阵m2,c行d列</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// m1的行数,m1的列数</span>  <span class="token keyword">int</span> m1Col <span class="token operator">=</span> m1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> m1Row <span class="token operator">=</span> m1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// m2的行数,m2的列数</span>  <span class="token keyword">int</span> m2Col <span class="token operator">=</span> m1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> m2Row <span class="token operator">=</span> m2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 检查矩阵相乘的条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>m1Row <span class="token operator">!=</span> m2Col<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"矩阵无法相乘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 新建一个存储结果的矩阵</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m1Col<span class="token punctuation">]</span><span class="token punctuation">[</span>m2Row<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历m1的第i行</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m1Col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历m2的第j列</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m2Row<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 遍历m2的第k行</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m2Col<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> m1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> m2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-分治思想"><a class="markdownIt-Anchor" href="#32-分治思想"></a> 3.2 分治思想</h2><p>假设条件：</p><ul><li>两个矩阵都是n×n</li><li>n都是2的幂</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/分治法/Strassen.png" alt="Strassen"><h1 id="4-棋盘覆盖"><a class="markdownIt-Anchor" href="#4-棋盘覆盖"></a> 4. 棋盘覆盖</h1><h1 id="5-合并排序"><a class="markdownIt-Anchor" href="#5-合并排序"></a> 5. 合并排序</h1><p>其实就是归并排序，相关代码可以查看<a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a></p><h1 id="6-快速排序"><a class="markdownIt-Anchor" href="#6-快速排序"></a> 6. 快速排序</h1><p>相关代码可以查看<a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a></p><p>快速排序的运行时间与每次划分是否对称有关，划分的最坏情况就是一边1个元素，另一边n-1的元素，当每次都划分对称的时候，时间复杂度是O(nlogn)，当每次划分都最坏的时候，时间复杂度是O(n<sup>2</sup>)，在<a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a>提到，对于快速排序来说，越有序越慢，因为越有序，每次划分出现最坏情况的可能性就越大。</p><p>为了尽可能每次划分都较为对称，可以采用随机选择策略的快速排序算法。快速排序对于基准的选择都是待排序序列的第一个元素，随机选择意思就是说，在进行快速排序之前，先从序列中随机挑一个元素与序列首位进行位置交换，这样快排时的基准就是随机的了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实现随机选择基准</span><span class="token comment">// (int)(Math.random()*(high - low + 1))范围：[0,high - low + 1)</span><span class="token comment">// (int)(Math.random()*(high - low + 1)) + low范围：[low,high + 1)，即[low, high]</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">RandomizedPartition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// i是从low-high随机挑选出来的下标</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> low<span class="token punctuation">;</span>  <span class="token comment">// 将i位置的元素与待排序范围的首位进行交换</span>  <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">QSort_Partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 快速排序</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">QSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> piovtpos <span class="token operator">=</span> <span class="token class-name">RandomizedPartition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排左边</span>    <span class="token class-name">QSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> piovtpos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排右边</span>    <span class="token class-name">QSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> piovtpos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 一趟快速排序</span><span class="token comment">// 参数1：数组,参数2：数组的起始位置,参数3：数组的终了位置,闭区间</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">QSort_Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 指定基准</span>  <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> base<span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>  <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-线性时间选择"><a class="markdownIt-Anchor" href="#7-线性时间选择"></a> 7. 线性时间选择</h1><p>给定一串数字，从中选出第k小，时间复杂度要求是O(n)，即线性时间选择。</p><h2 id="71-利用堆排序获得第k小"><a class="markdownIt-Anchor" href="#71-利用堆排序获得第k小"></a> 7.1 利用堆排序获得第k小</h2><p>易知，倘若要知道第k小的关键字，那么只需要利用小根堆，进行k次堆调整，即可得到第k小的关键字。</p><p>其中adjustHeap函数的代码可见<a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a>，其中adjustHeap函数是调整成大根堆，只需要将循环中两个if判断条件中的小于号改成大于号，即可实现调整为小根堆的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">heapSortFindK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储arr,目的是堆排序过程中不改变原数组</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 首先构建小根堆</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//从第一个非叶子结点从下至上，从右至左调整结构</span>    <span class="token function">adjustHeap</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 经过上一步可以得到小根堆,现在开始排序</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> len <span class="token operator">-</span> k<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//将堆顶元素与末尾元素进行交换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重新对堆进行调整</span>    <span class="token function">adjustHeap</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> temp<span class="token punctuation">[</span>len <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="72-利用快速排序获得第k小"><a class="markdownIt-Anchor" href="#72-利用快速排序获得第k小"></a> 7.2 利用快速排序获得第k小</h2><p>每一次快排都会选则一个基准，将其排到它的最终位置，而第k小在排好序的序列中排在第k位。所以，可以通过比较每次快排后基准的最终位置与k，来获取第k小</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">QSortFindK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 首先,一趟快速排序,确定一个关键字的最终位置</span>  <span class="token keyword">int</span> piovtpos <span class="token operator">=</span> <span class="token class-name">QSort_Partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 易知，为了使快速排序的效率变高，可以利用上述随机策略法。</span>  <span class="token comment">// int piovtpos = RandomizedPartition(arr, start, end);</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>piovtpos <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> k<span class="token punctuation">)</span>    <span class="token comment">// 倘若该数字正好是第k小</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>piovtpos<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>piovtpos <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 说明目标在该数字的左边</span>    <span class="token keyword">return</span> <span class="token class-name">QSortFindK</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> start<span class="token punctuation">,</span> piovtpos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token class-name">QSortFindK</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> piovtpos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-最接近点对问题"><a class="markdownIt-Anchor" href="#8-最接近点对问题"></a> 8. 最接近点对问题</h1><p>平面中有n个点，求出哪两个点之间的距离是最短的。很容易想到O(n<sup>2</sup>)的写法，倘若利用分治法，可以将时间复杂度降低为O(nlog<sub>2</sub>n)</p><h1 id="9-循环赛日程表"><a class="markdownIt-Anchor" href="#9-循环赛日程表"></a> 9. 循环赛日程表</h1>]]></content>
    
    
    <summary type="html">算法设计与分析教材，分治法篇，相关例题具体实现与解析、说明、详解</summary>
    
    
    
    <category term="算法" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法设计与分析" scheme="blog.silverbeats.cn/categories/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="算法" scheme="blog.silverbeats.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="分治法" scheme="blog.silverbeats.cn/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
</feed>
