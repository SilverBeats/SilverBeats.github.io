<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序</title>
      <link href="%E6%8E%92%E5%BA%8F/"/>
      <url>%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-插入排序"><a class="markdownIt-Anchor" href="#1-插入排序"></a> 1. 插入排序</h1><h2 id="11-直接插入排序"><a class="markdownIt-Anchor" href="#11-直接插入排序"></a> 1.1 直接插入排序</h2><p>直接插入排序，思想较为简单。</p><p>可以类比平常打扑克抓牌的过程。每次抓一张牌时，都会将这张牌与之前手里的牌（之前手里的牌是有序的）进行比较（从左向右比，或者从右向左比），得到一个最终的插入位置，然后插入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接插入排序, 假定前面是有序的，从乱序的后面取一个数插入有序的前面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 进行插入排序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">arr[a] = arr[b];</span><br><span class="line">arr[b] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="http://resource.silverbeats.cn/static/images/insertSort_process.png"><p>上面的代码可以再简化一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接插入排序, 假定前面是有序的，从乱序的后面取一个数插入有序的前面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 进行插入排序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]; j--)</span><br><span class="line">    swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-折半插入排序"><a class="markdownIt-Anchor" href="#12-折半插入排序"></a> 1.2 折半插入排序</h2><p>直接插入排序确定位置是通过将待排序的元素，与前面有序的序列一个个比较过去，从而得到最终的插入位置。那么，因为是顺序存储，利用数组实现排序，可以对前面的有序序列使用折半查找来确定最终插入位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binaryInsertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// low high mid用于折半查找</span></span><br><span class="line">  <span class="keyword">int</span> low, high, mid;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">      <span class="comment">// (high+low)/2 这样的写法可能会超出int的表示范围</span></span><br><span class="line">      mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (arr[mid] &lt; arr[i])</span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// high + 1就是插入的位置</span></span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    <span class="comment">// 找到插入位置后,对元素进行挪动</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt; high; j--)</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">    <span class="comment">// 将待排序的元素插入找到的位置</span></span><br><span class="line">    arr[high + <span class="number">1</span>] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-希尔排序"><a class="markdownIt-Anchor" href="#13-希尔排序"></a> 1.3 希尔排序</h2><p>希尔排序又称为增量排序，当增量为1时，其实就是直接插入排序。增量的选取一般两种方案：</p><ul><li>希尔提出，对数组长度不断折半。比如数组长度是32，则增量dk分别是：16,8,4,2,1</li><li>帕佩尔诺夫和斯塔舍维奇提出，dk = 2<sup>k</sup> + 1，dk &lt; 数组长度，k ≥ 0。比如数组长度是32，此时k 只能从4开始，则k = 4，dk = 17；k = 3，dk = 9；k = 2，dk = 5；k = 1，dk = 3；此时还需要额外添加dk = 1，算是一个兜底作用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">int</span> dk = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (dk != <span class="number">0</span>) &#123;</span><br><span class="line">    shell_InsertSort(arr, dk);</span><br><span class="line">    <span class="comment">// shell_BinaryInsertSort(arr, dk);</span></span><br><span class="line">    dk = dk &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Title</span>: shell_InsertSort</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>: 希尔排序，直接插入法进行排序</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ar: 数组</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dk: 间隔</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shell_InsertSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> dk)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i = dk; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (j = i - dk; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= dk) &#123;</span><br><span class="line">      arr[j + dk] = arr[j];</span><br><span class="line">      arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Title</span>: shell_BinaryInsertSort</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>: 希尔排序，折半插入法进行排序</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> arr: 数组</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dk: 间隔</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shell_BinaryInsertSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> dk)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, high, low, mid, temp;</span><br><span class="line">  <span class="keyword">for</span> (i = dk; i &lt; arr.length; i++) &#123;</span><br><span class="line">    low = i % dk;</span><br><span class="line">    high = i - dk;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">      mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> (arr[mid] &lt; arr[i])</span><br><span class="line">        low = mid + dk;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        high = mid - dk;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    <span class="comment">// high + dk 即为插入的位置</span></span><br><span class="line">    <span class="keyword">for</span> (j = i - dk; j &gt; high; j -= dk)</span><br><span class="line">      arr[j + dk] = arr[j];</span><br><span class="line">    arr[high + dk] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后面那个通过折半插入法进行排序纯属练手，效率远远不及直接插入法希尔排序</p><p>前者，规模1W，20次，19ms</p><p>前者，规模10W，20次，187ms</p><p>后者，规模1W，20次，129ms</p><p>后者，规模10W，20次，10761ms</p><p>估计是在dk较小的时候，序列基本有序，折半插入的话是不管有没有序都得比较那么多次，而直接插入是越有序越快。</p></blockquote><h1 id="2-选择排序"><a class="markdownIt-Anchor" href="#2-选择排序"></a> 2. 选择排序</h1><h2 id="21-堆排序"><a class="markdownIt-Anchor" href="#21-堆排序"></a> 2.1 堆排序</h2><p>堆又分大根堆和小根堆，倘若要升序，选择大根堆，倘若要降序，选择小根堆。</p><p>大根堆：根节点的数字不小于左右孩子的值</p><p>小根堆：根节点的值不大于左右孩子的值</p><p>堆排序是把一个数组，看做是一颗完全二叉树，排序步骤：</p><ul><li>先对乱序的数组建立大根堆，可以得到数组的第一个元素（看做完全二叉树的话就是根节点）就是最大的</li><li>将其与数组最后面的那个值交换，然后重新调整，变为大根堆</li><li>依次类推</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 首先构建大根堆</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> pos = arr.length/<span class="number">2</span> - <span class="number">1</span>; pos &gt;= <span class="number">0</span>; --pos) &#123;</span><br><span class="line">    <span class="comment">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class="line">    adjustHeap(arr, pos, arr.length);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(Arrays.toString(arr));</span><br><span class="line">  <span class="comment">// 经过上一步可以得到大根堆,现在开始排序</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">    <span class="comment">//将堆顶元素与末尾元素进行交换</span></span><br><span class="line">    swap(arr,<span class="number">0</span>, j);</span><br><span class="line">    <span class="comment">//重新对堆进行调整</span></span><br><span class="line">    adjustHeap(arr,<span class="number">0</span>, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调整为大根堆</span></span><br><span class="line"><span class="comment">// arr是要调整的数组, i是要调整的数组下标, length是调整的范围</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> pos, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 临时存储被调整的数组数据</span></span><br><span class="line">  <span class="keyword">int</span> temp = arr[pos];</span><br><span class="line">  <span class="comment">// pos是被调整元素的数组下标, 2*pos+1 是其左孩子 2*pos + 2是其右孩子</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = pos*<span class="number">2</span> + <span class="number">1</span>; i &lt; length; i = i*<span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">前面的判断条件保证它的右孩子是无序的,</span></span><br><span class="line"><span class="comment">在堆排序过程中会将最大值不断放到后面, length就是限制条件,可以通过这个条件让有序的右孩子不被波及</span></span><br><span class="line"><span class="comment">这个if保证i的下标对应的值是两个孩子中最大的那一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">if</span>(i + <span class="number">1</span> &lt; length &amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果根节点小于它的孩子,则交换</span></span><br><span class="line">    <span class="keyword">if</span>(temp &lt; arr[i]) &#123;</span><br><span class="line">      <span class="comment">// 交换根节点和它孩子的值</span></span><br><span class="line">      swap(arr, pos, i);</span><br><span class="line">      <span class="comment">// 因为经过了调整,当被调整的节点挪了位置,可能会导致后面的序列出问题,所以需要让pos定到i这个位置</span></span><br><span class="line">      pos = i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-简单选择排序"><a class="markdownIt-Anchor" href="#22-简单选择排序"></a> 2.2 简单选择排序</h2><p>思路简单：每次选择最大排到后面，或者每次选择最小的排到最前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 每次过滤一遍数组将最小值放到前面</span></span><br><span class="line">  <span class="keyword">int</span> i, j, min;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    min = i; <span class="comment">// 假定第i个位置最小</span></span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">        min = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i != min) swap(arr, i, min);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另外一种做法，是每次将最小的放到最前面，最大的放到最后面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort_2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 每次过滤一遍数组将最小值放到前面</span></span><br><span class="line">  <span class="comment">// 将最大的数字放到最后面</span></span><br><span class="line">  <span class="keyword">int</span> i, j, min, max, lastPos;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= arr.length &gt;&gt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">    min = max = i;</span><br><span class="line">    lastPos = arr.length - i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= lastPos; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">        min = j;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[max])</span><br><span class="line">        max = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i != min)</span><br><span class="line">      swap(arr, i, min);</span><br><span class="line">    <span class="keyword">if</span> (lastPos != max)</span><br><span class="line">      swap(arr, max, lastPos);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前者，规模10W，20次，54408ms，2720ms/次</p><p>后者，规模10W，20次，53938ms，2697ms/次</p><p>呵呵……</p></blockquote><h1 id="3-交换排序"><a class="markdownIt-Anchor" href="#3-交换排序"></a> 3. 交换排序</h1><h2 id="31-冒泡排序"><a class="markdownIt-Anchor" href="#31-冒泡排序"></a> 3.1 冒泡排序</h2><p>冒泡排序很经典，每次排序都能讲最大的数字排到最后，或者将最小的数字排到最前面</p><blockquote><p>听说冒泡是毒瘤，比较次数和交换次数超级多</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续发挥，双向冒泡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双向冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubble2Ways</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> left = <span class="number">0</span>, right = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">boolean</span> flag;</span><br><span class="line">  <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 从左往右将最大的数字挪到最右边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt; right; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">        swap(arr, i, i + <span class="number">1</span>);</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 挪到结束后right--</span></span><br><span class="line">    --right;</span><br><span class="line">    <span class="comment">// 从右往左将最小的数字挪到最左边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = right; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">        swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++left;</span><br><span class="line">    <span class="keyword">if</span>(!flag)<span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前者，规模1W，20次，1362ms，68ms/次</p><p>后者，规模1W，20次，1445ms，72ms/次</p><p>前者，规模10W，20次，303042ms，5min，15152ms/次</p><p>后者，规模10W，20次，202945ms，3min23s，10147ms/次</p><p>……还是有点提高的</p></blockquote><h2 id="32-快速排序"><a class="markdownIt-Anchor" href="#32-快速排序"></a> 3.2 快速排序</h2><p>利用分而治之的思想。每一次快速排序会实现这样的结果：</p><ul><li>该数字的左边都比它小</li><li>该数字的右边都不小于它</li><li>每一次排序都会确定一个数的最终位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">int</span> piovtpos = <span class="keyword">this</span>.QSort_Partition(arr, low, high);</span><br><span class="line">    <span class="comment">// 排左边</span></span><br><span class="line">    QSort(arr, low, piovtpos - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 排右边</span></span><br><span class="line">    QSort(arr, piovtpos + <span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一趟快速排序</span></span><br><span class="line"><span class="comment">// 参数1：数组,参数2：数组的起始位置,参数3：数组的终了位置,闭区间</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">QSort_Partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 指定基准</span></span><br><span class="line">  <span class="keyword">int</span> base = arr[left];</span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= base) right--;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) arr[left] = arr[right];</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt; base) left++;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) arr[right] = arr[left];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[left] = base;</span><br><span class="line">  <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>平均时间复杂度为nlogn的算法中，如：堆排序，快速排序，希尔排序，归并排序中，快速排序前面系数最小</p><p>规模1W，20次，15ms</p><p>规模10W，20次，359ms</p><p>快速排序有其特点：<mark>越有序越慢，越无序越快</mark></p></blockquote><h1 id="4-二路归并排序"><a class="markdownIt-Anchor" href="#4-二路归并排序"></a> 4. 二路归并排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Title</span>: mergeSort</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 归并排序</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> arr: int类型数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> leftStart, <span class="keyword">int</span> rightBound)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(leftStart == rightBound)<span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span>(leftStart &gt; rightBound || leftStart &lt; <span class="number">0</span> || rightBound &lt; <span class="number">0</span>)<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> mid = leftStart + ((rightBound - leftStart) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  mergeSort(arr,leftStart,mid);</span><br><span class="line">  mergeSort(arr,mid+<span class="number">1</span>,rightBound);</span><br><span class="line">  merge(arr, leftStart, mid+<span class="number">1</span>, rightBound);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: merge</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:一次归并,将两个有序的数组合并，仍有序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> leftStart 第一个数组的左边界开始的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rightStart 第二个数组的左边界开始的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rightBound 第二个数组的右边界结束的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> leftStart, <span class="keyword">int</span> rightStart, <span class="keyword">int</span> rightBound)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 合并思想：新建一个数组，每次将小的数字放到新建的数组中</span></span><br><span class="line">  <span class="keyword">int</span> i = leftStart, j = rightStart, k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">int</span>[rightBound - leftStart + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span>(i &lt; rightStart &amp;&amp; j&lt;= rightBound)</span><br><span class="line">    tempArr[k++] = arr[i] &lt;= arr[j]?arr[i++]:arr[j++];</span><br><span class="line">  <span class="comment">// 倘若还有剩余</span></span><br><span class="line">  <span class="keyword">while</span>(i &lt; rightStart)</span><br><span class="line">    tempArr[k++] = arr[i++];</span><br><span class="line">  <span class="keyword">while</span>(j &lt;= rightBound)</span><br><span class="line">    tempArr[k++] = arr[j++];</span><br><span class="line">  <span class="comment">// 此时tempArr就是合并好有序的数组，对原始数组进行覆盖</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> p = leftStart; p &lt;= rightBound; p++)</span><br><span class="line">    arr[p] = tempArr[p - leftStart];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>规模1W，20次，32ms</p><p>规模10W，20次，241ms</p></blockquote><h1 id="5-基数排序"><a class="markdownIt-Anchor" href="#5-基数排序"></a> 5. 基数排序</h1><p>基数排序需要利用桶</p><h2 id="51-基数排序"><a class="markdownIt-Anchor" href="#51-基数排序"></a> 5.1 基数排序</h2><h2 id="52-计数排序"><a class="markdownIt-Anchor" href="#52-计数排序"></a> 5.2 计数排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Title</span>: countSort</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>:计数排序,适用于数字的范围小，排序量大的数组</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> min 该数组中的最小值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> max 该数组中的最大值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: int[]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] countSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> min, <span class="keyword">int</span> max) &#123;</span><br><span class="line">  <span class="comment">// arr的最小值到最大值之间的数字，即为tempArr的下标</span></span><br><span class="line">  <span class="keyword">int</span>[] countArr = <span class="keyword">new</span> <span class="keyword">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 统计arr中每个数字出现的次数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++)</span><br><span class="line">    countArr[arr[j] - min]++;</span><br><span class="line">  <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">  <span class="comment">// 将countArr变为累加数组,这一步主要是实现算法稳定</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; countArr.length; m++)</span><br><span class="line">    countArr[m] += countArr[m - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = arr.length - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">    res[--countArr[arr[k] - min]] = arr[k];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo之yelee主题配置</title>
      <link href="hexo%E4%B9%8Byelee%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>hexo%E4%B9%8Byelee%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><a href="https://www.jianshu.com/p/f9b213097c42">使用Github搭建Hexo技术博客托管在GitHub Pages上–安装教程</a></li><li><a href="https://www.jianshu.com/p/288ab888ac42">博客系统hexo yelee搭建历程</a></li><li><a href="https://blog.csdn.net/u010996565/article/details/89196612">hexo在文章中添加图片</a></li><li><a href="https://www.jianshu.com/p/6991e8e7f01b">Hexo七牛插件安装与使用</a></li></ul><h1 id="1-前期准备"><a class="markdownIt-Anchor" href="#1-前期准备"></a> 1. 前期准备</h1><ol><li><p>github账号、安装<a href="http://git-scm.com/">git</a></p></li><li><p><a href="http://nodejs.org">nodejs</a></p></li><li><p>notepad++或者editplus，记事本也可以</p></li><li><p>typora（后期写md格式文章用的软件）</p></li><li><p>可选内容</p><ul><li>修改node.js源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 设置 淘宝镜像源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">// 查看使用的镜像源</span><br><span class="line">npm config get registry</span><br><span class="line">// 安装淘宝镜像源</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-实操"><a class="markdownIt-Anchor" href="#2-实操"></a> 2. 实操</h1><h2 id="21-安装hexo框架"><a class="markdownIt-Anchor" href="#21-安装hexo框架"></a> 2.1 安装Hexo框架</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">// 或者</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="22-创建hexo项目"><a class="markdownIt-Anchor" href="#22-创建hexo项目"></a> 2.2 创建Hexo项目</h2><ul><li>在本地，选择要创建项目的目录</li><li>打开Git Bash（或者cmd命令行，或者powershell），并进入该目录</li><li>输入并运行<code>hexo init blog</code>之后，会在当前目录下创建blog文件夹，并初始化相关文件</li><li><code>cd blog</code>进入创建的项目，运行<code>npm install</code>下载相关依赖包</li></ul><h2 id="23-相关命令"><a class="markdownIt-Anchor" href="#23-相关命令"></a> 2.3 相关命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清理之前生成的旧文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment">#重新生成静态文件 下面是简写</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo g</span><br><span class="line"><span class="comment">#本地预览 下面是简写</span></span><br><span class="line">hexo server</span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">#合并写法</span></span><br><span class="line">hexo clean | hexo g | hexo s</span><br><span class="line"><span class="comment">#通过git提交到仓库,需要配置,见后文</span></span><br><span class="line">hexo deploy</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="24-下载yelee主题"><a class="markdownIt-Anchor" href="#24-下载yelee主题"></a> 2.4 下载yelee主题</h2><p>在当前目录下，输入命令<code>git clone https://github.com/MOxFIVE/hexo-theme-yelee themes/yelee</code>，倘若下载速度是龟速，不如直接用迅雷下zip压缩包来的快……</p><p><a href="https://pan.baidu.com/s/1OSbQMbU2MNL5xHQ7HambFg">Hexo主题压缩包，百度云，密码abcd</a></p><p>下载完成之后，需要修改项目目录下的<code>_config.yml</code>文件，找到<code>theme</code>主题字样，将后面的默认主题<code>landscape</code>修改为<code>yelee</code>。倘若之后想要更换主题也是如此。</p><h2 id="25-修改主题的_configyml文件"><a class="markdownIt-Anchor" href="#25-修改主题的_configyml文件"></a> 2.5 修改主题的_config.yml文件</h2><h3 id="251-首页不显示文章列表"><a class="markdownIt-Anchor" href="#251-首页不显示文章列表"></a> 2.5.1 首页不显示文章列表</h3><p>启动后会发现左侧导航栏，点击主页后不显示文章列表</p><p>进入yelee模板页的 <code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="attr">on:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">## true: get search.xml file when the page has loaded</span></span><br><span class="line">  <span class="comment">## false: get the file when search box gets focus</span></span><br></pre></td></tr></table></figure><h3 id="252-相关链接无法跳转"><a class="markdownIt-Anchor" href="#252-相关链接无法跳转"></a> 2.5.2 相关链接无法跳转</h3><p>在<code>themes/yelee/_config.yml</code>中类似如下的内容。实际上当预览的时候会发现有相关的链接没有配置路由。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## About Page: `hexo new page about`</span></span><br><span class="line"><span class="comment">## Tags Cloud Page: `hexo new page tags`</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">所有文章:</span> <span class="string">/archives/</span></span><br><span class="line">  <span class="string">随笔:</span> <span class="string">/note/</span></span><br><span class="line">  <span class="string">标签云:</span> <span class="string">/tags/</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure><p>因为随笔、标签云、关于我这种链接，在此项目中是没有的，需要去创建。留意上方注释，已经说明如何创建。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在项目根目录下操作, 根据需要创建系统页</span></span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><h3 id="253-添加文章的字数统计和大概看完的时间"><a class="markdownIt-Anchor" href="#253-添加文章的字数统计和大概看完的时间"></a> 2.5.3 添加文章的字数统计和大概看完的时间</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#项目根路径下操作</span></span><br><span class="line">npm i -<span class="literal">-save</span> hexo<span class="literal">-wordcount</span></span><br></pre></td></tr></table></figure><p>文件配置：</p><ol><li>在<code>yelee/layout/_partial/post/word.ejs</code>下创建<code>word.ejs</code>文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--倘若出现tag标签和统计字数的文件有布局上的问题，可以对上下外边距进行调整--&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;margin-top:10px;margin-bottom: 30px&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-time&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;fa fa-keyboard-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;  字数统计: &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-count&quot;&gt;&lt;%&#x3D; wordcount(post.content) %&gt;字&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-time&quot;&gt;</span><br><span class="line">    &amp;nbsp; | &amp;nbsp;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;fa fa-hourglass-half&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;  阅读时长: &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-count&quot;&gt;&lt;%&#x3D; min2read(post.content) %&gt;分&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后在 <code>themes/yelee/layout/_partial/article.ejs</code>中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;article-inner&quot;&gt;</span><br><span class="line">    &lt;% if (theme.fancybox)&#123; %&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;hidden&quot; class&#x3D;&quot;isFancy&quot; &#x2F;&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% if (post.link || post.title)&#123; %&gt;</span><br><span class="line">      &lt;header class&#x3D;&quot;article-header&quot;&gt;</span><br><span class="line">        &lt;%- partial(&#39;post&#x2F;title&#39;, &#123;class_name: &#39;article-title&#39;&#125;) %&gt;</span><br><span class="line">        &lt;!-- 开始添加字数统计,这里才是添加的东西--&gt;</span><br><span class="line">        &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt;</span><br><span class="line">          &lt;%- partial(&#39;post&#x2F;word&#39;) %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">         &lt;!-- 添加完成 --&gt;</span><br><span class="line">      &lt;&#x2F;header&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>开启功能</li></ol><p>在yelee主题的<code>_config.yml</code>中添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word_count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="254-配置本地搜索"><a class="markdownIt-Anchor" href="#254-配置本地搜索"></a> 2.5.4 配置本地搜索</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目根目录运行</span></span><br><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-search</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后配置文件<code>themes/yelee/_config.yml</code>中修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="attr">on:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">## true: get search.xml file when the page has loaded</span></span><br><span class="line">  <span class="comment">## false: get the file when search box gets focus</span></span><br></pre></td></tr></table></figure><h3 id="255-添加网站运行时间"><a class="markdownIt-Anchor" href="#255-添加网站运行时间"></a> 2.5.5 添加网站运行时间</h3><p><code>\themes\yelee\layout\_partial</code>路径下找到<code>footer.ejs</code>添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer id&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;footer-info&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;footer-left&quot;&gt; &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;!--添加代码的位置,以及要添加的代码</span><br><span class="line">&lt;span id&#x3D;&quot;timeDate&quot;&gt;载入天数...&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;times&quot;&gt;载入时分秒...&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">        var now &#x3D; new Date();</span><br><span class="line">        function createtime() &#123;</span><br><span class="line">          var grt &#x3D; new Date(&quot;09&#x2F;13&#x2F;2020 12:49:00&quot;);&#x2F;&#x2F;此处修改你的建站时间或者网站上线时间 </span><br><span class="line">          now.setTime(now.getTime() + 250);</span><br><span class="line">          days &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 &#x2F; 60 &#x2F; 24; dnum &#x3D; Math.floor(days);</span><br><span class="line">          hours &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 &#x2F; 60 - (24 * dnum); hnum &#x3D; Math.floor(hours);</span><br><span class="line">          if (String(hnum).length &#x3D;&#x3D; 1) &#123; hnum &#x3D; &quot;0&quot; + hnum; &#125; minutes &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">          mnum &#x3D; Math.floor(minutes); if (String(mnum).length &#x3D;&#x3D; 1) &#123; mnum &#x3D; &quot;0&quot; + mnum; &#125;</span><br><span class="line">          seconds &#x3D; (now - grt) &#x2F; 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">          snum &#x3D; Math.round(seconds); if (String(snum).length &#x3D;&#x3D; 1) &#123; snum &#x3D; &quot;0&quot; + snum; &#125;</span><br><span class="line">          document.getElementById(&quot;timeDate&quot;).innerHTML &#x3D; &quot;本站已安全运行 &quot; + dnum + &quot; 天 &quot;;</span><br><span class="line">          document.getElementById(&quot;times&quot;).innerHTML &#x3D; hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        setInterval(&quot;createtime()&quot;, 250);</span><br><span class="line">      &lt;&#x2F;script&gt;</span><br><span class="line">--&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;footer-right&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    ……</span><br><span class="line">&lt;&#x2F;footer&gt;</span><br></pre></td></tr></table></figure><h3 id="256-url持久化"><a class="markdownIt-Anchor" href="#256-url持久化"></a> 2.5.6 Url持久化</h3><p>可以发现 hexo 默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。</p><p>这种链接对搜索爬虫是很不友好的，它的 url 结构超过了三层，太深了。</p><p>安装 <code>hexo-abbrlink</code> 插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-abbrlink</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后配置根目录的_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"><span class="comment">#permalink: :year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure><h3 id="257-添加二次元虚拟人物"><a class="markdownIt-Anchor" href="#257-添加二次元虚拟人物"></a> 2.5.7 添加二次元虚拟人物</h3><p>获取：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -<span class="literal">-save</span> hexo<span class="literal">-helper</span><span class="literal">-live2d</span></span><br></pre></td></tr></table></figure><p>下载人物模型，<a href="https://www.npmjs.com/package/hexo-helper-live2d">官方</a>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d<span class="literal">-widget</span><span class="literal">-model</span><span class="literal">-shizuku</span> </span><br><span class="line"><span class="comment"># 对应use: live2d-widget-model-unitychan</span></span><br><span class="line"></span><br><span class="line">npm install live2d<span class="literal">-widget</span><span class="literal">-model</span><span class="literal">-hibiki</span></span><br><span class="line"><span class="comment"># 对应use: live2d-widget-model-hibiki</span></span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">  <span class="comment">#只需要修改unitychan就可以更换虚拟人物</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-unitychan</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="258-当文章中有图片时"><a class="markdownIt-Anchor" href="#258-当文章中有图片时"></a> 2.5.8 当文章中有图片时</h3><p>图片在博文中十分常见，因博客部署在GitHub上，空间有限，推荐将图片、音频、视频等文件存放在<a href="https://www.qiniu.com/">七牛云</a>这样的地方。</p><h4 id="2581-七牛云相关内容"><a class="markdownIt-Anchor" href="#2581-七牛云相关内容"></a> 2.5.8.1 七牛云相关内容</h4><ol><li><p>注册账号登录，点击对象存储，创建存储空间，并绑定域名，绑定域名参考官网提供的说明</p></li><li><p>hexo安装七牛云同步插件：<code>npm install hexo-qiniu-sync --save</code></p></li><li><p>hexo的配置文件中进行七牛云配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#plugins:</span></span><br><span class="line"><span class="comment"># - hexo-qiniu-sync</span></span><br><span class="line"><span class="attr">qiniu:</span></span><br><span class="line">  <span class="attr">offline:</span> <span class="literal">true</span> <span class="comment"># true会省流量</span></span><br><span class="line">  <span class="attr">sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="comment">#这里需要填写第一步创建的存储空间的名字</span></span><br><span class="line">  <span class="string">//这里将其注释掉，不注释，执行hexo</span> <span class="string">g报错</span></span><br><span class="line">  <span class="comment"># secret_file: sec/qn.json or C:</span></span><br><span class="line">  <span class="comment">#登录自己的七牛云账号，点击右上角的投降，选择密钥管理，可以获得</span></span><br><span class="line">  <span class="attr">access_key:</span> <span class="string">your</span> <span class="string">access_key</span> </span><br><span class="line">  <span class="attr">secret_key:</span> <span class="string">your</span> <span class="string">secret_key</span></span><br><span class="line">  <span class="string">//</span> <span class="string">上传的资源子目录前缀.如设置，需与urlPrefix同步</span></span><br><span class="line">  <span class="attr">dirPrefix:</span> <span class="string">static</span></span><br><span class="line">  <span class="string">//外链前缀，第一步绑定的加速域名</span></span><br><span class="line">  <span class="attr">urlPrefix:</span> <span class="string">http://自己的加速域名/static</span></span><br><span class="line">  <span class="string">//使用默认配置即可</span></span><br><span class="line">  <span class="attr">up_host:</span> <span class="string">http://upload.qiniu.com</span></span><br><span class="line">  <span class="string">//本地目录</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">static</span></span><br><span class="line">  <span class="string">//</span> <span class="string">是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span></span><br><span class="line">  <span class="attr">update_exist:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">image:</span> </span><br><span class="line">    <span class="attr">folder:</span> <span class="string">images</span></span><br><span class="line">    <span class="attr">extend:</span> </span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">js</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">css</span></span><br></pre></td></tr></table></figure></li><li><p>在hexo根目录下创建如下目录结构，之后将对应的想要存放到七牛云的文件放到对应的文件夹即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static</span><br><span class="line">- images</span><br><span class="line">- js</span><br><span class="line">- css</span><br></pre></td></tr></table></figure></li><li><p>在文章中插入图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg 图片.图片格式 title: alt: &#39;class:&#39; extend:?imageView2&#x2F;2&#x2F;w&#x2F;450 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>将本地static目录下的文件同步到七牛云</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo qiniu sync</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu s</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu sync2</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu s2</span><br></pre></td></tr></table></figure></li></ol><h3 id="259-文章底部不显示作者"><a class="markdownIt-Anchor" href="#259-文章底部不显示作者"></a> 2.5.9 文章底部不显示作者</h3><p>倘若出现了这种情况，可以在主题的配置文件中添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">author:</span> <span class="string">作者名字</span></span><br></pre></td></tr></table></figure><h3 id="2510-添加点击爱心效果"><a class="markdownIt-Anchor" href="#2510-添加点击爱心效果"></a> 2.5.10 添加点击爱心效果</h3><ul><li><p>下载js文件，<a href="https://pan.baidu.com/s/1dKH_FBNNGjdkTF3PslJkKQ">链接地址,密码bcde</a></p></li><li><p>在<code>theme/yelee/source</code>下创建<code>resources目录</code>并将js文件拷贝到此目录下</p></li><li><p>在<code>\themes\yelee\layout\_partial\after-footer.ejs</code>下添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;resources&#x2F;float.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;resources&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; color&#x3D;0,104,183 opacity&#x3D;1 zindex&#x3D;-1 count&#x3D;50 src&#x3D;&quot;&#x2F;resources&#x2F;particle.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;resources&#x2F;typewriter.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2511-其它"><a class="markdownIt-Anchor" href="#2511-其它"></a> 2.5.11 其它</h3><p>主题文件的_config.yml还可以配置什么：</p><ul><li>网站的ico图标</li><li>自己的头像</li><li>导航栏链接</li><li>背景图片</li><li>是否开启分享</li><li>是否需要评论、以及是否显示评论数量</li><li>文章的标题风格、字体大小</li><li>……</li></ul><h1 id="3-把本地的博客内容同步到-github-上"><a class="markdownIt-Anchor" href="#3-把本地的博客内容同步到-github-上"></a> 3. 把本地的博客内容同步到 Github 上</h1><p>因为博客托管在GitHub上，所以在建立博客仓库时，仓库的名字需要命名为：<code>用户名.github.io</code>这样就可以通过<code>用户名.github.io</code>来访问该站点了。</p><ol><li><p>创建好仓库后，需要本地生成SSH秘钥，方便通过git来进行提交</p></li><li><p>命令行输入：<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code>,之后不停的回车，期间，留意秘钥保存的路径，一般是：<code>C:\Users\你的计算机用户名\.ssh</code>，会生成两个文件：</p><ul><li>私钥：<code>id_rsa</code></li><li>公钥：<code>id_rsa.pub</code></li></ul></li><li><p>访问自己GitHub账户的setting/SSH keys，将公钥的内容复制粘贴到Key的位置（主义末尾不要留有空行），title内容随意。</p></li><li><p>安装两个跟部署相关的 hexo 插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo <span class="literal">-server</span> -<span class="literal">-save</span></span><br><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure></li><li><p>编辑全局的hexo配置文件：_config.xml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的s</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">LearnFoever</span>  <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span>  <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">silverbeats</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">418116014</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span>   <span class="comment">#网站时区。Hexo 默认使用您电脑的时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://silverbeats.github.io</span> <span class="comment">#倘若已经购买了域名的话可以填买的域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#这里配置的url持久化</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span> <span class="comment">#:year/:month/:day/:title/ </span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment">#源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span> <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment">#标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> <span class="comment">#归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment">#分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span> <span class="comment">#nclude code 文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span> <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>  <span class="comment">#跳过指定文件的渲染，可使用 glob 表达式来匹配路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment">#新建文章默认文件名</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment"># 默认布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># 在新标签中打开一个外部链接，默认为true</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span> </span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment">#是否渲染_drafts目录下的文章，默认为false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment">#启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment">#把链接改为与根目录的相对位址，默认false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span> <span class="comment">#显示未来的文章，默认false</span></span><br><span class="line"><span class="attr">highlight:</span>  <span class="comment">#代码块的设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"><span class="comment"># Category &amp; Tag #分类和标签的设置</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment">#默认分类</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yelee</span> <span class="comment"># next  yelee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。</span></span><br><span class="line"><span class="comment">## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后熟悉了要换其他也无所谓。</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:SilverBeats/SilverBeats.github.io.git,master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-neat 对静态文件进行压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span>  </span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#萌妹子</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hibiki</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
