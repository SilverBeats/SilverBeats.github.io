<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>外部排序</title>
      <link href="%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F/"/>
      <url>%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-内部排序"><a class="markdownIt-Anchor" href="#1-内部排序"></a> 1 内部排序</h1><a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a><h1 id="2-外部排序"><a class="markdownIt-Anchor" href="#2-外部排序"></a> 2 外部排序</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找</title>
      <link href="%E6%9F%A5%E6%89%BE/"/>
      <url>%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="%E5%9B%BE/"/>
      <url>%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-逻辑结构"><a class="markdownIt-Anchor" href="#1-逻辑结构"></a> 1 逻辑结构</h1><h2 id="11-图的定义"><a class="markdownIt-Anchor" href="#11-图的定义"></a> 1.1 图的定义</h2><p>图G由顶点集V和边集E组成，记为G=（V，E），其中V(G)表示图G中顶点的<mark>有限非空集</mark>，E(G)表示图G中顶点之间的关系（边）集合。|V|表示图G中顶点的个数，也称图G的阶；|E|表示图G中边的条数</p><img alt="图" data-src='http://resource.silverbeats.cn/static/images/算法/数据结构/图/图.png'><h2 id="12-相关概念"><a class="markdownIt-Anchor" href="#12-相关概念"></a> 1.2 相关概念</h2><table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>无向图&amp;有向图</td><td>图的边是否有方向。无向图的边没有方向，用括号表示如：(v,w)<br>有向图的边区分起始点和终止点，有向图的边又称弧，用尖括号表示，如&lt;v,w&gt;</td></tr><tr><td>简单图</td><td>无重复边，不存在结点到自身的边</td></tr><tr><td>多重图</td><td>非简单图</td></tr><tr><td>无向完全图</td><td>任意两个顶点之间都存在边。n个顶点有n(n-1)/2条边</td></tr><tr><td>有向完全图</td><td>任意两个顶点之间都存在方向相反的弧，n个顶点有n(n-1)条弧</td></tr><tr><td>子图</td><td>设有两个图G=（V，E），G<sup>’’</sup>=（V<sup>’’</sup>，E<sup>’’</sup>），若V<sup>’'</sup>是V的子集，E<sup>’'</sup>是E的子集，则成G<sup>’'</sup>是G的子图</td></tr><tr><td>连通</td><td>针对无向图。若从顶点v到顶点w有路径存在，称v和w是连通的</td></tr><tr><td>连通图</td><td>任意两个结点之间都是连通的。n个顶点的连通图最少有n-1条边。</td></tr><tr><td>强连通</td><td>针对有向图。顶点v到w，以及顶点w到v都有路径，则称v与w强连通。</td></tr><tr><td>强连通图</td><td>任意两个结点之间都是强连通的。n个顶点的强连通图最少有n条边</td></tr><tr><td>连通分量&amp;&amp;强连通分量</td><td>极大（强）连通子图。对于G的一个（强）连通子图G<sup>’</sup>，如果不存在G的另一个（强）连通子图G<sup>’‘</sup>，使得G<sup>’</sup>⊂G<sup>’’</sup>，则称G<sup>’</sup>为G的（强）连通分量。<br><mark>（强）连通图，（强）连通分量与原图一致，非（强）连通图，则有多个（强）连通分量</mark></td></tr><tr><td>极小连通子图</td><td>满足连通图的情况下，且包含的边最少的子图</td></tr><tr><td>生成树</td><td>连通图，且包含全部顶点的一个极小连通子图。<mark>不唯一，n个顶点图的生成树有n-1条边</mark></td></tr><tr><td>生成森林</td><td>非连通图所有连通分量的生成树组成生成森林</td></tr><tr><td>顶底的度</td><td>①无向图中，某顶点的度即为和此顶点相连边的数目。<mark>n个顶点，e条边的无向图中的度总数为2e</mark><br>②有向图中，顶点的度 = 入度 + 出度，<mark>n个顶点，e条边的有向图中出度 = 入度 = e</mark></td></tr><tr><td>网</td><td>给图中的每条边增加一个权重</td></tr><tr><td>稠密图&amp;&amp;稀疏图</td><td>稠不稠密，看边多不多。|E| &lt; |V|log|V|</td></tr><tr><td>有向树</td><td>一个顶点的入度为0，其余顶点的入度为1的有向图</td></tr><tr><td>路径</td><td>图中顶点v到w的顶点序列，序列中顶点不重复的路径称为简单路径</td></tr><tr><td>路径长度</td><td>路径上边的 数目，若该路径最短则称距离</td></tr><tr><td>回路</td><td>第一个顶点和最后一个顶点相同的路径</td></tr><tr><td></td><td>倘若回路中除起点终点之外的所有点不重复，则称简单回路</td></tr></tbody></table><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E8%BF%9E%E9%80%9A%E5%AD%90%E5%9B%BE.png" alt="连通子图" /></p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9E%81%E5%A4%A7%E8%BF%9E%E9%80%9A%E5%AD%90%E5%9B%BE.png" alt="极大连通子图" /></p><h1 id="2-存储结构及操作"><a class="markdownIt-Anchor" href="#2-存储结构及操作"></a> 2 存储结构及操作</h1><h2 id="21-邻接矩阵"><a class="markdownIt-Anchor" href="#21-邻接矩阵"></a> 2.1 邻接矩阵</h2><p>存储图，无非是存储点集（一位数组存储）和边集（二维数组存储）。</p><img alt="邻接矩阵-有向图" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-有向图.png"><img alt="邻接矩阵-无向图" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-无向图.png"><img alt="邻接矩阵-网" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-网.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxVertexNum 100typedef char VertexType;typedef in EdgeType;typedef struct &#123;  VertexType Vex[MaxVertexNum];  EdgeType Edge[MaxVertexNum][MaxVertexNum];  int vexnum,arcnum;&#125;MGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【性质】</strong></p><ul><li><p>邻接矩阵的空间复杂度O(n<sup>2</sup>)</p></li><li><p>无向图的邻接矩阵为对称矩阵</p></li><li><p>无向图中第i行（或第j列）非0元素（非正无穷）的个数为第i个顶点的度</p></li><li><p>有向图中第i行（或第j列）非0元素（非正无穷）的个数为第i个顶点的出度（入度）</p></li><li><p>设图G的邻接矩阵为A，矩阵A<sup>n</sup>的含义</p><img alt="邻接矩阵-矩阵乘积" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-矩阵乘积.png"><img alt="邻接矩阵-矩阵乘积2" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接矩阵-矩阵乘积2.png"></li></ul><h2 id="22-邻接表法"><a class="markdownIt-Anchor" href="#22-邻接表法"></a> 2.2 邻接表法</h2><p>为每个顶点建立一个单链表存放与它相邻的边。</p><p><strong>顶点表</strong></p><p>采用<mark>顺序存储</mark>，每个数组元素存放顶点的数据和边表的头指针</p><p><strong>边表</strong></p><p>采用<mark>链式存储</mark>，单链表中存放与一个顶点相邻的所有边，一个链表结点表示一条从该顶点到链表结点顶点的边</p><img alt="邻接表法-结点结构" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接表法-结点结构.png"><img alt="邻接表法-有向图" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接表法-有向图.png"><img alt='邻接表法-无向图' data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接表法-无向图.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxVertexNum 100&#x2F;&#x2F; 边表结点typedef struct ArcNode&#123;  int adjvex;  struct ArcNode *next;  &#x2F;&#x2F; InfoType info; 边的权重&#125;ArcNode;&#x2F;&#x2F; 顶点表typedef struct VNode&#123;  VertexType data;  ArcNode *first;&#125;VNode,AdjList[MaxVertexNum];&#x2F;&#x2F; 邻接表typedef struct &#123;  AdjList vetices;  int vexnum,arcnum;&#125;ALGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【性质】</strong></p><ul><li><p>若G为无向图，存储空间为O（|V| + 2|E|）</p><p>若G为有向图，存储空间为O（|V| + |E|）</p></li><li><p>邻接表适合存储稀疏图</p></li><li><p>若G为无向图，则结点的度为该结点边表的长度</p><p>若G为有向图，则结点的出度为该结点边表的长度，计算入度则要遍历整个邻接表</p></li><li><p>邻接表不唯一，边表结点的顺序根据算法和输入的不同可能会不同</p></li><li><p><mark>邻接矩阵和邻接表比较</mark></p><img alt="邻接表VS邻接矩阵" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接表VS邻接矩阵.png"></li></ul><h2 id="23-邻接多重表"><a class="markdownIt-Anchor" href="#23-邻接多重表"></a> 2.3 邻接多重表</h2><p><mark>无向图</mark>的一种链式存储</p><img alt="邻接多重表" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接多重表.png"><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>存放数据</td></tr><tr><td>firstedge</td><td>边表单链表头指针</td></tr><tr><td>ivex</td><td>该边的第一个端点</td></tr><tr><td>ilink</td><td>与第一个端点相邻的下一个边表结点指针</td></tr><tr><td>jvex</td><td>第二点端点</td></tr><tr><td>jlink</td><td>与第二个端点相邻的下一个边表结点指针</td></tr><tr><td>info</td><td>非必须</td></tr><tr><td>mark</td><td>非必须</td></tr></tbody></table><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/邻接多重表-步骤.png" alt="邻接多重表-步骤"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxVertexNum 100&#x2F;&#x2F; 边表typedef struct ArcNode&#123;  int ivex,jvex;  struct ArcNode *ilink,*jlink;  &#x2F;&#x2F; infoType info;  &#x2F;&#x2F; bool mark;&#125;ArchNode;&#x2F;&#x2F; 顶点表typedef struct VNode &#123;  VertexType data;  ArcNode *firstedge;&#125;VNode;&#x2F;&#x2F; 邻接多重表typedef struct &#123;  VNode adjmulist[MaxVertexNum];  int vexnum, arcnum;&#125;AMLGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-十字链表"><a class="markdownIt-Anchor" href="#24-十字链表"></a> 2.4 十字链表</h2><p><mark>有向图</mark>的一种<mark>链式存储</mark>结构，邻接表容易找到顶点的出度，但是不容易找该顶点的入度，因此有十字链表来解决这个问题。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/十字链表数据结构.png" alt="十字链表数据结构"><table><thead><tr><th></th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>数据域。存放数据。</td></tr><tr><td>firstin</td><td>入边单链表第一个结点的头指针</td></tr><tr><td>firstout</td><td>出边单链表第一个结点的头指针</td></tr><tr><td>tailvex</td><td>尾域。存放该弧，弧尾的结点指针</td></tr><tr><td>headvex</td><td>头域。存放该弧，弧头的结点指针</td></tr><tr><td>hlink</td><td>指针域。下一个弧头相同的结点指针</td></tr><tr><td>tlink</td><td>指针域。下一个弧尾相同的结点指针</td></tr><tr><td>info</td><td>存放该边数据，比如权重。</td></tr></tbody></table><img alt="十字链表流程" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/十字链表.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxVertexNum 100&#x2F;&#x2F; 边表结点typedef struct ArcNode&#123;  int tailvex,headvex;  struct ArcNode *hlink, *tlink;  &#x2F;&#x2F; InfoType info; 边的权重&#125;ArcNode;&#x2F;&#x2F; 顶点表typedef struct VNode&#123;  VertexType data;  ArcNode *firstin, *firstout;&#125;VNode,AdjList[MaxVertexNum];&#x2F;&#x2F; 十字接表typedef struct &#123;  VNode xlist[MaxVertexNum];  int vexnum,arcnum;&#125;GLGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-十字链表vs邻接多重表"><a class="markdownIt-Anchor" href="#25-十字链表vs邻接多重表"></a> 2.5 十字链表VS邻接多重表</h2><p>十字链表：解决邻接表存储有向图时，得入度难的问题</p><p>邻接多重表：解决邻接表存无向图时，重复存储边的问题</p><h1 id="3-图的遍历"><a class="markdownIt-Anchor" href="#3-图的遍历"></a> 3 图的遍历</h1><p>从图中某一顶点出发，按照某种搜索方法沿着图中的边对图中的所有顶点访问一次且仅访问一次</p><h2 id="31-广度优先遍历"><a class="markdownIt-Anchor" href="#31-广度优先遍历"></a> 3.1 广度优先遍历</h2><p>空间复杂度：O(|V|)</p><p>时间复杂度：</p><pre><code>- 邻接矩阵：O(|V|^2^)- 邻接表法：O(|V| + |E|)</code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool visited[MAX_TREE_SIZE];void BFSTraverse(Graph G) &#123;  for(int i &#x3D; 0; i &lt; G.vexnum; i++) &#123;    visited[i] &#x3D; false;  &#125;  InitQueue(Q);  for(int i; i &lt; G.vexnum; i++) &#123;  if(!visited[i]) BFS(G,i);  &#125;&#125;void BFS(Graph G, int v) &#123;  visit(v);  visited[v] &#x3D; true;  EnQueue(Q,v);  while(!isEmpty(Q)) &#123;    DeQueue(Q,v);    for(w &#x3D; FirstNeighbor(G,v);w&gt;&#x3D;0;w &#x3D; NextNeighbor(G,v,w)) &#123;      if(!visited[w])&#123;        visit[w];        visited[w] &#x3D; true;        EnQueue(Q,w);      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【<mark>无权图</mark>单源最短路径问题】</strong></p><p>定义从顶点u到顶点v经过边数最少的路径称为最短路径d(u,v)。如若u到v没有路径，则d(u,v) = ∞</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void BFS_MIN_Distance(Graph G, int u) &#123;  &#x2F;&#x2F; d为距离数组，数组长度为顶点的数量，每个位置初始化置为最大值  for(int i &#x3D; 0; i &lt; G.vexnum; i++)    d[i] &#x3D; MAX;  &#x2F;&#x2F; u结点访问标识位置为true  visited[u] &#x3D; true;  d[u] &#x3D; 0;  &#x2F;&#x2F; u结点入队列  EnQueue(Q,u);  &#x2F;&#x2F; 队列不为空，至少有u结点  while(!isEmpty(Q)) &#123;    &#x2F;&#x2F; 将结点u出队列，另u为该结点的数组下标，哪个结点出队列，u就为出队列的结点所在数组下标    DeQueue(Q,u);    &#x2F;&#x2F; w为与u结点第一个邻接点    for(w &#x3D; FirstNeighbor(G,u); w &gt;&#x3D; 0; w &#x3D; NextNeighbor(G,u,w)) &#123;      if(!visit[w]) &#123;        visited[w] &#x3D; true;        d[w] &#x3D; d[u] + 1;        EnQuene(Q,w);      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【广度优先生成树】</strong></p><p>在广度遍历过程中，可以得到一颗遍历树，称为广度优先生成树（生成森林）</p><ul><li>结点1入队列，队列Q={1}</li><li>结点1出队列，结点2,3入队列，队列Q={2,3}</li><li>结点2出队列，结点4,5入队列，队列Q={3,4,5}</li><li>结点3出队列，结点6入队列，队列Q={4,5,6}</li><li>结点4入队列，结点7入队列，队列Q={5,6,7}</li><li>结点5出队列</li><li>结点6出队列</li><li>结点7出队列</li></ul><p>在广度优先遍历的过程中存在一个数组，用以标识每个结点是否被访问，放置重复遍历（比如结点4出队列后，结点5和7是要入队列的，此时就不满足每个结点只遍历一次这个要求，所以每个结点需要一个标识位用以判断是否被访问，判断在入队列前）</p><img alt="广度优先生成树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/广度优先生成树.png"><h2 id="32-深度优先遍历"><a class="markdownIt-Anchor" href="#32-深度优先遍历"></a> 3.2 深度优先遍历</h2><p>空间复杂度：O(|V|)</p><p>时间复杂度：</p><ul><li>邻接矩阵法：O(|V|<sup>2</sup>)</li><li>邻接表法：O(|V| + |E|)</li></ul><p><strong>【搜索过程】</strong></p><ul><li>首先访问起始顶点v</li><li>接着由v出发访问v的任意一个邻接但未被访问的邻接顶点w<sub>i</sub></li><li>然后再访问与w<sub>i</sub>邻接且未被访问的任意顶点y<sub>i</sub></li><li>若w<sub>i</sub>没有邻接且未被访问的顶点时，退回到它的上一层顶点v</li><li>重复</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool visited[MAX_TREE_SIZE];void DFSTraverse(Graph G) &#123;  for(int i &#x3D; 0; i &lt; G.vexnuml i++)    visited[i] &#x3D; false;  for(int i &#x3D;0; i &lt; G.vexnum; i++)    if(!visited[i])DFS(G,i);&#125;void DFS(Graph G, int v) &#123;  visit(v);  visited[v] &#x3D; true;  for(w &#x3D; FirstNeighbor(G,v); w &gt;&#x3D; 0; w &#x3D; NextNeighbor(G,v,w)) &#123;    if(!visited[w]) DFS(G,w);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>邻接矩阵法的DFS(BFS)序列是唯一的，邻接表法的不唯一</mark></p><h2 id="33-遍历与连通性"><a class="markdownIt-Anchor" href="#33-遍历与连通性"></a> 3.3 遍历与连通性</h2><ul><li>无向图<ul><li>在任意结点调用BFS或者DFS，倘若能访问所有的结点，说明是连通的</li><li>调用遍历函数（BFS或者DFS）次数为连通分量的个数。（这里的次数是指主函数中使用BFS或者DFS次数，BFS或DFS内部递归调用不算）</li></ul></li></ul><h1 id="4-应用"><a class="markdownIt-Anchor" href="#4-应用"></a> 4 应用</h1><h2 id="41-最小生成树"><a class="markdownIt-Anchor" href="#41-最小生成树"></a> 4.1 最小生成树</h2><p>对于<mark>带权的无向连通图</mark>G，G中所有生成树中边权值之和最小的生成树称为最小生成树(MST)</p><p><strong>【性质】</strong></p><ul><li><p>最小生成树不一定唯一，可以有多个。</p><blockquote><p>满足下列条件，MST唯一</p><ol><li>各边权重不同</li><li>原图本身只有n-1条边，最小生成树是其本身</li></ol></blockquote></li><li><p>最小生成树无论有多少个，它们的权重之和是唯一的</p></li><li><p>最小生成树的边数 = n-  1</p></li></ul><h3 id="411-prim算法"><a class="markdownIt-Anchor" href="#411-prim算法"></a> 4.1.1 Prim算法</h3><p>普里姆算法在找最小生成树时，将顶点分为两类，一类是在查找的过程中已经包含在树中的（假设为 A 类），剩下的是另一类（假设为 B 类）。</p><p>对于给定的连通网，起始状态全部顶点都归为 B 类。在找最小生成树时，选定任意一个顶点作为起始点，并将之从 B 类移至 A 类；然后找出 B 类中到 A 类中的顶点之间权值最小的顶点，将之从 B 类移至 A 类，如此重复，直到 B 类中没有顶点为止。所走过的顶点和边就是该连通图的最小生成树。</p><p>举例步骤如下：</p><p>假如从顶点A出发，顶点 B、C、D 到顶点 A 的权值分别为 2、4、2，所以，对于顶点 A 来说，顶点 B 和顶点 D 到 A 的权值最小，假设先找到的顶点 B：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/prim01.png" alt="" /></p><p>继续分析顶点 C 和 D，顶点 C 到 B 的权值为 3，到 A 的权值为 4；顶点 D 到 A 的权值为 2，到 B 的权值为无穷大（如果之间没有直接通路，设定权值为无穷大）。所以顶点 D 到 A 的权值最小：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/prim02.png" alt="" /></p><p>最后，只剩下顶点 C，到 A 的权值为 4，到 B 的权值和到 D 的权值一样大，为 3。所以该连通图有两个最小生成树：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/prim03.png" alt="" /></p><p>普里姆算法的运行效率只与连通网中包含的<mark>顶点数相关</mark>，而和网所含的边数无关。所以普里姆算法适合于解决<mark>边稠密的网</mark>，该算法运行的</p><p>时间复杂度：O(n<sup>2</sup>)。</p><blockquote><p>如果连通网中所含边的绸密度不高，则建议使用克鲁斯卡尔算法求最小生成树</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define VertexType int#define VRType int#define MAX_VERtEX_NUM 20#define InfoType char   #define INFINITY 65535typedef struct &#123;    VRType adj;                             &#x2F;&#x2F;对于无权图，用 1 或 0 表示是否相邻；对于带权图，直接为权值。    InfoType * info;                        &#x2F;&#x2F;弧额外含有的信息指针&#125;ArcCell,AdjMatrix[MAX_VERtEX_NUM][MAX_VERtEX_NUM];typedef struct &#123;    VertexType vexs[MAX_VERtEX_NUM];        &#x2F;&#x2F;存储图中顶点数据    AdjMatrix arcs;                         &#x2F;&#x2F;二维数组，记录顶点之间的关系    int vexnum,arcnum;                      &#x2F;&#x2F;记录图的顶点数和弧（边）数&#125;MGraph;&#x2F;&#x2F;根据顶点本身数据，判断出顶点在二维数组中的位置int LocateVex(MGraph G,VertexType v)&#123;    int i&#x3D;0;    &#x2F;&#x2F;遍历一维数组，找到变量v    for (; i&lt;G.vexnum; i++) &#123;        if (G.vexs[i]&#x3D;&#x3D;v) &#123;            return i;        &#125;    &#125;    return -1;&#125;&#x2F;&#x2F;构造无向网void CreateUDN(MGraph* G)&#123;    scanf(&quot;%d,%d&quot;,&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));    for (int i&#x3D;0; i&lt;G-&gt;vexnum; i++) &#123;        scanf(&quot;%d&quot;,&amp;(G-&gt;vexs[i]));    &#125;    for (int i&#x3D;0; i&lt;G-&gt;vexnum; i++) &#123;        for (int j&#x3D;0; j&lt;G-&gt;vexnum; j++) &#123;            G-&gt;arcs[i][j].adj&#x3D;INFINITY;            G-&gt;arcs[i][j].info&#x3D;NULL;        &#125;    &#125;    for (int i&#x3D;0; i&lt;G-&gt;arcnum; i++) &#123;        int v1,v2,w;        scanf(&quot;%d,%d,%d&quot;,&amp;v1,&amp;v2,&amp;w);        int m&#x3D;LocateVex(*G, v1);        int n&#x3D;LocateVex(*G, v2);        if (m&#x3D;&#x3D;-1 ||n&#x3D;&#x3D;-1) &#123;            printf(&quot;no this vertex\n&quot;);            return;        &#125;        G-&gt;arcs[n][m].adj&#x3D;w;        G-&gt;arcs[m][n].adj&#x3D;w;    &#125;&#125;&#x2F;&#x2F;辅助数组，用于每次筛选出权值最小的边的邻接点typedef struct &#123;    VertexType adjvex;&#x2F;&#x2F;记录权值最小的边的起始点    VRType lowcost;&#x2F;&#x2F;记录该边的权值&#125;closedge[MAX_VERtEX_NUM];closedge theclose;&#x2F;&#x2F;创建一个全局数组，因为每个函数中都会使用到&#x2F;&#x2F;在辅助数组中找出权值最小的边的数组下标，就可以间接找到此边的终点顶点。int minimun(MGraph G,closedge close)&#123;    int min&#x3D;INFINITY;    int min_i&#x3D;-1;    for (int i&#x3D;0; i&lt;G.vexnum; i++) &#123;        &#x2F;&#x2F;权值为0，说明顶点已经归入最小生成树中；然后每次和min变量进行比较，最后找出最小的。        if (close[i].lowcost&gt;0 &amp;&amp; close[i].lowcost &lt; min) &#123;            min&#x3D;close[i].lowcost;            min_i&#x3D;i;        &#125;    &#125;    &#x2F;&#x2F;返回最小权值所在的数组下标    return min_i;&#125;&#x2F;&#x2F;普里姆算法函数，G为无向网，u为在网中选择的任意顶点作为起始点void miniSpanTreePrim(MGraph G,VertexType u)&#123;    &#x2F;&#x2F;找到该起始点在顶点数组中的位置下标    int k&#x3D;LocateVex(G, u);    &#x2F;&#x2F;首先将与该起始点相关的所有边的信息：边的起始点和权值，存入辅助数组中相应的位置，例如（1，2）边，adjvex为0，lowcost为6，存入theclose[1]中，辅助数组的下标表示该边的顶点2    for (int i&#x3D;0; i&lt;G.vexnum; i++) &#123;        if (i !&#x3D;k) &#123;            theclose[i].adjvex&#x3D;k;            theclose[i].lowcost&#x3D;G.arcs[k][i].adj;        &#125;    &#125;    &#x2F;&#x2F;由于起始点已经归为最小生成树，所以辅助数组对应位置的权值为0，这样，遍历时就不会被选中    theclose[k].lowcost&#x3D;0;    &#x2F;&#x2F;选择下一个点，并更新辅助数组中的信息    for (int i&#x3D;1; i&lt;G.vexnum; i++) &#123;        &#x2F;&#x2F;找出权值最小的边所在数组下标        k&#x3D;minimun(G, theclose);        &#x2F;&#x2F;输出选择的路径        printf(&quot;v%d v%d\n&quot;,G.vexs[theclose[k].adjvex],G.vexs[k]);        &#x2F;&#x2F;归入最小生成树的顶点的辅助数组中的权值设为0        theclose[k].lowcost&#x3D;0;        &#x2F;&#x2F;信息辅助数组中存储的信息，由于此时树中新加入了一个顶点，需要判断，由此顶点出发，到达其它各顶点的权值是否比之前记录的权值还要小，如果还小，则更新        for (int j&#x3D;0; j&lt;G.vexnum; j++) &#123;            if (G.arcs[k][j].adj&lt;theclose[j].lowcost) &#123;                theclose[j].adjvex&#x3D;k;                theclose[j].lowcost&#x3D;G.arcs[k][j].adj;            &#125;        &#125;    &#125;    printf(&quot;\n&quot;);&#125;int main()&#123;    MGraph G;    CreateUDN(&amp;G);    miniSpanTreePrim(G, 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="412-kruskal算法"><a class="markdownIt-Anchor" href="#412-kruskal算法"></a> 4.1.2 Kruskal算法</h3><p>克鲁斯卡尔算法：从边的角度出发，时间复杂度为O(|E|log|E|)，时间复杂度只和边有关系，与普利姆算法（从顶点出发）相反，适合于求边稀疏的网的最小生成树</p><p>克鲁斯卡尔算法的具体思路是：将所有边按照权值的大小进行升序排序，然后从小到大一一判断，条件为：如果这个边不会与之前选择的所有边组成回路，就可以作为最小生成树的一部分；反之，舍去。直到具有 n 个顶点的连通网筛选出来 n-1 条边为止。筛选出来的边和所有的顶点构成此连通网的最小生成树。</p><blockquote><p>判断是否会产生回路的方法为：在初始状态下给每个顶点赋予不同的标记，对于遍历过程的每条边，其都有两个顶点，判断这两个顶点的标记是否一致，如果一致，说明它们本身就处在一棵树中，如果继续连接就会产生回路；如果不一致，说明它们之间还没有任何关系，可以连接。</p></blockquote><p>假设遍历到一条由顶点 A 和 B 构成的边，而顶点 A 和顶点 B 标记不同，此时不仅需要将顶点 A 的标记更新为顶点 B 的标记，还需要更改所有和顶点 A 标记相同的顶点的标记，全部改为顶点 B 的标记。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/Kruskal.png" alt="图1 连通网"><p>例如，使用克鲁斯卡尔算法找图 1 的最小生成树的过程为：</p><p>首先，在初始状态下，对各顶点赋予不同的标记（用颜色区别），如(1)所示：</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/Kruskal01.png" alt="(1)" style="zoom:50%;" /><p>对所有边按照权值的大小进行排序，按照从小到大的顺序进行判断，首先是（1，3），由于顶点 1 和顶点 3 标记不同，所以可以构成生成树的一部分，遍历所有顶点，将与顶点 3 标记相同的全部更改为顶点 1 的标记，如（2）所示：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal02.png" alt="(2)" /></p><p>其次是（4，6）边，两顶点标记不同，所以可以构成生成树的一部分，更新所有顶点的标记为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal03.png" alt="(3)" /></p><p>其次是（2，5）边，两顶点标记不同，可以构成生成树的一部分，更新所有顶点的标记为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal04.png" alt="(4)" /></p><p>然后最小的是（3，6）边，两者标记不同，可以连接，遍历所有顶点，将与顶点 6 标记相同的所有顶点的标记更改为顶点 1 的标记：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal05.png" alt="(5)" /></p><p>继续选择权值最小的边，此时会发现，权值为 5 的边有 3 个，其中（1，4）和（3，4）各自两顶点的标记一样，如果连接会产生回路，所以舍去，而（2，3）标记不一样，可以选择，将所有与顶点 2 标记相同的顶点的标记全部改为同顶点 3 相同的标记：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/Kruskal06.png" alt="最终结果" /><br />当选取的边的数量相比与顶点的数量小 1 时，说明最小生成树已经生成。所以最终采用克鲁斯卡尔算法得到的最小生成树如上图所示。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;stdio.h&quot;#include &quot;stdlib.h&quot;#define MAX_VERtEX_NUM 20#define VertexType inttypedef struct edge&#123;    VertexType initial;    VertexType end;    VertexType weight;&#125;edge[MAX_VERtEX_NUM];&#x2F;&#x2F;定义辅助数组typedef struct &#123;    VertexType value;&#x2F;&#x2F;顶点数据    int sign;&#x2F;&#x2F;每个顶点所属的集合&#125;assist[MAX_VERtEX_NUM];assist assists;&#x2F;&#x2F;qsort排序函数中使用，使edges结构体中的边按照权值大小升序排序int cmp(const void *a,const void*b)&#123;    return  ((struct edge*)a)-&gt;weight-((struct edge*)b)-&gt;weight;&#125;&#x2F;&#x2F;初始化连通网void CreateUDN(edge *edges,int *vexnum,int *arcnum)&#123;    printf(&quot;输入连通网的边数：\n&quot;);    scanf(&quot;%d %d&quot;,&amp;(*vexnum),&amp;(*arcnum));    printf(&quot;输入连通网的顶点：\n&quot;);    for (int i&#x3D;0; i&lt;(*vexnum); i++) &#123;        scanf(&quot;%d&quot;,&amp;(assists[i].value));        assists[i].sign&#x3D;i;    &#125;    printf(&quot;输入各边的起始点和终点及权重：\n&quot;);    for (int i&#x3D;0 ; i&lt;(*arcnum); i++) &#123;        scanf(&quot;%d,%d,%d&quot;,&amp;(*edges)[i].initial,&amp;(*edges)[i].end,&amp;(*edges)[i].weight);    &#125;&#125;&#x2F;&#x2F;在assists数组中找到顶点point对应的位置下标int Locatevex(int vexnum,int point)&#123;    for (int i&#x3D;0; i&lt;vexnum; i++) &#123;        if (assists[i].value&#x3D;&#x3D;point) &#123;            return i;        &#125;    &#125;    return -1;&#125;int main()&#123;       int arcnum,vexnum;    edge edges;    CreateUDN(&amp;edges,&amp;vexnum,&amp;arcnum);    &#x2F;&#x2F;对连通网中的所有边进行升序排序，结果仍保存在edges数组中    qsort(edges, arcnum, sizeof(edges[0]), cmp);    &#x2F;&#x2F;创建一个空的结构体数组，用于存放最小生成树    edge minTree;    &#x2F;&#x2F;设置一个用于记录最小生成树中边的数量的常量    int num&#x3D;0;    &#x2F;&#x2F;遍历所有的边    for (int i&#x3D;0; i&lt;arcnum; i++) &#123;        &#x2F;&#x2F;找到边的起始顶点和结束顶点在数组assists中的位置        int initial&#x3D;Locatevex(vexnum, edges[i].initial);        int end&#x3D;Locatevex(vexnum, edges[i].end);        &#x2F;&#x2F;如果顶点位置存在且顶点的标记不同，说明不在一个集合中，不会产生回路        if (initial!&#x3D;-1&amp;&amp; end!&#x3D;-1&amp;&amp;assists[initial].sign!&#x3D;assists[end].sign) &#123;            &#x2F;&#x2F;记录该边，作为最小生成树的组成部分            minTree[num]&#x3D;edges[i];            &#x2F;&#x2F;计数+1            num++;            &#x2F;&#x2F;将新加入生成树的顶点标记全不更改为一样的            for (int k&#x3D;0; k&lt;vexnum; k++) &#123;                if (assists[k].sign&#x3D;&#x3D;assists[end].sign) &#123;                    assists[k].sign&#x3D;assists[initial].sign;                &#125;            &#125;            &#x2F;&#x2F;如果选择的边的数量和顶点数相差1，证明最小生成树已经形成，退出循环            if (num&#x3D;&#x3D;vexnum-1) &#123;                break;            &#125;        &#125;    &#125;    &#x2F;&#x2F;输出语句    for (int i&#x3D;0; i&lt;vexnum-1; i++) &#123;        printf(&quot;%d,%d\n&quot;,minTree[i].initial,minTree[i].end);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-最短路径"><a class="markdownIt-Anchor" href="#42-最短路径"></a> 4.2 最短路径</h2><a href="/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/" title="最短路径">最短路径</a><p>两个顶点之间带权路径长度最短的路径为最短路径。在带权图中，把从一个顶点v到另一个顶点u所经历的边的权值之和称为，路径的带权路径长度。</p><h3 id="421-迪杰斯特拉dijkstra算法"><a class="markdownIt-Anchor" href="#421-迪杰斯特拉dijkstra算法"></a> 4.2.1 迪杰斯特拉（Dijkstra）算法</h3><p><mark>带权图单源最短路径，不适用于含有负权边的图</mark></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/迪杰斯特拉算法.png"><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/迪杰斯特拉算法-通过path数组找到路径.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Dijkstra(Graph G,int v) &#123;  &#x2F;&#x2F; 初始化  int s[G.vexnum];  int path[G.vexnum];  int dist[G.vexnum];  for(int i &#x3D; 0; i &lt; G.vexnum; i++) &#123;    dist[i] &#x3D; G.edge[v][i];    s[i] &#x3D; 0;    if(G.edge[v][i] &lt; MAX) &#123;      path[i] &#x3D; v;    &#125; else &#123;      path[i] &#x3D; -1;    &#125;  &#125;  s[v] &#x3D; 1;  path[v] &#x3D; -1;  for(int i &#x3D; 0; i &lt; G.vexnum; i++)&#123;    int min &#x3D; MAX:    int u;    for(int j &#x3D; 0; j &lt; G.vexnum; j++) &#123;      if(S[j] &#x3D;&#x3D; 0 &amp;&amp; dist[j] &lt; min)&#123;        min &#x3D; dist[j];        u &#x3D; j;      &#125;    &#125;    s[u] &#x3D; 1;    for(int j &#x3D; 0; j &lt; G.vexnum; j++) &#123;      if(s[j] &#x3D;&#x3D; 0 &amp;&amp; dist[u] + G.Edge[i][j] &lt; dist[j]) &#123;        dist[j] &#x3D; dist[u] + G.Edge[u][i];        path[j] &#x3D; u;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="422-弗洛伊德floyd算法"><a class="markdownIt-Anchor" href="#422-弗洛伊德floyd算法"></a> 4.2.2 弗洛伊德（Floyd）算法</h3><p><strong>【算法思想】</strong></p><p>弗洛伊德的核心思想是：对于网中的任意两个顶点（例如顶点 A 到顶点 B）来说，之间的最短路径不外乎有 2 种情况：</p><ol><li>直接从顶点 A 到顶点 B 的弧的权值为顶点 A 到顶点 B 的最短路径；</li><li>从顶点 A 开始，经过若干个顶点，最终达到顶点 B，期间经过的弧的权值和为顶点 A 到顶点 B 的最短路径。<br />所以，弗洛伊德算法的核心为：对于从顶点 A 到顶点 B 的最短路径，拿出网中所有的顶点进行如下判断：</li></ol><blockquote><p>Dis（A，K）+ Dis（K，B）&lt; Dis（A，B）</p></blockquote><p>其中，K 表示网中所有的顶点；Dis（A，B） 表示顶点 A 到顶点 B 的距离。</p><p>也就是说，拿出所有的顶点 K，判断经过顶点 K 是否存在一条可行路径比直达的路径的权值小，如果式子成立，说明确实存在一条权值更小的路径，此时只需要更新记录的权值和即可。</p><p>任意的两个顶点全部做以上的判断，最终遍历完成后记录的最终的权值即为对应顶点之间的最短路径。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/弗洛伊德算法思想.png"><p><strong>【例子】</strong></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/弗洛伊德01.png" alt="img" style="zoom:50%;" alt="图 1 带权图"/><p>例如，在使用弗洛伊德算法计算图 1 中的任意两个顶点之间的最短路径时，具体实施步骤为：</p><p>首先，记录顶点之间初始的权值，如下表所示：</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/弗洛伊德02.png"> <p>依次遍历所有的顶点，假设从 V0 开始，将 V0 作为中间点，看每对顶点之间的距离值是否会更小。最终 V0 对于每对顶点之间的距离没有任何改善。</p><blockquote><p>对于 V0 来说，由于该顶点只有出度，没有入度，所以没有作为中间点的可能。同理，V1也没有可能。</p></blockquote><p>将 V2 作为每对顶点的中间点，有影响的为 （V0，V3） 和 （V1，V3）：</p><blockquote><p>例如，（V0，V3）权值为无穷大，而（V0，V2）+（V2，V3）= 60，比之前的值小，相比而言后者的路径更短；同理 （V1，V3）也是如此。</p></blockquote><p>更新的表格为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B703.png" alt="" /></p><p>以 V3 作为中间顶点遍历各队顶点，更新后的表格为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B704.png" alt="" /></p><p>以 V4 作为中间顶点遍历各队顶点，更新后的表格为：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B705.png" alt="" /></p><p>而对于顶点 V5 来说，和顶点 V0 和 V1 相类似，所不同的是，V5 只有入度，没有出度，所以对各队顶点的距离不会产生影响。最终采用弗洛伊德算法求得的各个顶点之间的最短路径如上图所示。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MAX_VERtEX_NUM <span class="token number">20</span>                   </span><span class="token comment">//顶点的最大个数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">VRType <span class="token keyword">int</span>                          </span><span class="token comment">//表示弧的权值的类型</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">VertexType <span class="token keyword">int</span>                      </span><span class="token comment">//图中顶点的数据类型</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">INFINITY <span class="token number">65535</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    VertexType vexs<span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//存储图中顶点数据</span>    VRType arcs<span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>                         <span class="token comment">//二维数组，记录顶点之间的关系</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>arcnum<span class="token punctuation">;</span>                      <span class="token comment">//记录图的顶点数和弧（边）数</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> PathMatrix<span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//用于存储最短路径中经过的顶点的下标</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ShortPathTable<span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERtEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//用于存储各个最短路径的权值和</span><span class="token comment">//根据顶点本身数据，判断出顶点在二维数组中的位置</span><span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span> G<span class="token punctuation">,</span>VertexType v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//遍历一维数组，找到变量v</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token operator">-></span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果找不到，输出提示语句，返回-1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span>G<span class="token operator">-></span>vexnum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no such vertex.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//构造有向网</span><span class="token keyword">void</span> <span class="token function">CreateUDG</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>G<span class="token operator">-></span>arcnum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>G<span class="token operator">-></span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INFINITY<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token operator">-></span>arcnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>w<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v1<span class="token punctuation">,</span><span class="token operator">&amp;</span>v2<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>n<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no this vertex\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//弗洛伊德算法，其中P二维数组存放各对顶点的最短路径经过的顶点，D二维数组存储各个顶点之间的权值</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Floyed</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span>PathMatrix <span class="token operator">*</span>P<span class="token punctuation">,</span>ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//对P数组和D数组进行初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> w<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">.</span>arcs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//拿出每个顶点作为遍历条件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//对于第k个顶点来说，遍历网中任意两个顶点，判断间接的距离是否更短</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> w<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断经过顶点k的距离是否更短，如果判断成立，则存储距离更短的路径</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    MGraph G<span class="token punctuation">;</span>    <span class="token function">CreateUDG</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>    PathMatrix P<span class="token punctuation">;</span>    ShortPathTable D<span class="token punctuation">;</span>    <span class="token function">ShortestPath_Floyed</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token operator">&amp;</span>P<span class="token punctuation">,</span> <span class="token operator">&amp;</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="43-拓扑排序"><a class="markdownIt-Anchor" href="#43-拓扑排序"></a> 4.3 拓扑排序</h2><p><span style="color:blue;font-size:18px;">有向无环图：</span>不存在环的有向图，简称DAG图</p><p><span style="color:blue;font-size:18px;">AOV网：</span>若用一个DAG图表示一个工程，其顶点表示活动，用有向边&lt;vi,vj&gt;表示活动vi先于活动vj进行的传递关系，则将这种DAG称为顶点表示活动网络，记为AOV网</p><p><span style="color:blue;font-size:18px;">拓扑排序：</span>对DAG所有顶点的一种排序，使若存在一条从顶点A到顶点B的路径，在排序中B排在A的后面</p><p><strong>【步骤】</strong></p><ol><li>从DAG中选择一个没有前驱的顶点并输出</li><li>从图中删除该顶点和所有以它为起点的有向边</li><li>重复上述步骤，直到当前DAG图为空或者当前图中不存在无前驱的顶点为止。后一种情况说明图中有环。</li></ol><p><mark>拓扑排序不一定唯一 O(|V|+|E|)</mark></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool TopologicalSort(Graph G) &#123;  InitStack(s);  for(int i &#x3D; 0; i &lt; G.vexnum; i++) &#123;    if(indegree[i] &#x3D;&#x3D; 0)      push(s,i);  &#125;  int count &#x3D; 0;  while(!isEmpty(s)) &#123;    pop(s,i);    print[count++] &#x3D; i;    for(p &#x3D; G.Vertices[i].firstarc; p; p&#x3D;p-&gt;next) &#123;      v &#x3D; p-&gt;adjvex;      if(!(--indegree[v]))        push(s,v);    &#125;  &#125;  if(count &lt; G.vexnum)    return false;  else     return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>若邻接矩阵为三角矩阵，则存在拓扑排序，反之不一定成立</p></blockquote><h2 id="44-关键路径"><a class="markdownIt-Anchor" href="#44-关键路径"></a> 4.4 关键路径</h2><p><span style="color:blue;font-size:18px;">AOE网：</span>在有向带权图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销（如完成活动需要的时间），则称这种有向图为用边表示活动的网络，简称AOE网</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/AOE.png" alt="AOE网"><p><span style="color:blue;font-size:18px;">关键路径：</span>从原点到汇点最大路径长度的路径称为关键路径，关键路径上的活动为关键活动</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/图/关键路径.png"><p>此时，d(i)为0的路径就是关键路径 {a2,a5,a7}</p><blockquote><p><mark>缩短关键活动的时间可以加快整个工程，但缩短到一定大小时，关键路径会发生变化</mark></p><p><mark>当网中关键路径不唯一时，只有加快关键活动或者关键活动组合包括在所有的关键路径上才能缩短工期</mark></p></blockquote><h1 id="5-图的基本操作"><a class="markdownIt-Anchor" href="#5-图的基本操作"></a> 5 图的基本操作</h1><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>Adjacent(G,x,y)</td><td>判断图G是否存在&lt;x,y&gt;或者(x,y)</td></tr><tr><td>Neighbors(G,x)</td><td>列出图G与结点x邻接的边</td></tr><tr><td>InsertVertex(G,x)</td><td>在图G中插入顶点x</td></tr><tr><td>DeleteVertex(G,x)</td><td>图G中删除顶点x</td></tr><tr><td>AddEdge(G,x,y)</td><td>若所添加的边不存在，则添加（x,y）或者&lt;x,y&gt;</td></tr><tr><td>RemoveEdge(G,x,y)</td><td>若该边存在，则删除</td></tr><tr><td>FirstNeighbor(G,x)</td><td>求G中顶点x的第一个邻接点，图中无x点或者没有找到，返回-1</td></tr><tr><td>NextNeighbor(G,x)</td><td>y是x的一个邻接点，返回除y之外的顶点x的下一个邻接点顶点号，若y是x的最后一个邻接点，返回-1</td></tr><tr><td>Get_edge_value(G,x,y)</td><td>得到边的权重</td></tr><tr><td>Set_edge_value(G,x,y)</td><td>设置边的权重</td></tr></tbody></table><ul><li><p>Adjacent，判断图G是否存在某边</p><table><thead><tr><th></th><th>邻接矩阵</th><th>邻接表</th></tr></thead><tbody><tr><td>无向图</td><td>O(1)</td><td>O(|E|)</td></tr><tr><td>有向图</td><td>O(1)</td><td>O(|E|)</td></tr></tbody></table><blockquote><p>邻接矩阵存储。只需要通过数组下标访问某个位置即可，</p><p>邻接表存储。需要遍历单链表</p></blockquote></li><li><p>Neighbors，列出与所给结点邻接的边</p><table><thead><tr><th></th><th>邻接矩阵</th><th>邻接表</th></tr></thead><tbody><tr><td>无向图</td><td>O(|V|)</td><td>O(n),n≤|V|</td></tr><tr><td>有向图</td><td>O(2|V|)</td><td>O(|E|)</td></tr></tbody></table><blockquote><p>有向图【邻接矩阵存储】，找结点出度和入度只需要遍历该结点所在的行与列，遍历的次数为2|V|</p><p>有向图【邻接表存储】，虽然某结点的出度很容易得到，但是统计某结点的入度需要遍历每个结点的链表。次数一共为|E|</p></blockquote></li><li><p>InsertVertex，插入</p><blockquote><p>无向图/有向图【邻接矩阵】，插入结点，需要数组扩容，重新申请一个新数据，将旧数据拷贝（需要|V|<sup>2</sup>次），再将新结点与其他结点的填入扩充出来的位置中（需要|V|次），效率不高。</p><p>无向图/有向图，插入结点，需要扩充顶点表，旧数组中顶点表数据拷贝到新数组（|V|次），然后更新。效率会比邻接矩阵要高</p></blockquote></li><li><p>DeleteVertex</p><blockquote><p>对于邻接矩阵存储删除结点，可以使该结点的行与列置NULL，或者缩小矩阵来实现</p></blockquote></li><li><p>AddEdge</p><blockquote><p>邻接矩阵更快，直接修改矩阵中对应位置的值为1即可</p><p>邻接表，需要创建链表结点，再修改指针</p></blockquote></li><li><p>RemoveEdge</p><blockquote><p>邻接矩阵更快，直接修改数组中的元素数据</p><p>邻接表，找到对应的然后（费时间），然后删除</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="%E6%A0%91/"/>
      <url>%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><span style="font-Size:18px;color:blue;padding-right:5px;"><strong>树</strong></span>是n(n&gt;=0)个结点的有限集合，n=0时，称为空树，树是一种逻辑结构。而任意非空树应该满足：</p><p>1）有且仅有一个特定的称为<span style="color:red;"><strong>根的结点</strong></span></p><p>2）当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集合，其中每一个集合本身又是一棵树，称为根结点的<span style="color:red;"><strong>子树</strong></span></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/树.png" alt="树"><p><strong>【相关概念】</strong></p><table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>祖先结点和子孙结点</td><td>A是所有结点的祖先结点，为根节点。B是EF的祖先结点，EF是B的子孙结点</td></tr><tr><td>双亲结点和孩子结点</td><td>B是E的双亲结点，E是B的孩子结点</td></tr><tr><td>兄弟节点</td><td>EF互为兄弟结点，BCD互为兄弟结点</td></tr><tr><td>度</td><td>树中一个结点的子结点的个数称为该结点的度。比如B的度为2，A的度为3</td></tr><tr><td>树的度</td><td>度中取最大值</td></tr><tr><td>分支结点</td><td>度大于0的结点</td></tr><tr><td>叶子结点</td><td>度为0的结点</td></tr><tr><td>结点的层次</td><td>见上图</td></tr><tr><td>结点的高度</td><td>从最底下一层向根节点累计。比如B结点的高度是3</td></tr><tr><td>结点的深度</td><td>与结点高度相反，从根节点开始，B结点的深度为2</td></tr><tr><td>树的高度(深度)</td><td>树中结点的最大层次</td></tr><tr><td>有序树和无序树</td><td>见下图。若为无序树，两个树相同，若为有序树，两个树不同</td></tr><tr><td>路径</td><td>树中两个结点之间的路径是由这两个结点之间所经过的结点序列构成的。树的分支是有向的，即从双亲结点指向孩子结点，所以路径一定是自上而下的。A到E的路径是ABE</td></tr><tr><td>路径长度</td><td>路径上所经历边的个数。A到E的路径长度为2</td></tr><tr><td>森林</td><td>m(m&gt;=0)棵互不相交的树的集合。比如上图去掉根节点A后，1棵树变3棵树</td></tr></tbody></table><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/有序树和无序树.png"><p><strong>【树的性质】</strong></p><ol><li>树中的结点树等于所有结点的度+1</li><li>度为m的树中第i层上最多有m<sup>i-1</sup>个结点(i&gt;=1)</li><li>高度为h的m叉树至多有（m<sup>h</sup>-1）/（m-1）个结点</li><li>具有n个结点的m叉树的最小高度为⌈log<sub>m</sub>（n（m-1） + 1）⌉</li></ol><h1 id="1-二叉树"><a class="markdownIt-Anchor" href="#1-二叉树"></a> 1 二叉树</h1><h2 id="11-二叉树的基本概念"><a class="markdownIt-Anchor" href="#11-二叉树的基本概念"></a> 1.1 二叉树的基本概念</h2><h3 id="111-定义及特点"><a class="markdownIt-Anchor" href="#111-定义及特点"></a> 1.1.1 定义及特点</h3><p>二叉树是逻辑结构。</p><p>二叉树是n(n&gt;=0)个结点的有限集合。</p><ul><li>n=0时，二叉树为空</li><li>n&gt;0时，由根结点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树也分别是一棵二叉树</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉树五种基本形态.png"><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>满二叉树</td><td>一个高度为h的二叉树，且含有2<sup>h</sup>-1个结点的二叉树为满二叉树。</td></tr><tr><td>完全二叉树</td><td>设一个高度为h、有n个结点的二叉树，当且仅当其每个结点都与高度为h的满二叉树中编号1~n的结点一一对应，称为完全二叉树</td></tr><tr><td>二叉排序树</td><td>一个二叉树，若树非空则具有如下性质：对任意结点若存在左子树或右子树，则其左子树上所有结点的关键字均小于该结点，右子树上所有结点的关键字都大于该结点</td></tr><tr><td>平衡二叉树</td><td>树上任意结点的左子树和右子树的深度差不超过1</td></tr></tbody></table><p><strong>【满二叉树】</strong></p><ul><li>高度为h的m叉树，最多有（m<sup>h</sup>-1）/（m-1）个结点。</li><li>对于编号为i的结点，若存在，其双亲的编号为⌊i/2⌋，左孩子为2i，右孩子为2i+1</li></ul><img alt="满二叉树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/满二叉树.png"><p><strong>【完全二叉树】</strong></p><ul><li>若i≤⌊n/2⌋，则结点i为分支结点，否则为叶子结点</li><li>叶子结点只可能在层次最大的两层出现。对于最大层次的叶子结点，都依次排在最左边的位置上。</li><li>度为1的结点倘若存在，只可能存在一个，且是编号最大的分支结点，并孩子结点一定是左结点</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/完全二叉树.png" alt="完全二叉树"><p><strong>【二叉排序树】</strong></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉排序树.png" alt="二叉排序树"><p><strong>【平衡二叉树】</strong></p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/平衡二叉树.png" alt="平衡二叉树"><h3 id="112-二叉树的性质"><a class="markdownIt-Anchor" href="#112-二叉树的性质"></a> 1.1.2 二叉树的性质</h3><ol><li><p>非空二叉树上的叶子结点树量等于度为2的结点数量加1，即n<sub>0</sub>=n<sub>2</sub>+1</p></li><li><p>非空二叉树上第k层上最多有2<sup>k-1</sup>个结点（k &gt;=1）</p></li><li><p>高度为h的二叉树至多有2<sup>h</sup>-1个结点（h &gt;=1）</p></li><li><p>结点i所在的层次为⌊log<sub>2</sub>i⌋+1</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/结点i所在层.png"></li><li><p>具有n个（n&gt;0）结点的完全二叉树的高度为⌊log<sub>2</sub>n⌋+1 或者⌈log<sub>2</sub>(n+ 1)⌉</p></li></ol><h2 id="12-二叉树的存储结构"><a class="markdownIt-Anchor" href="#12-二叉树的存储结构"></a> 1.2 二叉树的存储结构</h2><h3 id="121-顺序存储"><a class="markdownIt-Anchor" href="#121-顺序存储"></a> 1.2.1 顺序存储</h3><p>用一组连续的存储单元依次自上而下、自左至右存储完全二叉树的结点元素。顺序存储比较适合存储完全二叉树，通过利用第i个结点的左结点是2i，右结点是2i+1这条性质，来表达逻辑上的结构关系。</p><p>当存储的树不是完全二叉树时，上述所用的性质行不通，可以通过补结点的方式来将此树补成一颗完全二叉树。（倘若补的结点过多，会存在浪费的情况）</p><h3 id="122-链式存储"><a class="markdownIt-Anchor" href="#122-链式存储"></a> 1.2.2 链式存储</h3><p>用链表存放一棵二叉树，二叉树中每个结点用链表的一个链结点来存储</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/链式存储.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct BiTNode &#123;  ElemType data;  struct BiTNode *lchild, *rchild;&#125;BiTNode, *BiTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/链式存储2.png"><p><span style="color:red;">※含有n个结点的二叉链表，有n+1个空链域</span></p><h2 id="13-二叉树的遍历"><a class="markdownIt-Anchor" href="#13-二叉树的遍历"></a> 1.3 二叉树的遍历</h2><p>按某条搜索路径访问树中的每个结点，树的每个结点均被访问一次，而且只访问一次</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉树遍历.png"><h3 id="131-前序遍历"><a class="markdownIt-Anchor" href="#131-前序遍历"></a> 1.3.1 前序遍历</h3><p>根——&gt;左子树——&gt;右子树</p><p>上图遍历顺序：1 2 4 5 3 6</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void PreOrder(BiTree T) &#123;  if(T !&#x3D; NULL) &#123;    visit(T);    PreOrder(T-&gt;lchild);    PreOrder(T-&gt;rchild);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="132-中序遍历"><a class="markdownIt-Anchor" href="#132-中序遍历"></a> 1.3.2 中序遍历</h3><p>左子树——&gt;根——&gt;右子树</p><p>上图遍历顺序：4 2 5 1 6 3</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InOrder(BiTree T) &#123;  if(T !&#x3D; NULL) &#123;    InOrder(T-&gt;lchild);    visit(T);    InOrder(T-&gt;rchild);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【非递归算法】</strong></p><p>1）初始时，一次扫描根结点的所有左侧结点并进栈</p><p>2）出栈一个结点，并访问</p><p>3）扫描该结点的右孩子结点的所有结点并进栈</p><p>4）依次扫描右孩子结点的所有左侧结点并进栈</p><p>5）反复直到栈空</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InOrder(BiTree T) &#123;  InitStack(S);  BiTress p &#x3D; T;  while(p || IsEmpty(S)) &#123;    if(p) &#123;      Push(S,p);      p &#x3D; p-&gt;lchild;    &#125; else &#123;      Pop(S,p);      visit(p);      p&#x3D;p-&gt;rchild;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="133-后序遍历"><a class="markdownIt-Anchor" href="#133-后序遍历"></a> 1.3.3 后序遍历</h3><p>左子树——&gt;右子树——&gt;根</p><p>上图遍历顺序：4 5 2 6 3 1</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void PreOrder(BiTree T) &#123;  if(T !&#x3D; NULL) &#123;    PreOrder(T-&gt;lchild);    PreOrder(T-&gt;rchild);     visit(T);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="134-层次遍历"><a class="markdownIt-Anchor" href="#134-层次遍历"></a> 1.3.4 层次遍历</h3><p><strong>【算法思想】</strong></p><p>1）初始将根入队列并访问根结点，然后出队</p><p>2）若有左子树，则将左子树的根入队</p><p>3）若有右子树，则将右子树的根入队</p><p>4）出队，访问该结点</p><p>5）反复直到队空</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void levelOrder(BiTress T) &#123;  InitQueue(Q);  BiTree(Q,T);  while(!isEmpty(Q)) &#123;    DeQueue(Q,p);    visit(p);    if(p-&gt;lchild !&#x3D; NULL)      EnQueue(Q,p-&gt;lchild);    if(p-&gt;rchild !&#x3D; NULL)      EnQueue(Q,p-&gt;rchild);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-线索二叉树"><a class="markdownIt-Anchor" href="#14-线索二叉树"></a> 1.4 线索二叉树</h2><p><span style="color:blue;font-size:18px">线索化</span></p><p>若无左子树，则将左指针指向其前驱结点</p><p>若无右子树，则将右指针指向其后继结点</p><h3 id="141-先序线索二叉树"><a class="markdownIt-Anchor" href="#141-先序线索二叉树"></a> 1.4.1 先序线索二叉树</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/前序线索二叉树.png" alt="先序线索二叉树"><h3 id="142-中序线索二叉树"><a class="markdownIt-Anchor" href="#142-中序线索二叉树"></a> 1.4.2 中序线索二叉树</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/中序线索二叉树.png" alt="中序线索二叉树"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InThread(ThreadTree &amp;p, ThreadTree &amp;pre) &#123;  if(p !&#x3D; NULL) &#123;    InThread(p-&gt;lchild,pre);    if(p-&gt;lchild &#x3D;&#x3D; NULL) &#123;      p-&gt;lchild &#x3D; pre;      p-&gt;ltag &#x3D; 1;    &#125;    if(pre !&#x3D; NULL &amp;&amp; pre-&gt;rchild &#x3D;&#x3D; NULL) &#123;      pre-&gt;rchild &#x3D; p;      pre-&gt;rtag &#x3D; 1;    &#125;    pre &#x3D; p;    InThread(p-&gt;rchild,pre);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void CreateThread(ThreadTree T) &#123;  ThreadTree pre &#x3D; NULL;  if(T !&#x3D; NULL) &#123;    InThread(T, pre);    pre-&gt;rchild &#x3D; NULL;    pre-&gt;tag &#x3D; 1;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>中序线索二叉树遍历</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ThreadNode * FirstNode(ThreadNode *p) &#123;  while(p-&gt;ltag &#x3D;&#x3D; 0)    p &#x3D; p-&gt;lchild;  return p;&#125;ThreadNode * NextNode(ThreadNode *p) &#123;  if(p-&gt;rtag &#x3D;&#x3D; 0)     return FirstNode(p-&gt;rchild);  else     return p-&gt;rchild;&#125;void InOrder(ThreadNode *T) &#123;  for(ThreadNode *p &#x3D; FirstNode(T); p!&#x3D;NULL; p&#x3D;NextNode(p))    visit(p);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="143-后序线索二叉树"><a class="markdownIt-Anchor" href="#143-后序线索二叉树"></a> 1.4.3 后序线索二叉树</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/后序线索二叉树.png" alt="后序线索二叉树"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct ThreadNode &#123;  ElemType data;  struct ThreedNode *lchild, *rchild;  int ltag, rtag;&#125;ThreadNode, *ThreadTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/线索二叉树结点.png" alt="线索二叉树结点"><h2 id="15-二叉树的应用"><a class="markdownIt-Anchor" href="#15-二叉树的应用"></a> 1.5 二叉树的应用</h2><h3 id="151-二叉排序树"><a class="markdownIt-Anchor" href="#151-二叉排序树"></a> 1.5.1 二叉排序树</h3><p><span style="color:blue;font-size:18px;">二叉排序树</span> BST，也称二叉查找树。二叉排序树可为空树、非空树，当为非空树时有如下特点：</p><p>1）若左子树非空，左子树上的所有结点关键字小于根结点的关键字</p><p>2）若右子树非空，右子树上的所有结点关键字大于根结点的关键字</p><p>3）左、右子树本身也分别是一棵二叉排序树</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉排序树2.png" alt="二叉排序树"><p><strong>【查找】</strong></p><p>①二叉树非空时，查找根结点，若相等则查找成功</p><p>②若不等，当小于根结点，查找左子树，大于根结点，查找右子树</p><p>③查找到叶子结点仍然没有找到，查找失败</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BSTNode *BST_Search(BiTree T, ElemType key, BSTNode * &amp;p) &#123;  &#x2F;&#x2F; p是双亲结点  p &#x3D; NULL;  while(T !&#x3D; NULL &amp;&amp; key !&#x3D; T-&gt;data) &#123;    p &#x3D; T;    if(key &lt; T-&gt;data)      T &#x3D; T-&gt;rchild;    else       T &#x3D; T-&gt;rchild;  &#125;  return T;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【插入】</strong></p><p>①若二叉排序树为空，直接插入</p><p>②若二叉排序树非空，当值小于根结点，插入左子树；大于根结点，插入右子树，当值等于根结点，则不插入</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int BST_Insert(BiTree &amp;T, KeyType k) &#123;  if(T &#x3D;&#x3D; NULL) &#123;    T &#x3D; (BiTree *)malloc(sizeof(BSTNode));    T-&gt;key &#x3D; k;    T-&gt;lchild &#x3D; T-&gt;rchild &#x3D; NULL;    return 1;  &#125;  else if(k &#x3D;&#x3D; T-&gt;key)    return 0;  else if(k &lt; T-&gt;key)    return BST_Insert(T-&gt;lchild,k);  else if(k &gt; T-&gt;key)    return BST_Insert(T-&gt;rchild, k);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【构造二叉排序树】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Create_BST(BiTree &amp;T, KeyType str[], int n) &#123;  T &#x3D; NULL;  int i &#x3D; 0;  while(i &lt; n)    BST_Insert(T, str[i++]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【删除】</strong></p><p>1 ）如果被删除的结点是叶结点，则直接删除</p><p>2）若被删除的结点z只有一颗子树，则让z的子树成为z父结点的子树，代替z结点</p><p>3）若被删除结点z有两棵子树，则让z的中序序列直接后继代替z，并删去直接后继结点</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/二叉排序树（删除）.png" alt="二叉排序树删除节点流程"><p><strong>【查找效率】</strong></p><p>平均查找长度（ASL）取决于树的高度，O(log<sub>2</sub>n)，最坏是O(n)。</p><p>构造二叉排序时最好转成平衡二叉树，这样查找效率是最高的</p><h3 id="152-平衡二叉树"><a class="markdownIt-Anchor" href="#152-平衡二叉树"></a> 1.5.2 平衡二叉树</h3><ul><li><p>高度为h的最小平衡二叉树的结点数N<sub>h</sub> = N<sub>h-1</sub> + N<sub>h-2</sub> + 1</p></li><li><p>平衡二叉树的判断</p><blockquote><p>利用递归的后序遍历过程：</p><p>1）判断左子树是一棵平衡二叉树</p><p>2）判断右子树是一棵平衡二叉树</p><p>3）判断以该结点为根的二叉树为平衡二叉树。左子树和右子树均为平衡二叉树，且左右子树高度差的绝对值小于等于1，则平衡</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Judge_AVL(BiTree bt, int &amp;balance, int &amp;h) &#123;  int bl &#x3D; 0,br &#x3D; 0, hl &#x3D; 0, hr &#x3D; 0;  if(bt &#x3D;&#x3D; NULL) &#123;    h &#x3D; 0;    balance &#x3D; 1;  &#125; else if (bt-&gt;lchild &#x3D;&#x3D; NULL &amp;&amp; bt-&gt;rchild &#x3D;&#x3D; NULL) &#123;    h &#x3D; 1;    balance &#x3D; 1;  &#125; else &#123;    Judge_AVL(bt-&gt;lchild,bl,hl);    Judge_AVL(bt-&gt;rchild,br,hr);    if(hl &gt; hr)      h &#x3D; hl + 1;    else      h &#x3D; hr +1;    if(abs(hl - hr) &lt; 2 &amp;&amp; bl &#x3D;&#x3D; 1 &amp;&amp; br &#x3D;&#x3D; 1)      balance &#x3D; 1;    else       balance &#x3D; 0;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>平衡二叉树的插入</p><blockquote><p>先按照二叉排序树插入，然后进行平衡调整</p></blockquote><img alt="平衡二叉树平衡过程" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/平衡二叉树平衡过程.png"></li></ul><h3 id="153-哈夫曼树及哈夫曼编码"><a class="markdownIt-Anchor" href="#153-哈夫曼树及哈夫曼编码"></a> 1.5.3 哈夫曼树及哈夫曼编码</h3><p>==路径长度：==路径上所经历边的个数</p><p>==结点的权：==结点被赋予的数值</p><p>==树的带权路径长度WPL：==树中叶结点的带权路径长度之和，记为WPL=∑w<sub>i</sub>l<sub>i</sub></p><img alt="带权路径长度求和.png" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/带权路径长度求和.png"><p><strong>【哈夫曼树的构造方法】</strong></p><p>1）将n个结点作为n棵仅含有一个根结点的二叉树，构成森林F</p><p>2）生成一个新结点，并从F中找出根结点全值最小的两棵树作为它的左右子树，且新的结点权值为两棵子树根结点权值之和</p><p>3）从F中删除这两棵树，并将新生成的树加入到F中</p><p>4）重复2,3步，直到森林F中只有一棵树为止</p><img alt="哈夫曼树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/哈夫曼树.png"><p><strong>【哈夫曼编码】</strong></p><p>ABCDE后面的数字为权重，构造出哈夫曼树，然后令结点左边的边为0，右边的边为1，即可得到每个字母对应的哈夫曼编码</p><img alt="哈夫曼编码.png" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/哈夫曼编码.png"><h1 id="2-树和森林"><a class="markdownIt-Anchor" href="#2-树和森林"></a> 2 树和森林</h1><h2 id="21-树的存储结构"><a class="markdownIt-Anchor" href="#21-树的存储结构"></a> 2.1 树的存储结构</h2><h3 id="211-双亲表示法"><a class="markdownIt-Anchor" href="#211-双亲表示法"></a> 2.1.1 双亲表示法</h3><p>采用一组连续的存储空间来存储每个结点，同时在每个结点中增设一个伪指针，指示双亲结点在数组中的位置。根结点的下标为0，其伪指针域为-1</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAX_TREE_SIZE 100typedef struct &#123;  ELemType data;  int parent;&#125;PTNode;typedef struct &#123;  PTNode nodes[MAX_TREE_SIZE];  int n;&#125;PTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img alt="双亲表示法.png" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/双亲表示法.png"><h3 id="212-孩子表示法"><a class="markdownIt-Anchor" href="#212-孩子表示法"></a> 2.1.2 孩子表示法</h3><p>将每个结点的孩子结点都用单链表连接起来形成一个线性结构，n个结点具有n个孩子链表</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAX_TREE_SIZE 100&#x2F;&#x2F; 单链表中的结点typedef struct &#123;  int child;  struct CNode *next;&#125;CNode;&#x2F;&#x2F; 每一个结点存放的数据元素，以及链表第一个结点typedef struct &#123;  ElemType data;  struct Cnode *child;&#125;PNode;typedef struct &#123;  PNode nodes[MAX_TREE_SIZE];  int n;&#125;CTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img alt="孩子表示法" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/孩子表示法.png"><h3 id="213-孩子兄弟表示法"><a class="markdownIt-Anchor" href="#213-孩子兄弟表示法"></a> 2.1.3 孩子兄弟表示法</h3><p>以二叉链表作为树的存储结构，又称二叉树表示法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct CSNode &#123;  ElemType data;  struct CSNode *firstchild,*nextsibling;&#125;CSNode,CSTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img alt="孩子兄弟表示法" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/孩子兄弟表示法.png"><h3 id="214-三种表示法比较"><a class="markdownIt-Anchor" href="#214-三种表示法比较"></a> 2.1.4 三种表示法比较</h3><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>双亲表示法</td><td>寻找结点的双亲结点效率高</td><td>寻找结点的孩子结点效率低</td></tr><tr><td>孩子表示法</td><td>寻找结点的孩子结点效率高</td><td>寻找结点的双亲结点效率低</td></tr><tr><td>孩子兄弟表示法</td><td>寻找结点的孩子结点效率高，方便实现树转二叉树</td><td>寻找结点的双亲结点效率低</td></tr></tbody></table><h2 id="22-树-森林二叉树"><a class="markdownIt-Anchor" href="#22-树-森林二叉树"></a> 2.2 树、森林二叉树</h2><h3 id="221-树转二叉树"><a class="markdownIt-Anchor" href="#221-树转二叉树"></a> 2.2.1 树转二叉树</h3><p>规则：每个结点的左指针指向它的第一个孩子结点，右指针指向它在树中相邻兄弟结点。</p><p>【上图树转二叉树】</p><img alt="上图的树转二叉树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/树转二叉树.png"><h3 id="222-森林转二叉树"><a class="markdownIt-Anchor" href="#222-森林转二叉树"></a> 2.2.2 森林转二叉树</h3><p>规则：将每棵树转换为二叉树，将每棵二叉树的根一次作为上一棵二叉树的右子树</p><img alt="森林转二叉树" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/森林转二叉树.png"><h3 id="223-树的遍历"><a class="markdownIt-Anchor" href="#223-树的遍历"></a> 2.2.3 树的遍历</h3><ul><li><p>先根遍历（类比二叉树的先序遍历）</p><p>树的先根遍历序列与这棵树对应的二叉树的先序遍历序列相同</p></li><li><p>后根遍历</p><p>后根遍历顺序类比二叉树的后序遍历，但是最后得到的遍历序列与该树对应的二叉树的中序遍历相同</p></li><li><p>层次遍历（类比二叉树的层次遍历）</p></li></ul><h3 id="224-森林的遍历"><a class="markdownIt-Anchor" href="#224-森林的遍历"></a> 2.2.4 森林的遍历</h3><ul><li><p>森林的先序遍历</p><img alt="森林的先序遍历" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/森林的先序遍历.png"></li><li><p>森林的中序遍历</p><img alt="森林的中序遍历" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/森林的中序遍历.png"></li></ul><img alt="森林、树、二叉树遍历序列的关系" data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/树/森林、树、二叉树遍历序列的关系.png"><h2 id="23-树的应用并查集"><a class="markdownIt-Anchor" href="#23-树的应用并查集"></a> 2.3 树的应用–并查集</h2><p>并查集是一种简单的集合表示</p><ul><li>通常用树的<mark>双亲表示法</mark>作为并查集的存储结构</li><li>通常用数组元素的下标代表元素名，用根结点的下标代表子集合名，根结点的双亲结点为负数</li></ul><table><thead><tr><th>基本操作</th><th></th></tr></thead><tbody><tr><td>Initial(S)</td><td>将集合S中的每个元素都初始化为只有一个单元数的子集合</td></tr><tr><td>Union(S,Root1,Root2)</td><td>把集合S中的子集合(互不相交)Root2并入子集合Root1</td></tr><tr><td>Find(S,x)</td><td>查找集合S中单元数x所在子集合，并返回该孩子集合的名字</td></tr></tbody></table><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define SIZE 100int UFSets[SIZE];void Initial(int S[]) &#123;  for(int i &#x3D; 0; i &lt; size; i++) &#123;    S[i] &#x3D; -1;  &#125;&#125;int Find(int S[], int x) &#123;  while(S[x] &gt;&#x3D;0)    x &#x3D; S[x];  return x;&#125;void Union(int S[], int Root1, int Roo2) &#123;  S[Root2] &#x3D; Root1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-栈"><a class="markdownIt-Anchor" href="#1-栈"></a> 1 栈</h1><h2 id="11-基本概念"><a class="markdownIt-Anchor" href="#11-基本概念"></a> 1.1 基本概念</h2><p>只允许在一端进行插入或删除操作的线性表，LIFO（后进先出）</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/栈和队列/栈.png"><table><thead><tr><th>基本操作</th><th>说明</th></tr></thead><tbody><tr><td>InitStack(&amp;S)</td><td>初始化空栈S</td></tr><tr><td>StackEmpty(S)</td><td>栈判空</td></tr><tr><td>Push(&amp;S,x)</td><td>压栈</td></tr><tr><td>Pop(&amp;S,&amp;x)</td><td>出栈，返回出栈元素</td></tr><tr><td>GetTop(S,&amp;x)</td><td>获取栈顶</td></tr><tr><td>ClearStack(&amp;S)</td><td>销毁栈</td></tr></tbody></table><h2 id="12-存储结构"><a class="markdownIt-Anchor" href="#12-存储结构"></a> 1.2 存储结构</h2><h3 id="121-顺序栈-采用顺序存储的栈"><a class="markdownIt-Anchor" href="#121-顺序栈-采用顺序存储的栈"></a> 1.2.1 顺序栈 采用顺序存储的栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxSize 50typedef struct &#123;  ElemType data[MaxSize];  int top;&#125;SqStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 栈空S.top &#x3D;&#x3D; -1;&#x2F;&#x2F; 栈满S.top &#x3D;&#x3D; MaxSize - 1;&#x2F;&#x2F; 栈长S.top + 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【栈判空】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool StackEmpty(SqStack S) &#123;  if(S.top &#x3D;&#x3D; -1) &#123;    return true;  &#125; else &#123;    return false;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【进栈】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool Push(SqStack &amp;S, ElemType x) &#123;  if(S.top &#x3D;&#x3D; MaxSize - 1) return false;  S.data[++S.top] &#x3D; x;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【出栈】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool Pop(SqStack &amp;S, ElemType &amp;x) &#123;  if(S.top &#x3D;&#x3D; -1) return false;  x &#x3D; S.data[S.top--];  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【读栈顶】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool GetTop(SqStack &amp;S, ElemType &amp;x) &#123;  if(S.top &#x3D;&#x3D; -1)return false;  x &#x3D; S.data[S.top];  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="122-共享栈"><a class="markdownIt-Anchor" href="#122-共享栈"></a> 1.2.2 共享栈</h3><p>将两个栈底设置在共享空间的两端，栈顶向空间中间延伸</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 判空0号栈：top &#x3D;&#x3D; -1;1号栈：top &#x3D;&#x3D; MaxSize;&#x2F;&#x2F; 栈满top1 - top0 &#x3D;&#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="123-链栈"><a class="markdownIt-Anchor" href="#123-链栈"></a> 1.2.3 链栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LinkNode() &#123;  ElemType data;  struct LinkNode *next;&#125; *LiStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-栈的应用"><a class="markdownIt-Anchor" href="#12-栈的应用"></a> 1.2 栈的应用</h2><h3 id="121-合法出栈个数"><a class="markdownIt-Anchor" href="#121-合法出栈个数"></a> 1.2.1 合法出栈个数</h3><p>f(n) =  C(2n,n) /（n+1）</p><h3 id="122-括号匹配"><a class="markdownIt-Anchor" href="#122-括号匹配"></a> 1.2.2 括号匹配</h3><p>【算法思想】</p><p>1）初始空栈，顺序读入括号</p><p>2）若是右括号，则弹出栈顶元素进行匹配。成功继续，失败return false</p><p>3）若是左括号，压栈</p><p>4）全部元素遍历结束后，栈非空，序列不合法</p><p>【代码】</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;string&#125; s * @return &#123;boolean&#125; */</span><span class="token keyword">let</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> letter <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token string">"("</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">"["</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">"&#123;"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">")"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">"]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"["</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token string">"&#125;"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token operator">!</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="123-表达式求值"><a class="markdownIt-Anchor" href="#123-表达式求值"></a> 1.2.3 表达式求值</h3><ul><li><p>中缀表达式（A+B）</p><pre class="line-numbers language-none"><code class="language-none">[(A+B)*C]-[E-F]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>前缀表达式（+AB）</p><pre class="line-numbers language-none"><code class="language-none">[(A+B)*C]-[E-F]&#x3D;&#x3D;&gt; [+AB * C] - [-EF]&#x3D;&#x3D;&gt; [*+ABC] - [-EF]&#x3D;&#x3D;&gt; -*+ABC-EF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后缀表达式（AB+）</p><pre class="line-numbers language-none"><code class="language-none">[(A+B)*C]-[E-F]&#x3D;&#x3D;&gt; [AB+*C] - [EF-]&#x3D;&#x3D;&gt; [AB+C*] - [EF-]&#x3D;&#x3D;&gt; AB+C*EF--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>【算法思想（中缀转后缀）】</strong></p><p>1）数字直接加入后缀表示</p><p>2）运算符：</p><ul><li>若为&quot;(&quot;，入栈</li><li>若为&quot;)&quot;，依次把栈中的运算符加入后缀表达式，直到出现&quot;(&quot;，并从栈中删除&quot;(&quot;</li><li>若为±*/<ul><li>栈空入栈</li><li>栈顶元素为&quot;(&quot;，入栈<ul><li>高于栈顶元素优先级，入栈</li><li>否则，依次弹出栈顶运算符，直到弹出优先级比它低的运算符或者&quot;(&quot;为止</li></ul></li></ul></li><li>遍历完成，栈非空，依次弹出所有元素</li></ul><h3 id="124-递归"><a class="markdownIt-Anchor" href="#124-递归"></a> 1.2.4 递归</h3><p>若一个函数、过程或数据结构的定义中又应用了它自身，则称为递归。</p><p>递归调用过程中，系统为每一层的返回点、局部变量、传入实参等开辟了递归工作栈进行数据存储，递归次数多了，容易造成栈溢出，通常情况下，递归效率不高</p><p>【斐波那契数列】</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int Fib(int n) &#123;  if(n &#x3D;&#x3D; 0)return 0;  else if(n &#x3D;&#x3D; 1)return 1;  else return Fib(n-1) + Fib(n-2);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-队列"><a class="markdownIt-Anchor" href="#2-队列"></a> 2 队列</h1><h2 id="21-基本概念"><a class="markdownIt-Anchor" href="#21-基本概念"></a> 2.1 基本概念</h2><p>只允许在表的一段进行插入，在另一端进行删除，先进先出（FIFO）</p><table><thead><tr><th>基本操作</th><th>说明</th></tr></thead><tbody><tr><td>InitQueue(&amp;Q)</td><td>初始化队列</td></tr><tr><td>QueueEmpty(Q)</td><td>判断</td></tr><tr><td>EnQueue(&amp;Q,x)</td><td>入队</td></tr><tr><td>DeQueue(&amp;Q,&amp;x)</td><td>出队</td></tr><tr><td>GetHead(Q,&amp;x)</td><td>读队头元素，非空返回队头</td></tr><tr><td>ClearQueue(&amp;Q)</td><td>销毁队列，释放队列Q占用的内存空间</td></tr></tbody></table><h2 id="22-存储结构"><a class="markdownIt-Anchor" href="#22-存储结构"></a> 2.2 存储结构</h2><h3 id="221-顺序存储"><a class="markdownIt-Anchor" href="#221-顺序存储"></a> 2.2.1 顺序存储</h3><p>front 指向队首元素</p><p>rear指向队尾元素的下一个位置</p><p>初始时：front == rear == 0</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxSize 50typedef struct &#123;  ElemType data[MaxSize];  int front,rear;&#125;SqQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>普通队列</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;队列判空条件Q.front &#x3D;&#x3D; Q.rear;&#x2F;&#x2F;队列对长Q.rear - Q.front;&#x2F;&#x2F;队满条件Q.rear &#x3D;&#x3D; MaxSize; &#x2F;&#x2F; 存在假溢出，可以使用循环队列来解决<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>循环队列</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/栈和队列/循环队列.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 出队列，front指针移动Q.front &#x3D; (Q.front +1)%MaxSize;&#x2F;&#x2F; 进队列，rear指针移动Q.rear &#x3D; (Q.rear + 1)%MaxSize;&#x2F;&#x2F; 队列长度(Q.rear + MaxSize - Q.front)%MaxSize;&#x2F;&#x2F; 对空条件Q.front &#x3D;&#x3D; Q.rear;&#x2F;&#x2F; 判断队满条件&lt;牺牲一个存储单元&gt;Q.front &#x3D;&#x3D; (Q.rear + 1)%MaxSize;&#x2F;&#x2F; 判断队满条件&lt;使用一个变量记录队列元素的个数&gt;Q.size &#x3D;&#x3D; MaxSize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【初始化】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InitQueue(SqQueue &amp;Q) &#123;  Q.rear &#x3D; Q.front &#x3D; 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>【判断队空】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool isEmpty(SqQueue Q) &#123;  if(Q.rear &#x3D;&#x3D; Q.front) &#123;    return true;  &#125; else &#123;    return false;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【入队】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool EnQueue(SqQueue &amp;Q, ElemType x) &#123;  &#x2F;&#x2F; 如果队满  if(Q.front &#x3D;&#x3D; (Q.rear + 1)%MaxSize)return false;  Q.data[Q.rear] &#x3D; x;  Q.rear &#x3D; (Q.rear + 1)%MaxSize;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【出队】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool DeQueue(SqQueue &amp;Q,ElemType &amp;x) &#123;  if(Q.rear &#x3D;&#x3D; Q.front)return false;  x &#x3D; Q.data[Q.front];  Q.front &#x3D; (Q.front + 1)%MaxSize;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="222-链式存储"><a class="markdownIt-Anchor" href="#222-链式存储"></a> 2.2.2 链式存储</h3><p>队头指针front，指向头结点，从链头出队列</p><p>链表尾指针rear，从链尾入队</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct &#123;ElemType data;  struct LinkNode *next;&#125;LinkNode;typedef struct &#123;  LinkNode *front, *rear;&#125;LinkQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【初始化】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InitQueue(LinkQueue &amp;Q) &#123;  Q.front &#x3D; (LinkNode *)malloc(sizeof(LinkNode));  Q.rear &#x3D; Q.front;  Q.front-&gt;next &#x3D; NULL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【入队列】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void EnQueue(LinkQueue &amp;Q, ElemType x) &#123;  &#x2F;&#x2F; 创建新结点  LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));  s-&gt;data &#x3D; x;  s-&gt;next &#x3D; Null;  Q.rear-&gt;next &#x3D; s;  Q.rear &#x3D; s;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【出队列】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool DeQueue(LinkQueue &amp;Q, ElemType &amp;x) &#123;  if(Q.front &#x3D;&#x3D; Q.rear) return false;  &#x2F;&#x2F; 存储被删除的结点  LinkNode *p &#x3D; Q.front-&gt;next;  x &#x3D; p-&gt;data;  Q.front-&gt;next &#x3D; p-&gt;next;  &#x2F;&#x2F; 针对队列中只有一个结点的情况  if(Q.rear &#x3D;&#x3D; p) Q.rear &#x3D; Q.front;  free(p);  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【判空】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool isEmpty(LinkQueue Q) &#123;  if(Q.front &#x3D;&#x3D; Q.rear)&#123;    return true;  &#125; else &#123;    return false;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="223-队列的应用"><a class="markdownIt-Anchor" href="#223-队列的应用"></a> 2.2.3 队列的应用</h3><ul><li><p>层次遍历</p></li><li><p>计算机系统</p></li></ul><h3 id="224-双端队列"><a class="markdownIt-Anchor" href="#224-双端队列"></a> 2.2.4 双端队列</h3><p>两端都可以进行入队和出队</p><ul><li>输出受限的双端队列</li><li>输入受限的双端队列</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/栈和队列/受限的双端队列.png"><h1 id="3-数组"><a class="markdownIt-Anchor" href="#3-数组"></a> 3 数组</h1><h2 id="31-数组的定义"><a class="markdownIt-Anchor" href="#31-数组的定义"></a> 3.1 数组的定义</h2><p><span style="color:blue;font-Size: 18px;"><strong>数组</strong></span>是由n（n&gt;=1）个相同类型的数据元素构成的有限序列，每个数据元素称为一个数组元素，每个元素受n个线性关系的约束，每个元素在n个线性关系中的序号称为下标（索引），并称该数组为n为数组。</p><p><mark><strong>数组是一种逻辑结构，是线性表的推广</strong></mark></p><h2 id="32-矩阵的压缩存储"><a class="markdownIt-Anchor" href="#32-矩阵的压缩存储"></a> 3.2 矩阵的压缩存储</h2><p>压缩存储：多个值相同的元素只分配一个存储空间，对零元素不分配存储空间</p><p>特殊矩阵：指具有许多相同元素或者零元素，并且呈现一定分布规律的矩阵。比如对称矩阵、反对称矩阵、单位阵</p><p>特殊矩阵的压缩存储：找出特殊矩阵中值相同的矩阵元素的分布规律，把呈现规律性分布、值相同的多个矩阵元素压缩存储到一个存储空间上。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-线性表的定义和基本操作"><a class="markdownIt-Anchor" href="#1-线性表的定义和基本操作"></a> 1 线性表的定义和基本操作</h1><h2 id="11-定义及特点"><a class="markdownIt-Anchor" href="#11-定义及特点"></a> 1.1 定义及特点</h2><p>【定义】</p><p>线性表是具有相同类型的n（n&gt;=0）个元素的有限序列（<mark>长度有限</mark>），其中n为表长，当n=0时，为空表。</p><p>若L命名为线性表，一般表示为：L = (a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,…,a<sub>i+1</sub>,a<sub>i+2</sub>,…a<sub>n</sub>)</p><p>【逻辑结构】</p><img data-src='http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/线性表-逻辑结构.png'><p>【特点】</p><ul><li>元素个数<span style="color:red"><u>有限</u></span></li><li>元素具有逻辑上的顺序性，序列中各个元素排序有<span style="color:red"><u>先后次序</u></span></li><li>表中元素都是<span style="color:red"><u>数据元素</u></span>，每个元素都是单个元素</li><li>表中元素的<span style="color:red"><u>数据类型相同</u></span></li><li>表中元素<span style="color:red"><u>具有抽象性</u></span>，讨论元素之间一对一的逻辑关系时，而不考虑元素究竟表示内容</li><li>线性表是<span style="color:red"><strong><u>逻辑结构</u></strong></span>，表示元素之间一对一相邻的关系</li></ul><h2 id="12-线性表九种基本操作"><a class="markdownIt-Anchor" href="#12-线性表九种基本操作"></a> 1.2 线性表九种基本操作</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>InitList(&amp;L)</td><td>初始化表。构造空的线性表</td></tr><tr><td>DestroyList(&amp;L)</td><td>销毁。销毁线性表，释放线性表L所占的内存空间</td></tr><tr><td>LocateElem(L,e)</td><td>按值查找。在表中L查找具有给定关键字值的元素</td></tr><tr><td>GetElem(L,i)</td><td>按位查找。获取表L中第i个位置的元素值</td></tr><tr><td>ListInsert(&amp;L,i,e)</td><td>插入。在L的第i个位置插入元素e(前插)</td></tr><tr><td>ListDelete(&amp;L,i,&amp;e)</td><td>删除。删除L中第i个位置的元素，并用e返回删除元素的值</td></tr><tr><td>PrintList(L)</td><td>输出。按前后顺序输出线性表L的所有元素值</td></tr><tr><td>Empty(L)</td><td>判空。空返回True</td></tr><tr><td>Length(L)</td><td>表长。即元素的个数。</td></tr></tbody></table><h1 id="2-线性表的顺序表示"><a class="markdownIt-Anchor" href="#2-线性表的顺序表示"></a> 2 线性表的顺序表示</h1><h2 id="21-顺序表的定义"><a class="markdownIt-Anchor" href="#21-顺序表的定义"></a> 2.1 顺序表的定义</h2><p>线性表的顺序存储又称<span style="color:#1f6bd5"><strong><u>顺序表</u></strong></span></p><p>一组地址连续存放的存储单元依次存放线性表元素，从而使得逻辑上相邻的两个元素，在物理位置上也相邻。</p><p>顺序表往往用数组来实现。</p><p>【数组与顺序表区别】</p><ol><li>顺序表下标从1开始，数组从0开始</li><li>顺序表容量可扩充，数组不能</li><li>顺序表是一维的，数组可以是多维的</li></ol><p>【顺序表程序语言描述—C语言】</p><ul><li>数组静态分配</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数组动态分配</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  ElemType <span class="token operator">*</span>data<span class="token punctuation">;</span>  <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">L<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>Elemtype<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token operator">*</span>InitSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="22-顺序表的基本操作"><a class="markdownIt-Anchor" href="#22-顺序表的基本操作"></a> 2.2 顺序表的基本操作</h2><p>【插入操作】</p><p>将插入位置后面的元素向后挪动。</p><ul><li>MaxSize是数组最大容量</li><li>Length是顺序表的长度，在这里的作用和ArrayList中的size是一样 ，表示当前数组元素的个数，并非数组的长度。</li><li>这里的插入是向顺序表插入，顺序表下标从1开始，因为是用数组实现该顺序表（下标从0开始），所以在插入时，需要减1。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListInsert(SqList &amp;L, int pos, ElemType e) &#123;  if(pos &lt; 1 || pos &gt; L.length + 1) return false;  if(L.length &gt;&#x3D; MaxSize) return false;  for(int j &#x3D; L.length; j &gt;&#x3D; pos; j--) &#123;    L.data[j] &#x3D; L.data[j-1];  &#125;  L.data[pos - 1] &#x3D; e;  L.length++;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>最好时间复杂度</th><th>平均时间复杂度</th><th>最坏时间复杂度</th></tr></thead><tbody><tr><td>O(1)</td><td>O(n)</td><td>o(n)</td></tr></tbody></table><p>【删除操作】</p><p>将被删除位置的后面元素向前移动，进行覆盖</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListDelete(SqList &amp;L, int pos, ElemType &amp;e) &#123;  &#x2F;&#x2F; 判断合法性  if(pos &lt; 1 || pos &gt; L.length)return false;  &#x2F;&#x2F; 保存被删除的元素  e &#x3D; L.data[pos - 1];  for(int i &#x3D; pos; i &lt; L.length; i++) &#123;    L.data[i - 1] &#x3D; L.data[i];  &#125;  L.length--;  return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>最好时间复杂度</th><th>平均时间复杂度</th><th>最坏时间复杂度</th></tr></thead><tbody><tr><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><p>【按值查找】</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int LocateElem(SqList L, ElemType e) &#123;  for(int i &#x3D; 0; i &lt; L.length; i++) &#123;    if(L.data[i] &#x3D;&#x3D; e)return i + 1;  &#125;  return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>最好时间复杂度</th><th>平均时间复杂度</th><th>最坏时间复杂度</th></tr></thead><tbody><tr><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h1 id="3-线性表的链式表示"><a class="markdownIt-Anchor" href="#3-线性表的链式表示"></a> 3 线性表的链式表示</h1><h2 id="31-单链表定义"><a class="markdownIt-Anchor" href="#31-单链表定义"></a> 3.1 单链表定义</h2><p>线性表的链式存储称为<span style="color:#1f6bd5"><strong><u>单链表</u></strong></span>，通过指针来实现线性的逻辑关系</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LNode&#123;  ElemType data;  struct LNode *next;&#125;LNode, *LinkList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>【头结点的优点】</p><ul><li>链表的第一个位置和其他位置的操作统一</li><li>空表和非空表操作统一</li></ul><h2 id="32-单链表的基本操作"><a class="markdownIt-Anchor" href="#32-单链表的基本操作"></a> 3.2 单链表的基本操作</h2><p><strong>【头插法建立单链表】</strong></p><pre class="line-numbers language-none"><code class="language-none">s-&gt;next &#x3D; L-&gt;next;L-&gt;next &#x3D; s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList List_HeadInsert(LinkList &amp;L) &#123;  LNode *s; int x;  L &#x3D; (LinkList)malloc(sizeof(LNode));  L-&gt;next &#x3D; NULL;  scanf(&quot;%d&quot;,&amp;x);  while(x !&#x3D; 9999) &#123;    s &#x3D; (LNode*)malloc(sizeof(LNode));    s-&gt;data &#x3D; x;    s-&gt;next &#x3D; L-&gt;next;    L-&gt;next &#x3D; s;    scanf(&quot;%d&quot;,&amp;x);  &#125;  return L;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【尾插法建立单链表】</strong></p><p>要有一个尾指针r</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList List_TailInsert(LinkList &amp;L) &#123;  int x;  L &#x3D; (LinkList)malloc(sizeof(LNode));  LNode *s, *r &#x3D; L;  scanf(&quot;%d&quot;,&amp;x);  while(x !&#x3D; 9999) &#123;    s &#x3D; (LNode*)malloc(sizeof(LNode));    s-&gt;data &#x3D; x;    r-&gt;next &#x3D; s;    r &#x3D; s;    scanf(&quot;%d&quot;,&amp;x);  &#125;  r-&gt;next &#x3D; NULL;  return L;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【按序号查找&amp;&amp;按值查找】</strong></p><p>都需要遍历单链表，但是按序号查找需要用到一个变量来记录当前结点的序号</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 按序号查找LNode *GetElem(LinkList L, int i) &#123;  &#x2F;&#x2F; 记录序号的变量  int count &#x3D; 1;  &#x2F;&#x2F; p当前指向第一个结点  LNode *p &#x3D; L-&gt;next;  if(i &#x3D;&#x3D; 0)return L;  if(i &lt; 1)return NULL;  while(p&amp;&amp;count&lt;i) &#123;    count++;    p &#x3D; p-&gt;next;  &#125;  return p;&#125;&#x2F;&#x2F; 按值查找LNode *LocateElem(LinkList L, ElemType e) &#123;  LNode *p &#x3D; L-&gt;next;  while(p!&#x3D;NULL&amp;&amp;p-&gt;data!&#x3D;e) &#123;    p&#x3D;p-&gt;next;  &#125;  return p;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【插入结点】</strong></p><p>插入有前插法（在插入位置的前面插入，需要获取插入位置的前一个结点地址）和后插法（在插入位置的后面插入，需要获取插入位置的地址）之分。</p><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/头插法和后插法.png"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 前插法pre &#x3D; GetElem(L,i-1);&#x2F;&#x2F; 获取插入位置的结点的前一个s-&gt;next &#x3D; pre-&gt;next;&#x2F;&#x2F; s是要插入结点的指针pre-&gt;next &#x3D; s;&#x2F;&#x2F; 后插法p &#x3D; GetElem(L,i);s-&gt;next &#x3D; p-&gt;next;p-&gt;next &#x3D; s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>后插法可以转换为前插法</mark></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 1. 先后插法p &#x3D; GetElem(L,i);s-&gt;next &#x3D; p-&gt;next;p-&gt;next &#x3D; s;&#x2F;&#x2F; 临时变量存储要插入的结点数据ElemType temp &#x3D; s-&gt;data;&#x2F;&#x2F; 2. 交换数据s-&gt;data &#x3D; p-&gt;data;p-&gt;data &#x3D; temp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【删除结点】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pre &#x3D; GetElem(L, i-1);&#x2F;&#x2F; 获取要删除位置的结点的前一个q &#x3D; pre-&gt;next;pre-&gt;next &#x3D; pre-&gt;next-&gt;next;free(q);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【求表长】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int count &#x3D; 0;p &#x3D; head;while(p-&gt;next !&#x3D; NULL) &#123;  count++;  p &#x3D; p-&gt;next;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【判空】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">head-&gt;next &#x3D;&#x3D; NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="33-几种常用的链表"><a class="markdownIt-Anchor" href="#33-几种常用的链表"></a> 3.3 几种常用的链表</h2><h3 id="331-双向链表"><a class="markdownIt-Anchor" href="#331-双向链表"></a> 3.3.1 双向链表</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/双向链表.png"><p><strong>【插入】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">s-&gt;next &#x3D; p-&gt;next;p-&gt;next-&gt;prior &#x3D; s;s-&gt;prior &#x3D; p;p-&gt;next &#x3D; s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【删除】</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 存储被删除的结点（已知被删除结点的前驱结点地址）LNode *temp &#x3D; p-&gt;next;p-&gt;next-&gt;next-&gt;prior &#x3D; p;p-&gt;next &#x3D; p-&gt;next-&gt;next;free(temp);&#x2F;&#x2F; 存储被删除的结点（已知被删除结点地址）LNode *temp &#x3D; p;p-&gt;prior-&gt;next &#x3D; p-&gt;next;p-&gt;next-&gt;prior &#x3D; p-&gt;prior;free(temp);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="332-循环链表"><a class="markdownIt-Anchor" href="#332-循环链表"></a> 3.3.2 循环链表</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/循环单链表.png"><img data-src="http://resource.silverbeats.cn/static/images/算法/数据结构/线性表/循环双向链表.png"><h3 id="33-静态链表"><a class="markdownIt-Anchor" href="#33-静态链表"></a> 3.3. 静态链表</h3><p>用数组实现链式存储</p><h1 id="4-顺序表与链表对比"><a class="markdownIt-Anchor" href="#4-顺序表与链表对比"></a> 4 顺序表与链表对比</h1><table><thead><tr><th>区别</th><th>顺序表</th><th>单链表</th></tr></thead><tbody><tr><td>存取方式</td><td>顺序存取和随机存取</td><td>顺序存取</td></tr><tr><td>逻辑结构和物理结构</td><td>逻辑相邻物理上也相邻，通过相邻表示逻辑关系</td><td>逻辑连续，物理上不一定连续，通过指针表示逻辑关系</td></tr><tr><td>插入操作</td><td>挪动元素O(n)</td><td>修改指针O(n)，已知插入位置O(1)</td></tr><tr><td>删除操作</td><td>挪动元素O(n)</td><td>修改指针O(n)，已知删除位置O(1)</td></tr><tr><td>查找操作</td><td>按值O(n)和按下标O(1)</td><td>按值、按下标都是O(n)</td></tr><tr><td>内存空间</td><td>静态分配，容量定死，太大太小都不好<br>动态分配，扩充需要移动大量元素，效率低下</td><td>按需分配，但指针的存储需要额外的空间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课外书</title>
      <link href="%E8%AF%BE%E5%A4%96%E4%B9%A6/"/>
      <url>%E8%AF%BE%E5%A4%96%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-语言相关"><a class="markdownIt-Anchor" href="#1-语言相关"></a> 1 语言相关</h1><h2 id="11-java"><a class="markdownIt-Anchor" href="#11-java"></a> 1.1 Java</h2><ul><li><a href="https://pan.baidu.com/s/1wt3zH-_r770xySpbBGb-Jw">3y教你学java</a>（提取码：vzs2）</li><li><a href="https://pan.baidu.com/s/1uwhkr1eddD-xdUhwP4vSbQ">Effective Java 原书第三版</a>（提取码：4f4l ）</li><li></li></ul><h2 id="12-javascript"><a class="markdownIt-Anchor" href="#12-javascript"></a> 1.2 JavaScript</h2><ul><li><a href="https://pan.baidu.com/s/1YWxoT-n0PopRPUslmSfrxQ">阮一峰 ES6</a> （提取码：kgp9 ）</li><li><a href="https://pan.baidu.com/s/16GyNcqoPxWYHuQvBrFztVQ">Javascript高级程序设计</a>（提取码：ic9o）</li><li><a href="https://pan.baidu.com/s/1cOUWovvcq7EbI3cEts0LkA">JavaScript设计模式—张容铭</a>（提取码：i41t）</li><li>[<a href="https://pan.baidu.com/s/1A2Ww88GSVswgzWD3tAMmPA">JavaScript设计模式—Ross Harmes</a>（提取码：23uw）</li><li><a href="https://pan.baidu.com/s/1d_Z5Euyhqey8XCZIopFi9Q">编写可维护的JavaScript</a>（提取码：asjn）</li><li><a href=""></a></li></ul><h1 id="2-web"><a class="markdownIt-Anchor" href="#2-web"></a> 2 Web</h1><ul><li><a href="https://pan.baidu.com/s/1rARXGS-sJspYDj5XOv55rA">图解HTTP</a>（提取码：vybw）</li><li><a href=""></a></li><li><a href=""></a></li></ul><h1 id="3-版本控制"><a class="markdownIt-Anchor" href="#3-版本控制"></a> 3 版本控制</h1><ul><li><a href="https://pan.baidu.com/s/1n02pT3qMVI3eI0C_Ty7riA">GitHub入门与实践 </a>（提取码：yxcl）</li></ul><h1 id="4-服务器"><a class="markdownIt-Anchor" href="#4-服务器"></a> 4 服务器</h1><ul><li><a href="http://tengine.taobao.org/book/index.html">Nginx开发从入门到精通</a> (淘宝团队出品)</li><li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/">Nginx教程从入门到精通</a>(PDF版本，运维生存时间出品)</li></ul><h1 id="5-设计模式"><a class="markdownIt-Anchor" href="#5-设计模式"></a> 5 设计模式</h1><ul><li><a href="https://pan.baidu.com/s/16zKfTP3FZRL1wXxco3vkZA">设计模式_可复用面向对象软件的基础 C/C++</a>（提取码：6l3a）</li></ul><h1 id="6-分布式系统"><a class="markdownIt-Anchor" href="#6-分布式系统"></a> 6 分布式系统</h1><ul><li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf">走向分布式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>推荐文章：</p><ul><li><a href="https://blog.csdn.net/weixin_36586120/article/details/105522491">你知道吗？枚举单例模式是世界上最好的单例模式！！！</a></li><li><a href="https://blog.csdn.net/fvdfsdafdsafs/article/details/88541909">https://blog.csdn.net/fvdfsdafdsafs/article/details/88541909</a></li></ul><h1 id="1-饿汉式单例"><a class="markdownIt-Anchor" href="#1-饿汉式单例"></a> 1 饿汉式单例</h1><ul><li><p>构造器私有化</p></li><li><p>JVM保证线程安全</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>不管是否使用，一上来就会加载对象，会浪费空间</p></li><li><p>反射可破坏单例</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon01</span> <span class="token punctuation">&#123;</span><span class="token comment">// 构造器私有</span><span class="token keyword">private</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 类加载到内存后,就实例化一个单例,JVM保证线程安全</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingleTon01</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon01</span> <span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-反射破坏单例"><a class="markdownIt-Anchor" href="#11-反射破坏单例"></a> 1.1 反射破坏单例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testsingle01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 获取SingleTon01的Class属性</span>  <span class="token class-name">Class</span> singleTon01Class <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.silverbeats.singleton.SingleTon01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过正常方式获取instance1,instance2</span>  <span class="token class-name">SingleTon01</span> instance1 <span class="token operator">=</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">.</span><span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SingleTon01</span> instance2 <span class="token operator">=</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">.</span><span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取该Class的无参构造器</span>  <span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">=</span> singleTon01Class<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 破坏构造器私有</span>  declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过反射创建instance3和instance4</span>  <span class="token class-name">SingleTon01</span> instance3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon01</span><span class="token punctuation">)</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SingleTon01</span> instance4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon01</span><span class="token punctuation">)</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出instance1、instance2、instance3、instance4的地址</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果：</p><pre class="line-numbers language-none"><code class="language-none">com.silverbeats.singleton.SingleTon01@504bae78com.silverbeats.singleton.SingleTon01@504bae78com.silverbeats.singleton.SingleTon01@3b764bcecom.silverbeats.singleton.SingleTon01@759ebb3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可知，通过非反射的方式获取的instance1和instance2是同一个对象，符合单例。但是通过==<strong>反射</strong>==可以创建多个对象，破坏单例的效果，如instance3和instance4，都是不同于instance1的对象实例。</p><h2 id="12-序列化破坏单例"><a class="markdownIt-Anchor" href="#12-序列化破坏单例"></a> 1.2 序列化破坏单例</h2><p>倘若该单例实现了序列化接口<code>java.io.Serializable</code>，会被序列化反序列化破坏单例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serializeSingle01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SingleTon01</span> instance <span class="token operator">=</span> <span class="token class-name">SingleTon01</span><span class="token punctuation">.</span><span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// instance序列化输出流</span>  <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/singleton01.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 序列化</span>  objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭输出流</span>  fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个对象用来接收反序列化的结果</span>  <span class="token class-name">SingleTon01</span> instance2<span class="token punctuation">;</span>  <span class="token comment">// instance反序列化,输入流</span>  <span class="token class-name">FileInputStream</span> fileIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/singleton01.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反序列化</span>  instance2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon01</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭输入流</span>  in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fileIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否是同一个对象</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-懒汉式写法一"><a class="markdownIt-Anchor" href="#2-懒汉式写法一"></a> 2 懒汉式：写法一</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon02</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon02</span> INSTANCE<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon02</span> <span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 倘若没有创建,则创建对象</span><span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* 这里可以加线程睡眠,模拟效果 */</span>INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-懒汉式写法二"><a class="markdownIt-Anchor" href="#3-懒汉式写法二"></a> 3 懒汉式：写法二</h1><p>加锁，方法锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingleTon02</span> <span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 这里可以加线程睡眠,模拟效果 */</span>    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-懒汉式写法三"><a class="markdownIt-Anchor" href="#3-懒汉式写法三"></a> 3 懒汉式：写法三</h1><p>==<strong>双重检查</strong>==单例。添加volatile保证创建对象是原子性，防止指令重排</p><blockquote><p>创建对象的过程：</p><ul><li>分配内存空间</li><li>执行构造方法，初始化对象</li><li>把对象指向这个空间</li></ul><p>上面三个步骤，可能会出现指令重排现象,导致线程不安全</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon02</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// volatile保证创建对象是原子性</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">SingleTon02</span> INSTANCE<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon02</span> <span class="token function">getINSTANCE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon02</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 这里可以加线程睡眠,模拟效果 */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-懒汉式写法四"><a class="markdownIt-Anchor" href="#4-懒汉式写法四"></a> 4 懒汉式：写法四</h1><p><mark><strong>枚举类</strong></mark></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EnumClass</span> <span class="token punctuation">&#123;</span>INSTANCE<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EnumClass</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**多线程测试：**通过,打印的都是同一个hashCode</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SingleTon03</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**反射测试：**结果报错，无法创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> singleTon01Class <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.silverbeats.singleton.SingleTon03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取无参构造器</span><span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">=</span> singleTon01Class<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 破坏私有</span>declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建对象</span><span class="token class-name">SingleTon01</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleTon01</span><span class="token punctuation">)</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>序列化测试：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serializeEnumClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">EnumClass</span> instance <span class="token operator">=</span> <span class="token class-name">EnumClass</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>  <span class="token comment">// instance序列化输出流</span>  <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/enumInstance.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 序列化</span>  objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭输出流</span>  fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个对象用来接收反序列化的结果</span>  <span class="token class-name">EnumClass</span> instance2<span class="token punctuation">;</span>  <span class="token comment">// instance反序列化,输入流</span>  <span class="token class-name">FileInputStream</span> fileIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/enumInstance.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反序列化</span>  instance2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EnumClass</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭输入流</span>  in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fileIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否是同一个对象</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="41-防止反射的原因"><a class="markdownIt-Anchor" href="#41-防止反射的原因"></a> 4.1 防止反射的原因</h2><p>反射newInstance方法中有这样一段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span>ENUM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot reflectively create enum objects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可知，枚举类型不可被创建，故可以防反射破坏枚举单例。枚举类型最终反编译源码中没有无参构造器，有一个接受string和int两个参数的有参构造器</p><h2 id="42-防序列化的原因"><a class="markdownIt-Anchor" href="#42-防序列化的原因"></a> 4.2 防序列化的原因</h2><p>Java的序列化专门对枚举的序列化做了规定，在序列化时，只是将枚举对象的name属性输出到结果中，在反序列化时通过<code>java.lang.Enum</code>的<code>valueOf</code>方法根据名字查找对象，而不是新建一个新的对象，所以防止了反序列化对单例的破坏。</p><p>可以查看<code>java.io.ObjectInputStream#readObject</code>验证。<code>readObject</code>判断到枚举类时，调用的了这个方法<code>java.io.ObjectInputStream#readEnum</code></p><p>jdk文档：</p><blockquote><p>枚举常数的反序列化与普通可序列化或外部化对象不同。 枚举常数的序列化形式仅由其名称组成;  不传输常数的字段值。 要反序列化枚举常量，ObjectInputStream从流中读取常量名称;  然后通过使用枚举常量的基本类型和接收的常量名称作为参数调用静态方法<code>Enum.valueOf(Class, String)</code>获得反序列化常数。  像其他可序列化或可外部化的对象一样，枚举常量可以作为随后在序列化流中出现的反向引用的目标。  枚举常量被反序列化的过程无法自定义：在反序列化期间将忽略由枚举类型定义的任何特定于类的readObject，readObjectNoData和readResolve方法。  类似地，任何serialPersistentFields或serialVersionUID字段声明也被忽略 -  所有枚举类型都有一个固定的serialVersionUID为0L。</p></blockquote><h1 id="5-单例模式总结"><a class="markdownIt-Anchor" href="#5-单例模式总结"></a> 5 单例模式总结</h1><table><thead><tr><th>单例写法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>饿汉式</td><td>JVM保证线程安全</td><td>①浪费空间；<br/>②反射可以破坏单例<br/>③序列化可以破坏单例</td></tr><tr><td>懒汉式：写法一</td><td>需要的时候创建，避免空间的浪费</td><td>①线程不安全；<br/>②反射可破坏单例<br/>③序列化可以破坏单例</td></tr><tr><td>懒汉式：写法二</td><td>①需要的时候创建，避免空间的浪费<br/>②线程安全</td><td>①因为加锁，影响效率；<br/>②反射可破坏单例<br/>③序列化可以破坏单例</td></tr><tr><td>懒汉式：写法三</td><td>①需要的时候创建，避免空间的浪费<br/>②线程安全</td><td>①比上面的写法效率会高一些；<br>②反射破坏单例<br/>③序列化可以破坏单例</td></tr><tr><td>懒汉式：写法四</td><td>①需要的时候创建，避免空间的浪费<br/>②线程安全<br/>③没有锁，效率高<br/>④防反射、防序列化</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GOF23种设计模式概述</title>
      <link href="GOF23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
      <url>GOF23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解</p><h1 id="1-优点"><a class="markdownIt-Anchor" href="#1-优点"></a> 1 优点</h1><ul><li>可以提高思维能力、编程能力和设计能力</li><li>程序设计更加标准化、编码编制更加工程化，使软件开发效率提高，缩短开发周期</li><li>使代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强</li></ul><h1 id="2-基本要素"><a class="markdownIt-Anchor" href="#2-基本要素"></a> 2 基本要素</h1><ul><li>模式名称</li><li>问题</li><li>解决方案</li><li>效果</li></ul><h1 id="3-分类"><a class="markdownIt-Anchor" href="#3-分类"></a> 3 分类</h1><h2 id="31-创建型模式"><a class="markdownIt-Anchor" href="#31-创建型模式"></a> 3.1 创建型模式</h2><p>单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</p><h2 id="32-构建型模式"><a class="markdownIt-Anchor" href="#32-构建型模式"></a> 3.2 构建型模式</h2><p>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</p><h2 id="33-行为模式"><a class="markdownIt-Anchor" href="#33-行为模式"></a> 3.3 行为模式</h2><p>模板方法模式，命令模式，迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</p><h1 id="4-面向对象oop七大原则"><a class="markdownIt-Anchor" href="#4-面向对象oop七大原则"></a> 4 面向对象OOP七大原则</h1><ol><li>开闭原则：对扩展开放，对修改关闭</li><li>里氏替换原则：继承必须确保超类所拥有的性质在之类中仍然成立。不要破坏继承关系。</li><li>依赖倒置原则：<mark>要面向接口编程</mark>，不要面向实现编程</li><li>单一职责原则：控制类的粒度大小、将对象解耦、提高其内聚性。<mark>要求每个类的职责单一。</mark></li><li>接口隔离原则：要为各类建立它们需要的专用接口。<mark>保证接口的精简和单一。</mark></li><li>迪米特法则：只与你的直接朋友交谈，不跟陌生人说话。<mark>降低程序之间的耦合度</mark></li><li>合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系实现</li></ol><h1 id="5-创建型模式"><a class="markdownIt-Anchor" href="#5-创建型模式"></a> 5 创建型模式</h1><ul><li><a href="/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" title="单例模式">单例模式</a></li><li><a href="#">Post not found: 工厂模式 工厂模式</a></li><li><a href="#">Post not found: 抽象工厂模式 抽象工厂模式</a></li><li><a href="#">Post not found: 建造者模式 建造者模式</a></li><li><a href="#">Post not found: 原型模式 原型模式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构题目</title>
      <link href="%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E7%9B%AE/"/>
      <url>%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-线性表"><a class="markdownIt-Anchor" href="#1-线性表"></a> 1 线性表</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLinearNode</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> elemData<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">SingleLinearNode</span> next<span class="token punctuation">;</span>  <span class="token comment">// 以及get、set方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-单链表原地逆置"><a class="markdownIt-Anchor" href="#11-单链表原地逆置"></a> 1.1 单链表原地逆置</h2><blockquote><p>单链表原地逆置（假定需要逆置的单链表不含头结点）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">reverseLinear</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SingleLinearNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinearNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> lp<span class="token punctuation">;</span>  lp <span class="token operator">=</span> linear<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    temp <span class="token operator">=</span> lp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">;</span>    lp <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-将两个有序的单链表合并合并后结果仍然有序"><a class="markdownIt-Anchor" href="#12-将两个有序的单链表合并合并后结果仍然有序"></a> 1.2 将两个有序的单链表合并，合并后结果仍然有序</h2><blockquote><p>将两个有序的单链表合并，合并后结果仍然有序（假定两个链表不含头结点并非减）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">combineTwoLinear</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear1<span class="token punctuation">,</span> <span class="token class-name">SingleLinearNode</span> linear2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SingleLinearNode</span> p1 <span class="token operator">=</span> linear1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> linear2<span class="token punctuation">;</span>  <span class="token class-name">SingleLinearNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinearNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hp <span class="token operator">=</span> head<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getElemData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span><span class="token function">getElemData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>      hp <span class="token operator">=</span> p1<span class="token punctuation">;</span>      p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>      hp <span class="token operator">=</span> p2<span class="token punctuation">;</span>      p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果某个链表还有节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-现有两个递增单链表要求合并后递减"><a class="markdownIt-Anchor" href="#13-现有两个递增单链表要求合并后递减"></a> 1.3 现有两个递增单链表，要求合并后递减</h2><blockquote><p>现有两个递增单链表，要求合并后递减，含关键字的节点需要利用原有的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token class-name">MergeDiminishing</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear1<span class="token punctuation">,</span> <span class="token class-name">SingleLinearNode</span> linear2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">reverseLinear</span><span class="token punctuation">(</span><span class="token function">combineTwoLinear</span><span class="token punctuation">(</span>linear1<span class="token punctuation">,</span> linear2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="14-一个数组正数负数混合以最快的速度将所有的负数挪到整个数组的最前面"><a class="markdownIt-Anchor" href="#14-一个数组正数负数混合以最快的速度将所有的负数挪到整个数组的最前面"></a> 1.4 一个数组正数负数混合，以最快的速度将所有的负数挪到整个数组的最前面</h2><blockquote><p>一个数组，其中有正数和负数，以最快的速度将所有的负数挪到整个数组的最前面</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">negativeFrontPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// left表示负数存储的下标,right表示正数的位置</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>left<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span>right<span class="token punctuation">;</span>    <span class="token comment">// 经过两个while,left的位置是正数,right的位置是负数,进行交换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>left<span class="token punctuation">;</span>    <span class="token operator">--</span>right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-一个递增有序数组以最快的方式找到某个值找到则将该值与后继进行交换找不到则插入"><a class="markdownIt-Anchor" href="#15-一个递增有序数组以最快的方式找到某个值找到则将该值与后继进行交换找不到则插入"></a> 1.5 一个递增有序数组，以最快的方式找到某个值，找到则将该值与后继进行交换，找不到则插入</h2><blockquote><p>一个递增有序数组，以最快的方式找到某个值，找到则将该值与后继进行交换，找不到则插入</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findSwapOrInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>target<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 二分查找</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果找到了</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果没找到</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 此时i就是插入位置</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> newArr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-判断某单链表前n个字符是否是中心对称"><a class="markdownIt-Anchor" href="#16-判断某单链表前n个字符是否是中心对称"></a> 1.6 判断某单链表前n个字符是否是中心对称</h2><blockquote><p>判断某单链表前n个字符是否是中心对称</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCenterSymmetry</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 先统计linear有多少个节点</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token class-name">SingleLinearNode</span> lp <span class="token operator">=</span> linear<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">++</span>count<span class="token punctuation">;</span>    lp <span class="token operator">=</span> lp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 可能会出现链表4个节点,让判断前5个乃至更多是否中心对称</span>  <span class="token keyword">int</span> realN <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个数组用来存储linear前realN个关键字</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>realN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> realN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> linear<span class="token punctuation">.</span><span class="token function">getElemData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    linear <span class="token operator">=</span> linear<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 定义左右指针</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> realN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否中心对称</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!=</span> arr<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-删除不带头结点的单链表begin位置后的len个节点"><a class="markdownIt-Anchor" href="#17-删除不带头结点的单链表begin位置后的len个节点"></a> 1.7 删除不带头结点的单链表，begin位置后的len个节点</h2><blockquote><p>删除不带头结点的单链表，begin位置后的len个节点</p></blockquote><ul><li>begin = 0：从单链表第一个节点开始删</li><li>begin = 1：从单链表第二个位置开始删除，第一个节点保留</li><li>……</li><li>起始位置超出链表长度：报错</li><li>能删除的节点数量不足len个：有多少删多少</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">deleteNodeFrom</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"deleteNodeFrom参数错误,begin需要≥0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"deleteNodeFrom参数错误,len需要≥0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>linear <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 令传递过来的单链表配上一个头结点</span>  <span class="token class-name">SingleLinearNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinearNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hp <span class="token operator">=</span> head<span class="token punctuation">;</span>  head<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>linear<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> begin <span class="token operator">&amp;&amp;</span> hp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> hp <span class="token operator">=</span> hp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>hp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"起始位置超出链表长度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此时,从hp后面的节点开始计数len个要删除</span>  <span class="token class-name">SingleLinearNode</span> temp <span class="token operator">=</span> hp<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此时temp指向被删除的最后一个节点</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 说明能删的不够len个</span>  <span class="token keyword">else</span> hp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-定位到单链表中某个位置"><a class="markdownIt-Anchor" href="#18-定位到单链表中某个位置"></a> 1.8 定位到单链表中某个位置</h2><ul><li>如果需要定位的位置超过链表长度：返回null</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">getPos</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"getPos参数错误,position需要≥1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>linear <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token class-name">SingleLinearNode</span> lp <span class="token operator">=</span> linear<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pos <span class="token operator">&amp;&amp;</span> lp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    lp <span class="token operator">=</span> lp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> lp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-删除linear1自begin后面的len个节点并将linear1剩余的节点插入到linear2第insertpos位置之前"><a class="markdownIt-Anchor" href="#19-删除linear1自begin后面的len个节点并将linear1剩余的节点插入到linear2第insertpos位置之前"></a> 1.9 删除linear1自begin后面的len个节点,并将linear1剩余的节点插入到linear2第insertPos位置之前</h2><blockquote><p>删除linear1自begin后面的len个节点,并将linear1剩余的节点插入到linear2第insertPos位置之前</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SingleLinearNode</span> <span class="token function">q7</span><span class="token punctuation">(</span><span class="token class-name">SingleLinearNode</span> linear1<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token class-name">SingleLinearNode</span> linear2<span class="token punctuation">,</span> <span class="token keyword">int</span> insertPos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>insertPos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"linear2插入位置需要≥0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先对linear1进行处理,进行删除</span>  linear1 <span class="token operator">=</span> <span class="token function">deleteNodeFrom</span><span class="token punctuation">(</span>linear1<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断经过删除后,linear1还有没有可以插入的节点</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>linear1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// p定位到linear1的最后一个节点</span>    <span class="token class-name">SingleLinearNode</span> p <span class="token operator">=</span> linear1<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>insertPos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 找到linear的第j个位置的前一个位置</span>      <span class="token class-name">SingleLinearNode</span> prePos <span class="token operator">=</span> <span class="token function">getPos</span><span class="token punctuation">(</span>linear2<span class="token punctuation">,</span> insertPos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>prePos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>prePos<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prePos<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>linear1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果定位失败,则将linear1剩下的节点插入到linear2的最后</span>        <span class="token comment">// 此时p指向linear2的最后一个节点</span>        p <span class="token operator">=</span> linear2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// linear1剩余节点插入linear2最后</span>        p<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>linear1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若j=0</span>      p<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>linear2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> linear1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> linear2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-栈和队列"><a class="markdownIt-Anchor" href="#2-栈和队列"></a> 2 栈和队列</h1><h2 id="21-给定入栈序列和某个出栈序列判断该出栈序列是否合法"><a class="markdownIt-Anchor" href="#21-给定入栈序列和某个出栈序列判断该出栈序列是否合法"></a> 2.1 给定入栈序列和某个出栈序列，判断该出栈序列是否合法</h2><blockquote><p>给定入栈序列和某个出栈序列，判断该出栈序列是否合法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param inStackSeq: 入栈顺序* @param outStackSeq: 出栈顺序* @return: boolean*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isRightOutStackSeq</span><span class="token punctuation">(</span><span class="token class-name">String</span> inStackSeq<span class="token punctuation">,</span> <span class="token class-name">String</span> outStackSeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>inStackSeq<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> outStackSeq<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 入栈序列和出栈序列转为数组,方便处理</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inStackSeqChars <span class="token operator">=</span> inStackSeq<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> outStackSeqChars <span class="token operator">=</span> outStackSeq<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个栈</span>  <span class="token class-name">SequenceStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>inStackSeqChars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个指针i,指向出栈序列,这里不借助队列实现</span>  <span class="token comment">// 指针j指向入栈序列</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> inStackSeqChars<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inStackSeqChars<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每次入栈和出栈顺序队列第一个比较,如果相等</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> outStackSeqChars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> i <span class="token operator">>=</span> outStackSeqChars<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-前缀-中缀-后缀表达式"><a class="markdownIt-Anchor" href="#22-前缀-中缀-后缀表达式"></a> 2.2 前缀、中缀、后缀表达式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param char1: 第一个运算符* @param char2: 第二个运算符* @return: int* @description: 返回0,优先级一致;正数,前面优先级高;负数,前面优先级低*/</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> char1<span class="token punctuation">,</span> <span class="token keyword">char</span> char2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> item <span class="token operator">:</span> chars<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> item <span class="token operator">:</span> chars<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'^'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> item <span class="token operator">:</span> chars<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char2<span class="token punctuation">)</span> <span class="token operator">-</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** @param op: 操作符* @return: boolean* @description: 判断是否是操作符*/</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isOp</span><span class="token punctuation">(</span><span class="token keyword">char</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> op <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'%'</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token string">'^'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="221-中缀前缀表达式"><a class="markdownIt-Anchor" href="#221-中缀前缀表达式"></a> 2.2.1 中缀——&gt;前缀表达式</h3><blockquote><p>遵循右优先，倘若一个中缀表达式右边的运算符能够先运算，该右边的运算符优先级高</p></blockquote><p>规则：</p><ul><li>从右向左遍历</li><li>操作数前插</li><li>操作符，若栈空入栈；不空，则将栈中大于当前运算符优先级出栈进行前插,或遇到右括号停止。之后再将当前运算符压栈</li><li>右括号入栈，遇到左括号不断弹出操作符前插，直到遇到右括号</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param nifixExpression : 中缀表达式* @return: String* @description: 中缀转前缀*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">nifixToPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nifixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储表达式拼接的结果</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储界限符和运算符的栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> top<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nifixExpression<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> temp <span class="token operator">=</span> nifixExpression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 如果长度是1,可能是：1位数字,界限符,操作符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> item <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果是操作符</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOp</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> top<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是左括号,不断出栈直到遇到右括号</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">')'</span><span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是1位数字</span>        sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果长度不为1,说明是多位的数字,进行前插</span>      sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="222-前缀中缀表达式"><a class="markdownIt-Anchor" href="#222-前缀中缀表达式"></a> 2.2.2 前缀——&gt;中缀表达式</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/前缀to中缀.png"><p>该前缀表达式的运算符从右向左依次生效，故前缀转中缀规则：</p><ul><li>从右向左遍历</li><li>将操作数压栈</li><li>遇到操作符，则将栈中最上面的两个元素弹出比如A和B，进行拼接。最后将拼接结果压栈</li><li>整个数组遍历结束后，栈中就是中缀结果</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param prefixExpression: 前缀表达式* @return: String* @description: 后缀转中缀*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">PrefixToNifix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prefixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>prefixExpression<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> top1<span class="token punctuation">,</span> top2<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> prefixExpression<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> item <span class="token operator">=</span> prefixExpression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isOp</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是操作符,则取出栈中最上面两个元素进行合并</span>      top1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      top2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 合并后重新压栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'('</span> <span class="token operator">+</span> top1 <span class="token operator">+</span> item <span class="token operator">+</span> top2 <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是操作数直接压栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 此时栈顶元素就是中缀表达式</span>  <span class="token class-name">String</span> res <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理多余的括号</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="223-中缀后缀表达式"><a class="markdownIt-Anchor" href="#223-中缀后缀表达式"></a> 2.2.3 中缀——&gt;后缀表达式</h3><blockquote><p>遵循左优先，倘若一个中缀表达式左边的运算符能够先运算，该左边的运算符可以运算</p></blockquote><p>规则：</p><ul><li>遇到操作数。直接加入后缀表达式</li><li>遇到界限符。比如()[]{}，遇到左半部分入栈，遇到右半部分依次弹出栈内运算符并加入后缀表达式，直到弹出对应的左半部分界限符</li><li>遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式。若遇到左半部分界限符或者栈空，则停止。之后再把当前运算符入栈。</li><li>将栈中剩余元素弹出加入表达式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param nifixExpression : 中缀表达式* @return: String* @description: 中缀转后缀*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">nifixToPostfix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nifixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储界限符和运算符的栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> top<span class="token punctuation">,</span> item<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> nifixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每个s判断长度,如果是1,则可能为：一位的数字,操作符或者界限符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      item <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOp</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果遇到运算符,将优先级高于或等于item的运算符出栈加入表达式,直到栈空或遇到左半部分括号</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token string">'('</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> top<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是界限符的右半部分</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 不断出栈加入表达式中,直到遇到右半部分的括号</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 长度大于1说明一定是多位数字操作数</span>      sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="224-后缀中缀表达式"><a class="markdownIt-Anchor" href="#224-后缀中缀表达式"></a> 2.2.4 后缀——&gt;中缀表达式</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/后缀to中缀.png"><p>该后缀表达式的运算符从左向右依次生效，故后缀转中缀规则：</p><ul><li>从左向右遍历</li><li>将操作数压栈</li><li>遇到操作符，则将栈中最上面的两个元素弹出比如A和B，进行拼接。需要注意拼接时，先弹出来的要放到操作符的后面，比如B*A。最后将拼接结果压栈</li><li>整个数组遍历结束后，栈中就是中缀结果</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param postfixExpression: 后缀表达式* @return: String* @description: 后缀转中缀*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">PostfixToNifix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postfixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>postfixExpression<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> top1<span class="token punctuation">,</span> top2<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> postfixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isOp</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是操作符,则取出栈中最上面两个元素进行合并</span>      top1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      top2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 合并后重新压栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'('</span> <span class="token operator">+</span> top2 <span class="token operator">+</span> item <span class="token operator">+</span> top1 <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是操作数直接压栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 此时栈顶元素就是中缀表达式</span>  <span class="token class-name">String</span> res <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理多余的括号</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-树"><a class="markdownIt-Anchor" href="#3-树"></a> 3 树</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> elem<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">TreeNode</span> lChild<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">TreeNode</span> rChild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="31-遍历-递归"><a class="markdownIt-Anchor" href="#31-遍历-递归"></a> 3.1 遍历 递归</h2><h3 id="311-先序遍历递归"><a class="markdownIt-Anchor" href="#311-先序遍历递归"></a> 3.1.1 先序遍历（递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 先序遍历  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="312-中序遍历递归"><a class="markdownIt-Anchor" href="#312-中序遍历递归"></a> 3.1.2 中序遍历（递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 中序遍历  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="313-后序遍历递归"><a class="markdownIt-Anchor" href="#313-后序遍历递归"></a> 3.1.3 后序遍历（递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 后序遍历  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-遍历-非递归"><a class="markdownIt-Anchor" href="#32-遍历-非递归"></a> 3.2 遍历 非递归</h2><h3 id="321-先序遍历非递归"><a class="markdownIt-Anchor" href="#321-先序遍历非递归"></a> 3.2.1 先序遍历（非递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 先序遍历,非递归  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrderNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * 规则： * 1. 先将根节点入栈 * 2. 栈不为空, 出栈, 访问, 将出栈元素的右孩子、左孩子入栈 * 3. 循环第二步 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储访问结果</span>  <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指针</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根节点入栈</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 元素出栈</span>    p <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问出栈元素</span>    res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 右孩子存在,入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 左孩子存在,入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="322-中序遍历非递归"><a class="markdownIt-Anchor" href="#322-中序遍历非递归"></a> 3.2.2 中序遍历（非递归）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 中序遍历,非递归  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrderNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * 规则： * 1. 先将根节点入栈 * 2. 如果该节点有左孩子,循环将所有左孩子入栈 * 3. 出栈,访问,如果出栈元素有右孩子,压栈 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储访问结果</span>  <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指针</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将节点的所有左孩子入栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 出栈, 访问, 若有右孩子, 则入栈</span>      p <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="323-后序遍历非递归双栈"><a class="markdownIt-Anchor" href="#323-后序遍历非递归双栈"></a> 3.2.3 后序遍历（非递归|双栈）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * @param root: 根节点  * @return: void  * @description: 后序遍历,非递归,双栈  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrderNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * 规则： * 1. 先按照根-右-左的顺序入栈 * 2.等所有节点入栈结束后, 一个个出栈 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储访问结果</span>  <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指针</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈</span>  stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 元素出栈</span>    p <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问出栈元素</span>    stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 左孩子存在,入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 右孩子存在,入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问出栈元素</span>    res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="324-后序遍历非递归单栈"><a class="markdownIt-Anchor" href="#324-后序遍历非递归单栈"></a> 3.2.4 后序遍历（非递归|单栈）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>  <span class="token class-name">MyEntry</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">V</span> old <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">return</span> old<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现Map.Entry接口，重写方法</li><li>stack中存储的是一个键值对，key是树的节点，value是该节点的右孩子是否被访问，是boolean类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 后序遍历,非递归,一个栈*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrderNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储访问结果</span>  <span class="token class-name">TreeNode</span> bt <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指针</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEntry</span><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span></span> stackNode<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将该bt指向的节点以及所有的左孩子入栈</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// false表示该节点的右孩子没有被访问过</span>      stackNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stackNode<span class="token punctuation">)</span><span class="token punctuation">;</span>      bt <span class="token operator">=</span> bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 栈不空,并且栈顶元素的右孩子被访问过</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 出栈,加入遍历结果中</span>      res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 令栈顶的右孩子被访问</span>      stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// bt指向栈顶节点的右孩子</span>      bt <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="325-层次遍历"><a class="markdownIt-Anchor" href="#325-层次遍历"></a> 3.2.5 层次遍历</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 层次遍历*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 记录遍历结果</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 队列</span>  <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> node<span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-获取树的高度"><a class="markdownIt-Anchor" href="#33-获取树的高度"></a> 3.3 获取树的高度</h2><blockquote><p>获取树的高度</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 获取树的高度/深度*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 获取左子树高度</span>  <span class="token keyword">int</span> leftChildHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取右子树高度</span>  <span class="token keyword">int</span> rightChildHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftChildHeight<span class="token punctuation">,</span> rightChildHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-判断该树是否是平衡二叉树"><a class="markdownIt-Anchor" href="#34-判断该树是否是平衡二叉树"></a> 3.4 判断该树是否是平衡二叉树</h2><blockquote><p>判断该树是否是平衡二叉树</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 判断是否是AVL树*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAVL</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果是空树</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 获取左子树高度</span>  <span class="token keyword">int</span> leftChildHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取右子树高度</span>  <span class="token keyword">int</span> rightChildHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftChildHeight <span class="token operator">-</span> rightChildHeight<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-给定一个数组建树"><a class="markdownIt-Anchor" href="#35-给定一个数组建树"></a> 3.5 给定一个数组建树</h2><blockquote><p>给定一个数组建树。利用层次遍历</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param arr: 数组* @return: TreeNode* @description: 根据数组创建树*/</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">createTreeByArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 建立根节点</span>  <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建队列</span>  <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>  <span class="token comment">// i用来指向数组元素的位置</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 根节点入队列</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 出队列一个节点</span>    node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新建一个节点,将出栈节点的左指针指向该节点,新建的节点入栈</span>    temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果数组还有元素,新建一个节点,将出栈节点的右指针指向该节点,新建的节点入栈</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      temp<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      node<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  queue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="36-判断一颗树是否是完全二叉树"><a class="markdownIt-Anchor" href="#36-判断一颗树是否是完全二叉树"></a> 3.6 判断一颗树是否是完全二叉树</h2><blockquote><p>判断一颗树是否是完全二叉树</p></blockquote><p>原理：若节点无左子树，则不应该有右子树</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 判断是否是FBT树*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFBT</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFBT</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果是空树</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 声明一个队列,对树进行层次遍历</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当第一次出现null时,tag会置位true</span><span class="token keyword">boolean</span> tag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node<span class="token punctuation">;</span><span class="token comment">// 根节点入队列</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 出队列</span>node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果有左孩子并且还没有出现第一个null</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span>tag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 如果有右孩子并且还没有出现第一个null</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span>tag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="37-给定一棵树的根节点和某个值得到该值对应的所有祖先节点"><a class="markdownIt-Anchor" href="#37-给定一棵树的根节点和某个值得到该值对应的所有祖先节点"></a> 3.7 给定一棵树的根节点和某个值,得到该值对应的所有祖先节点</h2><blockquote><p>给定一棵树的根节点和某个值,得到该值对应的所有祖先节点</p></blockquote><ul><li>利用单栈的后序遍历</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 树的根节点* @param x: 被查找的值* @return: TreeNode* @description: 根据数组创建树*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getParents</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储该node节点的所有祖先</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 栈</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEntry</span><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> bt <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果bt有左孩子,并且bt的值不为x,则沿左分支向下入栈</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bt<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bt <span class="token operator">=</span> bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// bt指针一定不空,并且指向的节点要么是某个节点的左分支最后一个,要么该节点的值就位x</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bt<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bt <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="38-统计某二叉树度1节点的数量"><a class="markdownIt-Anchor" href="#38-统计某二叉树度1节点的数量"></a> 3.8 统计某二叉树度1节点的数量</h2><blockquote><p>统计某二叉树度1节点的数量</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 树的根节点* @param degree: 度* @return: int* @description: 统计数中度为degree的节点数量*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">treeCountDegree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> degree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> bt<span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过层次遍历实现统计</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    bt <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      temp<span class="token operator">++</span><span class="token punctuation">;</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      temp<span class="token operator">++</span><span class="token punctuation">;</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> degree<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="39-交换一个树所有节点的左右之树"><a class="markdownIt-Anchor" href="#39-交换一个树所有节点的左右之树"></a> 3.9 交换一个树所有节点的左右之树</h2><blockquote><p>交换一个树所有节点的左右之树</p></blockquote><ul><li>递归版本</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 交换树的左右子树, 递归*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeLeftAndRightChild</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 交换左右子树</span>    <span class="token class-name">TreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归修改左子树</span>    <span class="token function">changeLeftAndRightChild</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归修改左子树</span>    <span class="token function">changeLeftAndRightChild</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>非递归版本</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param root: 根节点* @return: void* @description: 交换树的左右子树, 非递归*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeLeftAndRightChildNonRecursion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 利用层次遍历来完成</span>  <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> temp<span class="token punctuation">,</span>bt<span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    bt <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 交换bt的左右子树</span>    temp <span class="token operator">=</span> bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bt<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bt<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bt<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="310-已知先序和中序构建二叉树"><a class="markdownIt-Anchor" href="#310-已知先序和中序构建二叉树"></a> 3.10 已知先序和中序构建二叉树</h2><blockquote><p>已知先序和中序构建二叉树</p></blockquote><h2 id="311-已知后序和中序构建二叉树"><a class="markdownIt-Anchor" href="#311-已知后序和中序构建二叉树"></a> 3.11 已知后序和中序构建二叉树</h2><blockquote><p>已知先序和中序构建二叉树</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param inOrder:   中序遍历数组* @param postOrder: 后序遍历数组* @param li:        中序遍历数组的左边界* @param ri:        中序遍历数组的右边界* @param lp:        后序遍历数组的左边界* @param rp:        后序遍历数组的右边界* @return: tree.TreeNode* @description: 根据中序和后序序列创建树, 递归*/</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">createTreeByInOrderAndPostOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inOrder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postOrder<span class="token punctuation">,</span> <span class="token keyword">int</span> li<span class="token punctuation">,</span> <span class="token keyword">int</span> ri<span class="token punctuation">,</span> <span class="token keyword">int</span> lp<span class="token punctuation">,</span> <span class="token keyword">int</span> rp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 后序遍历数组的最后一个是根节点,然后创建根节点</span>  <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>postOrder<span class="token punctuation">[</span>rp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据这个根节点元素,去中序遍历数组中定位,然后划分左右子树</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inOrder<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> inOrder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 此时,i的这个位置的左边就是左子树序列,右边就是右子树序列</span>  <span class="token comment">// 左子树节点个数：i-li; 右子树节点个数ri-i</span>  <span class="token comment">// 左子树的节点在后序遍历数组中的下标范围是：[lp,lp+i-li-1]</span>  <span class="token comment">// 右子树的节点在后序遍历数组中的下标范围是：[rp-ri+i,rp-1]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> li<span class="token punctuation">)</span> root<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> root<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span><span class="token function">createTreeByInOrderAndPostOrder</span><span class="token punctuation">(</span>inOrder<span class="token punctuation">,</span> postOrder<span class="token punctuation">,</span> li<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> lp<span class="token punctuation">,</span> lp <span class="token operator">+</span> i <span class="token operator">-</span> li <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> ri<span class="token punctuation">)</span> root<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> root<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span><span class="token function">createTreeByInOrderAndPostOrder</span><span class="token punctuation">(</span>inOrder<span class="token punctuation">,</span> postOrder<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ri<span class="token punctuation">,</span> rp <span class="token operator">-</span> ri <span class="token operator">+</span> i<span class="token punctuation">,</span> rp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="312-给定一个整数数组构建二叉排序树"><a class="markdownIt-Anchor" href="#312-给定一个整数数组构建二叉排序树"></a> 3.12 给定一个整数数组，构建二叉排序树</h2><blockquote><p>给定一个数组，构建二叉排序树</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param arr: 数组* @return: TreeNode* @description: 构建二叉排序树*/</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">createBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 创建根节点</span>  <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根节点入栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeNode</span> temp<span class="token punctuation">,</span> top<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token punctuation">.</span><span class="token function">setElem</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果栈顶元素关键字的值&lt;当前要插入的节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">getElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          top<span class="token punctuation">.</span><span class="token function">setrChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getrChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果栈顶元素关键字的值>当前要插入的节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          top<span class="token punctuation">.</span><span class="token function">setlChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">getlChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="313-将一颗二叉树调整为平衡二叉树"><a class="markdownIt-Anchor" href="#313-将一颗二叉树调整为平衡二叉树"></a> 3.13 将一颗二叉树调整为平衡二叉树</h2><h1 id="4-查找"><a class="markdownIt-Anchor" href="#4-查找"></a> 4 查找</h1><h1 id="5-排序"><a class="markdownIt-Anchor" href="#5-排序"></a> 5 排序</h1><a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="Mybatis/"/>
      <url>Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h1><h2 id="11-什么是mybatis"><a class="markdownIt-Anchor" href="#11-什么是mybatis"></a> 1.1 什么是Mybatis</h2><ul><li><p>MyBatis<strong>本是apache</strong>的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且<strong>改名为MyBatis</strong> 。2013年11月<strong>迁移到Github</strong></p></li><li><p>MyBatis 是一款优秀的<strong>持久层框架</strong></p></li><li><p>它支持自定义 SQL、存储过程以及高级映射。</p></li><li><p>MyBatis免除了几乎所有的 JDBC代码以及设置参数和获取结果集的工作。MyBatis可以通过简单的XML或注解来配置和映射原始类型、接口和 Java的POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></li></ul><h2 id="12-获得mybatis"><a class="markdownIt-Anchor" href="#12-获得mybatis"></a> 1.2 获得Mybatis</h2><ul><li>Maven仓库</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="#https://github.com/mybatis/mybatis-3/releases">GitHub</a></li><li><a href="#https://mybatis.org/mybatis-3/zh/getting-started.html">中文文档</a></li></ul><h2 id="12-使用mybatis的原因"><a class="markdownIt-Anchor" href="#12-使用mybatis的原因"></a> 1.2 使用Mybatis的原因</h2><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql</li></ul><h1 id="2-第一个mybatis程序"><a class="markdownIt-Anchor" href="#2-第一个mybatis程序"></a> 2. 第一个Mybatis程序</h1><h2 id="21-环境搭建"><a class="markdownIt-Anchor" href="#21-环境搭建"></a> 2.1 环境搭建</h2><ul><li>搭建数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>mybatistest<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>mybatistest<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"1234567"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"1234568"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>创建Maven项目</p></li><li><p>删除src目录</p></li><li><p>导入Maven依赖</p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--mysql驱动--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--mybatis--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--Junit--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-创建一个模块"><a class="markdownIt-Anchor" href="#22-创建一个模块"></a> 2.2 创建一个模块</h2><ul><li>在resources文件夹下，创建Mybatis核心配置文件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--configuration核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--多个环境--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开发环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--事务管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--数据库相关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatistest?useSSL=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写Mybatis的工具类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>silverbeats<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtil</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用Mybatis第一步：获取SQLSessionFactory对象</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>      <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>  <span class="token comment">//SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession</span>  <span class="token comment">//实例来直接执行已映射的 SQL 语句</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSession</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-编写代码"><a class="markdownIt-Anchor" href="#23-编写代码"></a> 2.3 编写代码</h2><ul><li>实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>  <span class="token comment">// 以及空参、有参、get、set、toString方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Dao接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>接口实现类</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span><span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--命名空间 绑定一个对应的dao接口也就是mapper接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--id对应绑定接口的方法,resultType返回类型要写全类名--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from mybatistest.user  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-junit测试"><a class="markdownIt-Anchor" href="#24-junit测试"></a> 2.4 Junit测试</h2><p>根据上面的内容进行测试一定出现下面的异常</p><pre class="line-numbers language-none"><code class="language-none">绑定异常org.apache.ibatis.binding.BindingException: Type interface com.silverbeats.dao.UserMapper is not known to the MapperRegistry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是因为在Maybatis核心配置文件中缺少内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册,这里就是MapperRegistry--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/silverbeats/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是运行单元测试还是会出现下面的异常，表示找不到配置文件</p><pre class="line-numbers language-none"><code class="language-none">java.lang.ExceptionInInitializerErrorat com.silverbeats.dao.UserMapperTest.test(UserMapperTest.java:15)……Caused by: org.apache.ibatis.exceptions.PersistenceException: ### Error building SqlSession.### The error may exist in com&#x2F;silverbeats&#x2F;dao&#x2F;UserMapper.xml### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource com&#x2F;silverbeats&#x2F;dao&#x2F;UserMapper.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为Maven项目中资源导出的问题，需要在父工程或者子工程的pom.xml导入如下代码（保险起见都父子工程导入）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获得SqlSession对象</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 方式一：执行sql</span>    <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 方法2</span>    <span class="token comment">// List&lt;User> userList = sqlSession.selectList("com.silverbeats.dao.UserMapper.getUserList");</span>    <span class="token comment">// 打印数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 关闭SqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-总结"><a class="markdownIt-Anchor" href="#25-总结"></a> 2.5 总结</h2><p>上面的第一个程序中，一共创建了6个文件</p><ul><li>子工程resources/mybatis-config.xml Mybatis核心配置文件</li><li>子工程java目录下建包，dao目录下User实体类对应的接口UserMapper</li><li>dao目录下实体类接口UserMapper对应的配置文件UserMapper.xml，并且每个xml配置文件都需要在Mybatis核心配置文件中进行注册</li><li>pojo目录下，User实体类，JavaBean</li><li>utils目录下，MybatisUtil工具类，加载核心配置文件，返回sqlSession</li><li>test目录下，对应目录结构，创建了Junit测试类</li></ul><p>其中，在后期使用过程中，有一些文件是不需要修改的：</p><ol><li>MybatisUtil类不需要修改</li><li>User实体类不需要变动，除非数据库对应的字段发生变化</li></ol><p>当需要向数据库添加新的表时，只需要在dao目录下创建对应的Mapper、Mapper.xml并在Mybatis-config.xml进行注册，以及pojo下的实体类即可</p><h1 id="3-crud"><a class="markdownIt-Anchor" href="#3-crud"></a> 3. CRUD</h1><p>在UserMapper.xml书写sql，进行CRUD</p><h2 id="31-select标签"><a class="markdownIt-Anchor" href="#31-select标签"></a> 3.1 select标签</h2><ul><li>编写接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查询全部用户</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据id查询用户</span><span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写对应Mapper.xml的sql</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--普通查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from mybatistest.user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--带有条件的查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from mybatistest.user where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>id 绑定的namespace中的方法名</li><li>resultType sql语句执行的返回值</li><li>parameterType 参数类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-insert标签"><a class="markdownIt-Anchor" href="#32-insert标签"></a> 3.2 insert标签</h2><ul><li>编写接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入用户</span><span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除用户</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写对应Mapper.xml的sql</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into mybatistest.user (id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"胡娜"</span><span class="token punctuation">,</span> <span class="token string">"asdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入成功，提交事务</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-update标签"><a class="markdownIt-Anchor" href="#33-update标签"></a> 3.3 update标签</h2><ul><li>编写接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 修改用户</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>编写对应Mapper.xml的sql</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  update mybatistest.user set name=#&#123;name&#125;, pwd=#&#123;pwd&#125; where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"胡娜12"</span><span class="token punctuation">,</span> <span class="token string">"asdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新成功，提交事务</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-delete标签"><a class="markdownIt-Anchor" href="#34-delete标签"></a> 3.4 delete标签</h2><ul><li>编写接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 删除用户</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>编写对应Mapper.xml的sql</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  delete from mybatistest.user where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入成功，提交事务</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-map"><a class="markdownIt-Anchor" href="#35-map"></a> 3.5 Map</h2><p>倘若实体类或者数据库中的表字段过多，可以考虑使用Map集合来解决</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用map插入用户</span><span class="token keyword">int</span> <span class="token function">addUser2</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--通过map添加--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into mybatistest.user (id, name, pwd) values(#&#123;userid&#125;, #&#123;userName&#125;, #&#123;password&#125;);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token string">"呼啦啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"lliiww"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userMapper<span class="token punctuation">.</span><span class="token function">addUser2</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map传递参数，直接在sql中取出对应的key即可，parameterType=“map”</p><p>对象传递参数，直接在sql中取对象的属性即可，parameterType=“com.silverbeats.pojo.User”</p><p>在只有一个基本类型参数的情况下，可以直接在sql中取到</p><p>多个参数用Map，或者<strong>注解</strong></p><h1 id="4-配置解析"><a class="markdownIt-Anchor" href="#4-配置解析"></a> 4. 配置解析</h1><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html">配置文档</a></p><h2 id="41-核心配置文件mybatis-configxml"><a class="markdownIt-Anchor" href="#41-核心配置文件mybatis-configxml"></a> 4.1 核心配置文件mybatis-config.xml</h2><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/核心配置文件目录.png"><p><strong>标签书写顺序</strong></p><p>The content of element type “configuration” must match “(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)”.</p><h2 id="42-properties-属性"><a class="markdownIt-Anchor" href="#42-properties-属性"></a> 4.2 properties 属性</h2><p>可以通过properties 属性来实现引用配置文件</p><p>这些属性可以在外部进行配置，并可以进行动态替换。既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置</p><p>在[上面的程序](#2. 第一个Mybatis程序)的核心配置文件中，可以将其中的driver、url、username、password写到properties文件中</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatistest?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在核心配置文件中引入该properties文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入外部配置文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/silverbeats/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时properties标签内可以使用property标签来添加属性，比如将username和password用property传递，url和driver用properties文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatistest?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样也可以达到相同的效果。</p><p>倘若是下面这种情况</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会优先使用properties文件中的password值</p><h2 id="43-settings-设置"><a class="markdownIt-Anchor" href="#43-settings-设置"></a> 4.3 settings 设置</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings 设置文档</a></p><h2 id="44-typealiases-类型别名"><a class="markdownIt-Anchor" href="#44-typealiases-类型别名"></a> 4.4 typeAliases 类型别名</h2><p>在核心配置文件中给实体类起别名，这样，可以在Mapper.xml中的resultType和parameterType直接使用这个别名即可，而不需要写全类名</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--给实体类起别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以指定一个包名，Mybatis会在包名下面搜索需要的JavaBean，在没有注解的情况下，扫描到的Bean别名模式是类名小写</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三种起别名方式为加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"hulala"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>上面三个方式都可以给实体类起别名，优先级不同，第一种直接给实体类起别名优先级最高，其次是注解，最后是指定包名给实体类起别名</p></blockquote><h2 id="45-environments-环境变量"><a class="markdownIt-Anchor" href="#45-environments-环境变量"></a> 4.5 environments 环境变量</h2><p>MyBatis 可以配置成适应多种环境，<strong>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--通过修改default的值来切换环境--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>transactionManager事务管理器</p><ul><li>JDBC 默认</li><li>MANAGED</li></ul></li><li><p>dataSource数据源，dataSource元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源，三种内建的数据源类型</p><ul><li><p>UNPOOLED</p><blockquote><p>这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形</p></blockquote></li><li><p>POOLED 默认</p><blockquote><p>这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求</p></blockquote></li><li><p>JNDI</p><blockquote><p>这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用</p></blockquote></li></ul></li></ul><h2 id="46-映射器mappers"><a class="markdownIt-Anchor" href="#46-映射器mappers"></a> 4.6 映射器Mappers</h2><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等。例如：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用相对于类路径的资源引用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/mybatis/builder/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/mybatis/builder/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/mybatis/builder/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用完全限定资源定位符（URL） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///var/mappers/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///var/mappers/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///var/mappers/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面两个方法需要注意：</p><ul><li>接口和它的Mapper配置文件必须同名</li><li>接口和它的Mapper配置文件必须同包</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.builder.AuthorMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.builder.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.builder.PostMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.builder<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="47-其他"><a class="markdownIt-Anchor" href="#47-其他"></a> 4.7 其他</h2><ul><li><p>typeHandlers 类型处理器</p></li><li><p>objectFactory 对象工厂</p></li><li><p>plugins 插件</p><ul><li>Mybatis-generator-core</li><li>Mybatis-plus</li><li>通用mapper</li></ul></li></ul><h1 id="5-生命周期和作用域"><a class="markdownIt-Anchor" href="#5-生命周期和作用域"></a> 5. 生命周期和作用域</h1><p>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong></p><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/生命周期和作用域.png"><p><strong>对象生命周期和依赖注入框架</strong></p><p>依赖注入框架可以创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。 如果对如何通过依赖注入框架使用 MyBatis 感兴趣，可以研究一下 MyBatis-Spring 或 MyBatis-Guice 两个子项目。</p><h2 id="51-sqlsessionfactorybuilder"><a class="markdownIt-Anchor" href="#51-sqlsessionfactorybuilder"></a> 5.1 SqlSessionFactoryBuilder</h2><ul><li>可实例化</li><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li><strong>作用域：局部变量</strong></li></ul><h2 id="52-sqlsessionfactory"><a class="markdownIt-Anchor" href="#52-sqlsessionfactory"></a> 5.2 SqlSessionFactory</h2><ul><li>一旦创建，一直存在</li><li>可以想象为：数据库连接池</li><li>单例模式或静态单例模式</li><li><strong>作用域：全局作用域</strong></li></ul><h2 id="53-sqlsession"><a class="markdownIt-Anchor" href="#53-sqlsession"></a> 5.3 SqlSession</h2><ul><li>每个线程都应该有它自己的 SqlSession 实例，可以理解为连接到连接池的一个请求，需要自行请求和关闭</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的</li><li><strong>用完就关闭</strong>，否则会出现资源占用</li><li><strong>最佳的作用域是请求或方法作用域</strong></li></ul><h1 id="6-解决属性名和字段名不一致的问题"><a class="markdownIt-Anchor" href="#6-解决属性名和字段名不一致的问题"></a> 6. 解决属性名和字段名不一致的问题</h1><p>当实体类中的私有属性，比如password，而在数据库中对应的字段名是pwd，倘若通过id查询，是不会获得对应的值的。</p><p>因为在Mapper.xml中对应的sql是这样写的：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mybatistest<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment">#&#123;id&#125;;</span><span class="token comment">-- 实际上是：</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>pwd <span class="token keyword">from</span> mybatistest<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment">#&#123;id&#125;;</span><span class="token comment">-- 目标就是，如何将查询到的pwd值给到password</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法</p><ul><li>起别名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>pwd <span class="token keyword">as</span> password <span class="token keyword">from</span> mybatistest<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment">#&#123;id&#125;;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>resultMap结果集映射，在Mapper.xml中写</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--column和property值一样，可省略--></span>  <span class="token comment">&lt;!--column对应数据库的列--></span>  <span class="token comment">&lt;!--property对应实体类的属性值--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!--column和property值一样，可省略--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--此时不需要resultType--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from mybatistest.user where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-日志"><a class="markdownIt-Anchor" href="#7-日志"></a> 7. 日志</h1><h2 id="71-日志工厂"><a class="markdownIt-Anchor" href="#71-日志工厂"></a> 7.1 日志工厂</h2><p>如果一个数据库操作出现异常，需要排错，日志就是最好的助手。</p><p>在核心配置文件中配置logImpl，指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p><ul><li>SLF4J</li><li>LOG4J 【掌握】【需要导包】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING【掌握】【可以直接用】</li><li>NO_LOGGING</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="72-log4j"><a class="markdownIt-Anchor" href="#72-log4j"></a> 7.2 LOG4J</h2><ul><li><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIXSyslog守护进程等；</p></li><li><p>可以控制每一条日志的输出格式</p></li><li><p>可以定义每一条日志信息的级别，能够更加细致地控制日志的生成过程</p></li><li><p>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p></li></ul><ol><li>导入LOG4J包</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>log4j.properties</li></ol><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#将登记为DEBUG的日志信息输出到console和file两个目的地</span><span class="token attr-name">log4j.rootLogger</span> <span class="token punctuation">=</span> <span class="token attr-value">debug,console,file</span><span class="token comment">#控制台输出的相关配置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out </span><span class="token attr-name">log4j.appender.console.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[%c]-%m%n</span><span class="token comment">#文件输出相关配置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span> <span class="token punctuation">=</span> <span class="token attr-value">./logs/log.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span> <span class="token punctuation">=</span> <span class="token attr-value">10mb</span><span class="token comment">##输出DEBUG级别以上的日志</span><span class="token attr-name">log4j.appender.file.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><span class="token comment">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PrepareStatement</span><span class="token punctuation">=</span> <span class="token attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置核心文件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token attr-name">&lt;setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="8-分页"><a class="markdownIt-Anchor" href="#8-分页"></a> 8. 分页</h1><h2 id="81-limit分页"><a class="markdownIt-Anchor" href="#81-limit分页"></a> 8.1 limit分页</h2><p>分页的原因：减少数据的处理量，提高效率</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">limit</span> startIndex<span class="token punctuation">,</span> pageSize<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试分页</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Mapper.xml</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from mybatistest.user limit #&#123;startIndex&#125;, #&#123;pageSize&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="82-rowbounds分页"><a class="markdownIt-Anchor" href="#82-rowbounds分页"></a> 8.2 RowBounds分页</h2><ol><li>接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用RowBounds查询</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Mapper.xml</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from mybatistest.user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRoundBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// RowBounds实现</span><span class="token class-name">RowBounds</span> rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过java代码层面实现分页</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> selectList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.silverbeats.dao.UserMapper.getUsersByRowBounds"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> selectList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="83-分页插件"><a class="markdownIt-Anchor" href="#83-分页插件"></a> 8.3 分页插件</h2><p><a href="#https://pagehelper.github.io/docs/howtouse/">pagehelper</a></p><h1 id="9-使用注解"><a class="markdownIt-Anchor" href="#9-使用注解"></a> 9. 使用注解</h1><p><strong>接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法存在多个参数,所有参数前面必须要有@Param</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入用户</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"insert into mybatistest.user (id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"insert into mybatistest.user (id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 更新</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update user set name = #&#123;name&#125; where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除</span><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from user where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/注解.png"><p>@Param()注解</p><ul><li>基本类型的参数或者String类型，需要加上注解</li><li>如果只有一个基本类型，可以忽略</li><li>引用类型不需要加</li><li>在sql引用的就是这里设定的属性名</li></ul><p><strong>核心配置xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--绑定接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-lombok"><a class="markdownIt-Anchor" href="#10-lombok"></a> 10. Lombok</h1><p>Lombok项目是一个Java库，它会自动插入您的编辑器和构建工具中，从而使您的Java更加生动有趣。永远不要再写另一个getter或equals方法，带有一个注释的您的类有一个功能全面的生成器，自动执行记录变量等。</p><ul><li>idea中安装插件</li><li>项目中导入lombok的jar包</li></ul><pre class="line-numbers language-none"><code class="language-none">@data: 可以添加无参构造、get、set、toString、hashCode、equals@ToString: 重写toString方法@AllArgsConstructor: 添加有参构造@NoArgsConstructor: 添加无参构造@EqualsAndHashCode: 添加hashCode、equals方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="11-复杂查询环境"><a class="markdownIt-Anchor" href="#11-复杂查询环境"></a> 11. 复杂查询环境</h1><ul><li>搭建环境，创建学生表和老师表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> teacher<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'乌拉拉'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>tid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'小张'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'小李'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="111-多对一"><a class="markdownIt-Anchor" href="#111-多对一"></a> 11.1 多对一</h2><p>多个学生关联一个老师</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Teacher</span> teacher<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 在mybatis实现下面的sql</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s<span class="token punctuation">,</span> teacher t <span class="token keyword">where</span> s<span class="token punctuation">.</span>tid <span class="token operator">=</span> t<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>①先获取所有学生的信息</p><p>②根据学生的tid获取对应老师的信息</p><p><strong>按照查询嵌套</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentInfo<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from student;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from teacher where id = #&#123;tid&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按照结果嵌套</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentInfo2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select s.id sid, s.name sname, t.name tname  from student s, teacher t  where s.tid = t.id;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="112-一对多"><a class="markdownIt-Anchor" href="#112-一对多"></a> 11.2 一对多</h2><p>一个老师关联多个学生</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> tid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取指定老师下的学生信息和老师信息</span><span class="token class-name">Teacher</span> <span class="token function">getTeacherById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>按照结果嵌套</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--获取指定老师下的学生信息和老师信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacherById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select s.id sid, s.name sname, t.name tname, t.id tid  from student s, teacher t  where s.tid = tid and tid = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按照查询嵌套</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacherById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from teacher where id = #&#123;tid&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentsByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentsByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from student where tid = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="12-动态sql"><a class="markdownIt-Anchor" href="#12-动态sql"></a> 12. 动态sql</h1><p>根据不同的条件生成不同的sql</p><ul><li>环境</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客作者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览量'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Blog</span> blog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">IDUtils</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Mybatis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"狂神说"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setViews</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">addBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">IDUtils</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">addBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">IDUtils</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">addBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">IDUtils</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"微服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">addBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.silverbeats.dao.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into blog(id, title, author, create_time, views)    values(#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> view<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="121-if"><a class="markdownIt-Anchor" href="#121-if"></a> 12.1 iF</h2><ul><li>接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查询blog</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">queryBlogIF</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Mapper.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog where 1=1  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and title = #&#123;title&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and author = #&#123;author&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"Spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogIF</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Blog</span> blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="122-choosewhen-otherwise"><a class="markdownIt-Anchor" href="#122-choosewhen-otherwise"></a> 12.2 choose(when、otherwise)</h2><p><em>choose</em>标签，当满足第一个when的条件就不会再往下走了</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试choose--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title = #&#123;title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and author = #&#123;author&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>and views = #&#123;views&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="123-trimwhere-set"><a class="markdownIt-Anchor" href="#123-trimwhere-set"></a> 12.3 trim（where、set）</h2><p><em>where</em> 元素<mark>只会在子元素返回任何内容的情况下才插入 “WHERE” 子句</mark>。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试where--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title = #&#123;title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and author = #&#123;author&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试set--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  update blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title = #&#123;title&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>author = #&#123;author&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="124-foreach"><a class="markdownIt-Anchor" href="#124-foreach"></a> 12.4 foreach</h2><p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试foreach--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select *   from blog  where views in  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    #&#123;item&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实质：循环字符串拼接</p><ul><li>collection：需要遍历的集合</li><li>item：被遍历集合的每个元素</li><li>index：被遍历元素的索引</li><li>open：开始的字符</li><li>close：结束的字符</li><li>separator：分隔符</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试foreach</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">queryForeach</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*----------------------------------------------------------*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">TestForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryForeach</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="125-sql片段"><a class="markdownIt-Anchor" href="#125-sql片段"></a> 12.5 sql片段</h2><p>有的时候，会将公共的部分抽取出来，方便反复使用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--测试sql片段--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if_title_author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and title = #&#123;title&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and author = #&#123;author&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--测试where--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogWhere<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if_title_author<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最好基于单表来定义sql片段</li><li>sql片段中不要存在where标签</li></ul><h1 id="13-缓存"><a class="markdownIt-Anchor" href="#13-缓存"></a> 13. 缓存</h1><p>读写分离，主从复制</p><p>经常查询并且不经常改变的数据可以使用缓存</p><h2 id="131-mybatis的缓存"><a class="markdownIt-Anchor" href="#131-mybatis的缓存"></a> 13.1 Mybatis的缓存</h2><ul><li>Mybatis包含了一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存，缓存可以极大地提升查询效率</li><li>Mybatis系统中默认定义了两级缓存：<strong>一级缓存和二级缓存</strong><ul><li>默认情况下，只有一级缓存开启，（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存</li><li>为了提高扩展性，Mybatis定义了缓存接口Cache，可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><h2 id="132-一级缓存"><a class="markdownIt-Anchor" href="#132-一级缓存"></a> 13.2 一级缓存</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt="" /></p><p>可以看到，只有一次SQL查询，并且user1和user2是同一个对象</p><p>缓存失效的情况</p><ul><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改编原来的数据，所以会刷新缓存</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新id=2的用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"嗯哼2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">updateUserById</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img data-src="http://resource.silverbeats.cn/static/images/Mybatis/缓存失效_更新.png"><ul><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清理缓存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img data-src="http://resource.silverbeats.cn/static/images/Mybatis/缓存失效_更新.png"><h2 id="133-二级缓存"><a class="markdownIt-Anchor" href="#133-二级缓存"></a> 13.3 二级缓存</h2><p>二级缓存也称全局缓存，是基于namespace级别的缓存，一个名称空间对应一个二级缓存</p><p>工作机制</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了，但是目标是：一级缓存消失，会将其中的数据保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查出的数据可以放在自己对应的缓存（map）中</li></ul><p><strong>步骤：</strong></p><ul><li>开启全局缓存</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在Mapper.xml中添加cache标签</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SqlSession</span> sqlSession1 <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> sqlSession2 <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper1 <span class="token operator">=</span> sqlSession1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UserMapper</span> mapper2 <span class="token operator">=</span> sqlSession2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper1<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭sqlSession1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/二级缓存.png"><p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</p><p>可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><p>默认的清除策略是 LRU。</p><p>flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p><p>size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p><p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p><h2 id="134-缓存原理"><a class="markdownIt-Anchor" href="#134-缓存原理"></a> 13.4 缓存原理</h2><img data-src="http://resource.silverbeats.cn/static/images/Mybatis/缓存原理.png"><p><strong>缓存顺序：</strong></p><ul><li>先找二级缓存</li><li>再找一级缓存</li><li>最后查询数据库</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析-动态规划</title>
      <link href="%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>动态规划和分治法类似，其基本思想也是将待求解问题分解成若干个子问题。不同点在于，适用于动态规划的问题，其子问题往往不是相互独立，倘若使用分治法，会进行大量的重复计算。比如斐波那契数列求解问题，当计算Fib(10)时，会需要用到Fib(9)和Fib(8)，而计算Fib(9)也需要用到Fib(8)，实际上Fib(8)只需要计算一次即可，倘若使用分治法会对其进行两次的计算。（然而实际上，计算斐波那契数列不会用到这种求解方式，可以使用迭代解决，或者直接使用通项公式求解）</p><p>动态规划通常可以按下面四个步骤设计：</p><ul><li>找出最优解的性质，并刻画其结构特征</li><li>递归定义最优解</li><li>以自底向上的方式计算出最优解</li><li>根据计算最优时得到的信息，构造最优解</li></ul><p>动态规划往往是利用空间换时间</p><h1 id="1-矩阵连乘"><a class="markdownIt-Anchor" href="#1-矩阵连乘"></a> 1. 矩阵连乘</h1><p>矩阵的乘法有结合律，不同的计算顺序所耗费的代价不同。比如：</p><table><thead><tr><th>矩阵1</th><th>矩阵2</th><th>矩阵3</th></tr></thead><tbody><tr><td>A<sub>10×100</sub></td><td>A<sub>100×5</sub></td><td>A<sub>5×50</sub></td></tr></tbody></table><ul><li><p>计算顺序1：（矩阵1×矩阵2）×矩阵3</p><p>所需要的乘法次数：10×5×100 + 10×50×5 = 7500次</p><p>所需要的加法次数：10×5×99 + 10×50×4 = 6950次</p></li><li><p>计算顺序2：矩阵1×（矩阵2×矩阵3）</p><p>所需要的乘法次数：100×50×5 + 10×50×100  = 750000次</p><p>所需要的加法次数：100×50×4 + 10×50×99 = 497000次</p></li></ul><p>这里不做矩阵相乘的O(n<sup>3</sup>)写法，相关代码可以参考<a href="/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%88%86%E6%B2%BB%E6%B3%95/" title="算法设计与分析——分治法">算法设计与分析——分治法</a>Strassen矩阵乘法。</p><h1 id="2-最长公共子序列"><a class="markdownIt-Anchor" href="#2-最长公共子序列"></a> 2. 最长公共子序列</h1><h1 id="3-最大子段和"><a class="markdownIt-Anchor" href="#3-最大子段和"></a> 3. 最大子段和</h1><h1 id="4-凸多边形最优三角剖分"><a class="markdownIt-Anchor" href="#4-凸多边形最优三角剖分"></a> 4. 凸多边形最优三角剖分</h1><h1 id="5-多边形游戏"><a class="markdownIt-Anchor" href="#5-多边形游戏"></a> 5. 多边形游戏</h1><h1 id="6-图像压缩"><a class="markdownIt-Anchor" href="#6-图像压缩"></a> 6. 图像压缩</h1><h1 id="7-电路布线"><a class="markdownIt-Anchor" href="#7-电路布线"></a> 7. 电路布线</h1><h1 id="8-流水作业调度"><a class="markdownIt-Anchor" href="#8-流水作业调度"></a> 8. 流水作业调度</h1><h1 id="9-背包问题"><a class="markdownIt-Anchor" href="#9-背包问题"></a> 9. 背包问题</h1><h1 id="10-最优二叉搜索树"><a class="markdownIt-Anchor" href="#10-最优二叉搜索树"></a> 10. 最优二叉搜索树</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 算法设计与分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="KMP/"/>
      <url>KMP/</url>
      
        <content type="html"><![CDATA[<h1 id="1-kmp简介"><a class="markdownIt-Anchor" href="#1-kmp简介"></a> 1. KMP简介</h1><p>KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的时间复杂度O(m+n)</p><h1 id="2-kmp图解"><a class="markdownIt-Anchor" href="#2-kmp图解"></a> 2. KMP图解</h1><h2 id="21-通览编号从0开始"><a class="markdownIt-Anchor" href="#21-通览编号从0开始"></a> 2.1 通览(编号从0开始)</h2><h3 id="211-情况一"><a class="markdownIt-Anchor" href="#211-情况一"></a> 2.1.1 情况一</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_初始.png" alt="初始状态"><p>以上述主串和模式串为例子，可知，i指针指向主串，j指针指向模式串</p><p><strong>当主串i位置与模式串j位置字符一样，i，j向后移动一个位置</strong></p><h3 id="212-情况二"><a class="markdownIt-Anchor" href="#212-情况二"></a> 2.1.2 情况二</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_con1.png" alt="模式串编号5位置出现不匹配"><p>易知，当i=5，j=5时，主串与模式串发生不匹配，此时需要进行的操作就是KMP的精华所在。</p><ul><li>找到不匹配位置之前的字符串的最大公共前后缀。易知，最长公共前后缀是{A,B}，长度是2</li><li>进行如上图下半部分的操作。将字符串向后挪动，让前缀处于后缀的位置</li><li>易知，此时指针i是不需要任何变动。</li><li>挪动后，i，j所指向的位置继续比较。</li><li>字符串是不可能挪动的，实际上改变的是指针j，易知，挪动后指针j指向模式串编号为2的位置</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_con2.png" alt="模式串编号6位置出现不匹配"><p>上图，指针j经过调整后，从模式串编号2开始，继续和主串进行比较，当j指向编号6时发生不匹配，进行上述提到的步骤，经过调整得到下图情况三。</p><h3 id="213-情况三"><a class="markdownIt-Anchor" href="#213-情况三"></a> 2.1.3 情况三</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_con3.png" alt="需要匹配的模式串长度超出主串长度"><p><strong>每次移动指针j后，需要检查主串剩余长度是否≥模式串需要匹配的长度</strong></p><h3 id="214-综合"><a class="markdownIt-Anchor" href="#214-综合"></a> 2.1.4 综合</h3><p>根据上面提到的情况进行汇总，也就是代码实现的需要用到的步骤</p><ul><li>当主串i位置与模式串j位置字符一样，i，j向后移动一个位置</li><li>当出现不匹配时，需要寻找不匹配位置之前的串的最大公共前后缀长度，比如长度是n，并将j移动到编号为n的位置，这里需要结合next数组，详情见[Next数组](#3. Next数组)</li><li>移动指针j后，需要检查主串剩余长度是否≥模式串需要匹配的长度，不符合条件直接break，返回匹配失败</li><li>当j的位置超过了模式串的编号，说明匹配成功，返回模式串第一个字符在主串出现的位置</li></ul><h2 id="22-通览编号从1开始"><a class="markdownIt-Anchor" href="#22-通览编号从1开始"></a> 2.2 通览(编号从1开始)</h2><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_b1_con2.png"><p>整个过程与上面标号从0开始的过程大体一致，只有一个区别就是：调整指针j的值，指的位置是<mark>不匹配位置之前的字符串的<strong>最大公共前后缀长度+1</strong></mark></p><h1 id="3-next数组"><a class="markdownIt-Anchor" href="#3-next数组"></a> 3. Next数组</h1><p>通过上一节内容可以知道，KMP算法核心是指向模式串的指针j的移动，该指针的如何移动实际上与主串是什么无关，只与模式串有关。只需要将模式串研究明白，则可以对任意主串进行匹配。</p><p>因为要匹配任意主串，故很容易知道，模式串的<strong>每个位置</strong>都有可能和主串出现不匹配。这时，当模式串每个位置出现不匹配时，此时的指针j应该调整到哪个位置，需要研究。</p><ul><li>模式串第一个位置不匹配，j应该重新指向模式串的哪个位置</li><li>模式串第二个位置不匹配，j应该重新指向模式串的哪个位置</li><li>……</li></ul><p>将j重新指向的位置整理记录下来，存储到数组中，就是Next数组，Next数组的下标代表着该模式串出现不匹配的位置，数组下标对应的值就是j重新指向的位置。</p><p>同时需要考虑另外一个问题，这个问题在上面的内容有所体现。就是模式串起始编号是0还是1。起始编号不同，Next数组不同，二者之间相差一个位置</p><blockquote><p>在进行KMP算法之前，是需要先获取模式串的Next数组，以便使用。</p></blockquote><h2 id="31-起始位置0"><a class="markdownIt-Anchor" href="#31-起始位置0"></a> 3.1 起始位置：0</h2><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_next_s0.png" alt="模式串编号从0开始"><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_next_s0des.png" alt="上next数组表一些情况举例说明"><p>上图提供的示例不全，但足以说明当某个位置出现不匹配时，指针j重新定位的位置为：不匹配位置之前字符串的最大公共前后缀长度所对应的编号</p><p>首先，为什么首位是-1，因为模式串首位不匹配需要挪动的是指向主串的i指针，是特殊情况，这样在获取next数组值的时候发现是-1，就知道需要挪动i指针，然而在实现时，只需要判断j时候等于0即可，并不需要访问next[0]时候等于-1。</p><h2 id="32-起始位置1"><a class="markdownIt-Anchor" href="#32-起始位置1"></a> 3.2 起始位置：1</h2><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_next_s1.png" alt="模式串编号从1开始"><h1 id="4-nextval数组"><a class="markdownIt-Anchor" href="#4-nextval数组"></a> 4. NextVal数组</h1><h1 id="5-代码"><a class="markdownIt-Anchor" href="#5-代码"></a> 5. 代码</h1><h2 id="51-next"><a class="markdownIt-Anchor" href="#51-next"></a> 5.1 Next</h2><h3 id="511-模式串从0标号"><a class="markdownIt-Anchor" href="#511-模式串从0标号"></a> 5.1.1 模式串从0标号</h3><p>代码实现所使用到的next数组并不是[上面](#3.1 起始位置：0)提到的next数组。这里的next数组是每一位的最长公共前后缀的长度。比如next[2]=2，表示模式串前三个包括第三个字符，它们的最长公共前后缀长度是2。所以，倘若是模式串j位置出现不匹配，那么j位置之前的字符的最长公共前后缀长度是next[j-1]</p><p>关于下面<code>getNext</code>方法，可以理解为自己匹配自己</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取该模式串每个位置的最大公共前后缀长度</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 模式串长度</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>  next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// i代表最长前后缀长度</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>      i <span class="token operator">=</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token keyword">else</span>      next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 模式串匹配kmp算法,匹配成功返回匹配的位置,失败则返回-1</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里的next数组是每个位置的最长公共前后缀的长度</span>  <span class="token comment">// 比如next[2]表示0、1、2三个位置组成的字符串公共前后缀的最大长度</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 主串的长度mainLen,i指向主串比较的位置,j指向模式串比较的位置</span>  <span class="token keyword">int</span> mainLen <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> mainLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 情况三: 主串不够长</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mainLen <span class="token operator">-</span> i <span class="token operator">&lt;</span> pattern<span class="token punctuation">.</span>length <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">// 情况一: 主串的字符与模式串字符相等</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">// 当j指向的位置已经超过模式串长度时,说明匹配成功,则返回模式串在主串中匹配成功的位置</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> i <span class="token operator">-</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 情况二: 出现不匹配</span>      <span class="token comment">// 如果j是模式串0位置,特殊情况</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 挪动主串指针i</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 重定位到不匹配位置之前字符，最大公共前后缀长度</span>        j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 默认失败</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_s0_res.png" alt="运行结果"><p>同时可以发现，倘若要得到上面提到的那种next数组，只需要将里面所有的元素后移一个位置，然后首位添-1即可。上图中最后面的1会被舍弃。</p><h3 id="512-模式串从1标号"><a class="markdownIt-Anchor" href="#512-模式串从1标号"></a> 5.1.2 模式串从1标号</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取模式串的next数组</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 模式串长度</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>  next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// i代表最长前后缀长度</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>      i <span class="token operator">=</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span>next<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 倘若写上了这一步,下面的kmp中的最后一个else只需要写j = next[j]即可</span>  <span class="token comment">// 倘若没有这一步,下面的kmp中的最后一个else需要写成j = next[j - 1] + 1</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> next<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    next<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取该模式串的next数组</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">getNext2</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 主串的长度mainLen,i指向主串比较的位置,j指向模式串比较的位置</span>  <span class="token keyword">int</span> mainLen <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> mainLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mainLen <span class="token operator">-</span> i <span class="token operator">&lt;</span> pattern<span class="token punctuation">.</span>length <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">// 主串的字符与模式串字符相等</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">// 当j指向的位置已经超过模式串长度时,说明匹配成功,则返回模式串在主串中匹配成功的位置</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> i <span class="token operator">-</span> pattern<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这里有变化</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果模式串在j这个位置与主串i这个位置字符不相等,则需要通过next数组来重新定位指向模式串字符的j的值</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里有变化,倘若getNext有最后一个for循环</span>        j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 倘若getNext没有最后一个for循环需要下面这种写法</span>        <span class="token comment">// j = next[j - 1] + 1;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 默认失败</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/kmp/kmp_s1_res.png" alt="运行结果"><h2 id="52-nextval"><a class="markdownIt-Anchor" href="#52-nextval"></a> 5.2 NextVal</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析——分治法</title>
      <link href="%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%88%86%E6%B2%BB%E6%B3%95/"/>
      <url>%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%88%86%E6%B2%BB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>分治法的基本思想是将一个规模为n的问题分解为k个规模较小的子问题，这些子问题互相独立且与原问题相同。递归的解决这些子问题，然后将各个子问题的解合并得到原问题。</p><h1 id="1-二分搜索法"><a class="markdownIt-Anchor" href="#1-二分搜索法"></a> 1. 二分搜索法</h1><p>最简单的想法是从头找到尾，进行遍历，时间复杂度为O(n)，而利用分治法思想，使用二分搜索法，可以将时间复杂度缩小为O(logn)，但是该方法有一个前提就是，这一个序列必须有序。</p><p><strong>下面代码假设序列是非递减序列</strong></p><ul><li>递归写法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这说明没有数字了,说明没找到,返回-1</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">to</span> <span class="token operator">&lt;</span> from<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 得到from至to中间位置的数字的下标</span>  <span class="token keyword">int</span> midPos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">to</span> <span class="token operator">+</span> from<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 如果找到了该数字,返回数组下标</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>midPos<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> midPos<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>midPos<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果中间的数字比目标值大,说明目标值值在中间值的左边</span>    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> from<span class="token punctuation">,</span> midPos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果中间的数字比目标值大,说明目标值值在中间值的右边</span>    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> midPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>非递归写法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 两个指针指向target存在区域的左右边界,圈定范围</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 得到该范围的中间位置</span>    <span class="token keyword">int</span> midPos <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 说明找到了</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>midPos<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> midPos<span class="token punctuation">;</span>    <span class="token comment">// 如果中间值大,说明目标值在中间值左边,右边界right指针挪到midPos的前一个</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>midPos<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> midPos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 如果中间值大,说明目标值在中间值左边,右边界left指针挪到midPos的后一个</span>    <span class="token keyword">else</span> left <span class="token operator">=</span> midPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 找不到返回-1</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-大整数乘法"><a class="markdownIt-Anchor" href="#2-大整数乘法"></a> 2. 大整数乘法</h1><p>对于乘法，直接使用乘法的运算符会很方便，但是仅限于参加运算的整数能在计算机硬件对整数的表示范围内直接处理时才是合理的。当需要处理很大的整数时，无法在计算机硬件能直接表示的整数范围内进行处理，若用浮点数表示，只能得到近似值，计算结果中的有效位数也会受到限制。</p><p>同时，当XY分3块，4块乃至更多，只会越来越慢。当分两块时，初步版需要4次，改进版需要3次相乘；而分成3块，其初步版就需要9次，想要得到比分成2块改进版的3次更少的乘法次数是不可能的，更何况是16次乘法的分4块初步版。</p><p>同时下图所示的过程有前提条件：</p><ul><li>X,Y都是n位，且n是2的整数次幂，只有这样才能保证每次划分A,B,C,D四个部分位数保持一致</li><li>（A-B），(D-C)这个两个数也需要满足上面这一条要求。因为这两个数相乘也是需要递归使用同一个函数</li></ul><p>然而前提条件很多，实际上在使用时，上面两个条件都很难达到。当落地时，是实现初步版，计算4次乘法。</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95/%E5%A4%A7%E6%95%B4%E6%95%B0%E4%B9%98%E6%B3%95.png" alt="大整数乘法逻辑" /></p><p>这里进行说明，为什么X可以那样表示。</p><p>比如一个十进制数1234，一共4位，按照上面的样子进行划分成左右AB两部分，则1234 = 12 * 10<sup>2</sup> + 34，这里的10其实是进制</p><p>同理，案例中，XY都是二进制，如X = 1101，X = 11 * 2<sup>2</sup> + 01，1101的十进制是13，11的十进制是3，01的十进制是1，X = 3 * 4 + 1 = 13</p><h2 id="21-on2写法"><a class="markdownIt-Anchor" href="#21-on2写法"></a> 2.1 O(n<sup>2</sup>)写法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 因为数字很大,无法用某个整数数据类型表示,需要转换成整型数组,方便处理</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">NumToArr</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  num <span class="token operator">=</span> <span class="token function">fliter</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 倘若传进来的字符串num中有0开头,比如0123,,或者00123,需要将0去掉</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fliter</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> pos0 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pos0 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>pos0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>pos0<span class="token punctuation">)</span><span class="token punctuation">;</span>    pos0 <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// O(n2)的大整数乘法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">LargeIntegerMultiplication</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len1 <span class="token operator">=</span> num1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span> len2 <span class="token operator">=</span> num2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len1 <span class="token operator">*</span> len2<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> p <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理进制</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>      res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 从后向前充填res数组，可能没有填满，导致前几位有0</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从头向后遍历当遇到第一次非0数字后,flag为true</span>  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-分治法版本的on2"><a class="markdownIt-Anchor" href="#22-分治法版本的on2"></a> 2.2 分治法版本的O(n<sup>2</sup>)</h2><h3 id="221-主体"><a class="markdownIt-Anchor" href="#221-主体"></a> 2.2.1 主体</h3><p>这里使用字符串，方便截取获得ABCD</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 大整数乘法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储num1乘num2的结果的数组</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">;</span>  <span class="token comment">// 只要有一个字符串数字长度为1,那么就可以直接相乘了</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 相乘</span>    res <span class="token operator">=</span> <span class="token function">mult</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 因为num1和num2长度不一定相同,假设num1长度为a,num2长度为b,同样分成两部分</span>    <span class="token comment">// num1 = A*10^(a/2) + B</span>    <span class="token comment">// num2 = C*10^(b/2) + D</span>    <span class="token comment">// num1*num2 = AC*10^(a/2+b/2) + BD + AD10^(a/2) + BC*10^(b/2)</span>    <span class="token comment">// 开始截取字符串,得到ABCD</span>    <span class="token keyword">int</span> halfNum1 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> halfNum2 <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token class-name">A</span> <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> halfNum1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">B</span> <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>halfNum1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">C</span> <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> halfNum2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">D</span> <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>halfNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始相乘</span>    <span class="token class-name">String</span> AC <span class="token operator">=</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BD <span class="token operator">=</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    AD <span class="token operator">=</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BC <span class="token operator">=</span> <span class="token function">largeLongMultiply</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 位移,相加并得到最终结果</span>    res <span class="token operator">=</span> <span class="token function">arrAddArr</span><span class="token punctuation">(</span>      <span class="token function">strNumToArr</span><span class="token punctuation">(</span>BD<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">arrAddArr</span><span class="token punctuation">(</span>        <span class="token function">arrAddArr</span><span class="token punctuation">(</span>          <span class="token function">move</span><span class="token punctuation">(</span><span class="token function">strNumToArr</span><span class="token punctuation">(</span>AC<span class="token punctuation">)</span><span class="token punctuation">,</span> halfNum1 <span class="token operator">+</span> halfNum2<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">move</span><span class="token punctuation">(</span><span class="token function">strNumToArr</span><span class="token punctuation">(</span>AD<span class="token punctuation">)</span><span class="token punctuation">,</span> halfNum1<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">move</span><span class="token punctuation">(</span><span class="token function">strNumToArr</span><span class="token punctuation">(</span>BC<span class="token punctuation">)</span><span class="token punctuation">,</span> halfNum2<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理进制</span>  <span class="token function">decimalism</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理首位0,并转成字符串返回</span>  <span class="token keyword">return</span> <span class="token function">arrToStr</span><span class="token punctuation">(</span><span class="token function">filterZero</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/分治法/字符串大整数乘法结果.png" alt="运行结果"><h3 id="222-主体之外的函数"><a class="markdownIt-Anchor" href="#222-主体之外的函数"></a> 2.2.2 主体之外的函数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 只有当str1或者str2的length为1时才会执行这里</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mult</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 将两个字符串变为数组,并且每个元素都是int类型</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 二者进行相乘</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回乘积结果</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 字符串数字变数组</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">strNumToArr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 数组变字符串</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">arrToStr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// arr数组所代表的数字扩大n位</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 两个数组相加</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrAddArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//123,12</span>  <span class="token comment">// 这里还需要长度＋1是因为：900 + 900 = 1800类似这种情况</span>  <span class="token comment">// 另外两个相加的数组的长度不一定一样</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> p <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> dist <span class="token operator">=</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dist <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arr1短</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr2<span class="token punctuation">[</span>i <span class="token operator">-</span> dist<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span>dist <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dist <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arr2短</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i <span class="token operator">+</span> dist<span class="token punctuation">]</span> <span class="token operator">+</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> dist <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理进制</span>  <span class="token function">decimalism</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 再次考虑,当res[0]为0的情况</span>  <span class="token keyword">return</span> <span class="token function">filterZero</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 进制处理</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">decimalism</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 处理进制</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理数组arr首位为0的情况</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">filterZero</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token comment">// 从头遍历arr,当出现第一个不为0的数字后,会变成true</span>  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 用来统计非0数字前面,0的个数</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 倘若还没有遇到第一个不为0的数字,计数+1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 比如[0,0,1,2,3],经过统计k=2,那么最终的finalRes长度应该是3 = arr.length - k</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> finalRes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 开始拷贝的位置下标应该是k</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> finalRes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> finalRes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> finalRes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-strassen矩阵乘法"><a class="markdownIt-Anchor" href="#3-strassen矩阵乘法"></a> 3. Strassen矩阵乘法</h1><p>矩阵乘法，线性代数常见，假设两个矩阵同型AB，都是n×n的矩阵，C = AB，则在计算矩阵C时，C中每个元素都需要进行n次乘法和n-1次加法，最终求出C，n<sup>2</sup>个元素需要的计算时间复杂度是O(n<sup>3</sup>)</p><h2 id="31-on3写法"><a class="markdownIt-Anchor" href="#31-on3写法"></a> 3.1 O(n<sup>3</sup>)写法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 矩阵m1,a行b列;矩阵m2,c行d列</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// m1的行数,m1的列数</span>  <span class="token keyword">int</span> m1Col <span class="token operator">=</span> m1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> m1Row <span class="token operator">=</span> m1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// m2的行数,m2的列数</span>  <span class="token keyword">int</span> m2Col <span class="token operator">=</span> m1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> m2Row <span class="token operator">=</span> m2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 检查矩阵相乘的条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>m1Row <span class="token operator">!=</span> m2Col<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"矩阵无法相乘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 新建一个存储结果的矩阵</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m1Col<span class="token punctuation">]</span><span class="token punctuation">[</span>m2Row<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历m1的第i行</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m1Col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历m2的第j列</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m2Row<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 遍历m2的第k行</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m2Col<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> m1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> m2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-分治思想"><a class="markdownIt-Anchor" href="#32-分治思想"></a> 3.2 分治思想</h2><p>假设条件：</p><ul><li>两个矩阵都是n×n</li><li>n都是2的幂</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/分治法/Strassen.png" alt="Strassen"><h1 id="4-棋盘覆盖"><a class="markdownIt-Anchor" href="#4-棋盘覆盖"></a> 4. 棋盘覆盖</h1><h1 id="5-合并排序"><a class="markdownIt-Anchor" href="#5-合并排序"></a> 5. 合并排序</h1><p>其实就是归并排序，相关代码可以查看<a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a></p><h1 id="6-快速排序"><a class="markdownIt-Anchor" href="#6-快速排序"></a> 6. 快速排序</h1><p>相关代码可以查看<a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a></p><p>快速排序的运行时间与每次划分是否对称有关，划分的最坏情况就是一边1个元素，另一边n-1的元素，当每次都划分对称的时候，时间复杂度是O(nlogn)，当每次划分都最坏的时候，时间复杂度是O(n<sup>2</sup>)，在<a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a>提到，对于快速排序来说，越有序越慢，因为越有序，每次划分出现最坏情况的可能性就越大。</p><p>为了尽可能每次划分都较为对称，可以采用随机选择策略的快速排序算法。快速排序对于基准的选择都是待排序序列的第一个元素，随机选择意思就是说，在进行快速排序之前，先从序列中随机挑一个元素与序列首位进行位置交换，这样快排时的基准就是随机的了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实现随机选择基准</span><span class="token comment">// (int)(Math.random()*(high - low + 1))范围：[0,high - low + 1)</span><span class="token comment">// (int)(Math.random()*(high - low + 1)) + low范围：[low,high + 1)，即[low, high]</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">RandomizedPartition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// i是从low-high随机挑选出来的下标</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> low<span class="token punctuation">;</span>  <span class="token comment">// 将i位置的元素与待排序范围的首位进行交换</span>  <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">QSort_Partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 快速排序</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">QSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> piovtpos <span class="token operator">=</span> <span class="token class-name">RandomizedPartition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排左边</span>    <span class="token class-name">QSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> piovtpos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排右边</span>    <span class="token class-name">QSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> piovtpos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 一趟快速排序</span><span class="token comment">// 参数1：数组,参数2：数组的起始位置,参数3：数组的终了位置,闭区间</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">QSort_Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 指定基准</span>  <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> base<span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>  <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-线性时间选择"><a class="markdownIt-Anchor" href="#7-线性时间选择"></a> 7. 线性时间选择</h1><p>给定一串数字，从中选出第k小，时间复杂度要求是O(n)，即线性时间选择。</p><h2 id="71-利用堆排序获得第k小"><a class="markdownIt-Anchor" href="#71-利用堆排序获得第k小"></a> 7.1 利用堆排序获得第k小</h2><p>易知，倘若要知道第k小的关键字，那么只需要利用小根堆，进行k次堆调整，即可得到第k小的关键字。</p><p>其中adjustHeap函数的代码可见<a href="/%E6%8E%92%E5%BA%8F/" title="排序">排序</a>，其中adjustHeap函数是调整成大根堆，只需要将循环中两个if判断条件中的小于号改成大于号，即可实现调整为小根堆的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">heapSortFindK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储arr,目的是堆排序过程中不改变原数组</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 首先构建小根堆</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//从第一个非叶子结点从下至上，从右至左调整结构</span>    <span class="token function">adjustHeap</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 经过上一步可以得到小根堆,现在开始排序</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> len <span class="token operator">-</span> k<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//将堆顶元素与末尾元素进行交换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重新对堆进行调整</span>    <span class="token function">adjustHeap</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> temp<span class="token punctuation">[</span>len <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="72-利用快速排序获得第k小"><a class="markdownIt-Anchor" href="#72-利用快速排序获得第k小"></a> 7.2 利用快速排序获得第k小</h2><p>每一次快排都会选则一个基准，将其排到它的最终位置，而第k小在排好序的序列中排在第k位。所以，可以通过比较每次快排后基准的最终位置与k，来获取第k小</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">QSortFindK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 首先,一趟快速排序,确定一个关键字的最终位置</span>  <span class="token keyword">int</span> piovtpos <span class="token operator">=</span> <span class="token class-name">QSort_Partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 易知，为了使快速排序的效率变高，可以利用上述随机策略法。</span>  <span class="token comment">// int piovtpos = RandomizedPartition(arr, start, end);</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>piovtpos <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> k<span class="token punctuation">)</span>    <span class="token comment">// 倘若该数字正好是第k小</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>piovtpos<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>piovtpos <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 说明目标在该数字的左边</span>    <span class="token keyword">return</span> <span class="token class-name">QSortFindK</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> start<span class="token punctuation">,</span> piovtpos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token class-name">QSortFindK</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> piovtpos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-最接近点对问题"><a class="markdownIt-Anchor" href="#8-最接近点对问题"></a> 8. 最接近点对问题</h1><p>平面中有n个点，求出哪两个点之间的距离是最短的。很容易想到O(n<sup>2</sup>)的写法，倘若利用分治法，可以将时间复杂度降低为O(nlog<sub>2</sub>n)</p><h1 id="9-循环赛日程表"><a class="markdownIt-Anchor" href="#9-循环赛日程表"></a> 9. 循环赛日程表</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 算法设计与分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 分治法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径</title>
      <link href="%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-迪杰斯特拉dijkstra算法详解"><a class="markdownIt-Anchor" href="#1-迪杰斯特拉dijkstra算法详解"></a> 1. 迪杰斯特拉Dijkstra算法详解</h1><h2 id="11-完整代码"><a class="markdownIt-Anchor" href="#11-完整代码"></a> 1.1 完整代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 当起点无法达到该点时,路径长度是无穷大,这里用整型最大值代替</span>  <span class="token keyword">int</span> MAXDIST <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>  <span class="token keyword">int</span> vertexNum <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">/* * 1. Dijkstra算法需要三个辅助数组 **/</span>  <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>vertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>vertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>vertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* * 2. 初始化 **/</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MAXDIST<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// start起点默认已经被访问</span>  isVisited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// start没有前驱结点,因为它是开始的位置</span>  path<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/* * 3. 迪杰斯特拉算法核心 **/</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 存储最短路径</span>    <span class="token keyword">int</span> minPath <span class="token operator">=</span> MAXDIST<span class="token punctuation">;</span>    <span class="token comment">// 存储距离最小的点的数组下标</span>    <span class="token comment">// 倘若这里minIndex不赋初始值,在后面isVisited[minIndex] = true会报错</span>    <span class="token comment">// 因为后面的循环找最小值可能找不到</span>    <span class="token keyword">int</span> minIndex <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token comment">// 这个循环目的是:从未访问的节点中找到路径最短的那个</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 倘若这个节点没有访问,并且该点小于最短路径</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minPath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        minPath <span class="token operator">=</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> start<span class="token punctuation">)</span> isVisited<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> MAXDIST           <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>           <span class="token operator">&amp;&amp;</span> minIndex <span class="token operator">!=</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        path<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> minIndex<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-分段解读"><a class="markdownIt-Anchor" href="#12-分段解读"></a> 1.2 分段解读</h2><h3 id="121-完整过程图示"><a class="markdownIt-Anchor" href="#121-完整过程图示"></a> 1.2.1  完整过程图示</h3><img data-src="http://resource.silverbeats.cn/static/images/算法/最短路径/Dijkstra_完整示例.png" alt="完整过程图示"><h3 id="122-辅助数组说明"><a class="markdownIt-Anchor" href="#122-辅助数组说明"></a> 1.2.2 辅助数组说明</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用来记录每个节点是否被访问</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>vertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 用来存储到达某个点最短路径的前一个节点下标</span><span class="token comment">// 比如上图第1次循环,到达顶点4的最短路径是0-2-4,那么path[4]存放下标2</span><span class="token comment">// 这个数组的每个值会不断变动</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>vertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 存放到某个顶点的最短路径长度</span><span class="token comment">// 比如顶点4,dist[4]从8,最后修改成7,这个数组的每个值会不断变动</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>vertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="123-初始化说明"><a class="markdownIt-Anchor" href="#123-初始化说明"></a> 1.2.3 初始化说明</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 这一步其实可以不用,声明boolean数组时默认就是false</span>  <span class="token comment">// isVisited[i] = false;</span>  <span class="token comment">// start点到i有路径,这里面包含了start自己到自己</span>  <span class="token comment">// path[start]=start,这是不对的,start没有前驱节点,应该存-1,循环结束之后会做处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MAXDIST<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> start<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 没有前驱节点的意思,当前以start为起点,到不了i这个点</span>    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// start起点默认已经被访问</span>isVisited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// start没有前驱结点,因为它是开始的位置</span>path<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="124-算法核心说明"><a class="markdownIt-Anchor" href="#124-算法核心说明"></a> 1.2.4 算法核心说明</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存储最短路径</span>  <span class="token keyword">int</span> minPath <span class="token operator">=</span> MAXDIST<span class="token punctuation">;</span>  <span class="token comment">// 存储距离最小的点的数组下标</span>  <span class="token comment">// 倘若这里minIndex不赋初始值,在后面isVisited[minIndex] = true会报错</span>  <span class="token comment">// 因为后面的循环找最小值可能找不到</span>  <span class="token keyword">int</span> minIndex <span class="token operator">=</span> start<span class="token punctuation">;</span>  <span class="token comment">// 这个循环目的是:从未访问的节点中找到路径最短的那个</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 倘若这个节点没有访问,并且该点小于最短路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minPath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      minPath <span class="token operator">=</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> start<span class="token punctuation">)</span> isVisited<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> MAXDIST         <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>         <span class="token operator">&amp;&amp;</span> minIndex <span class="token operator">!=</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      path<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> minIndex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内层循环第一个for比较简单，目的是找到一个点，该点满足：①未被访问，②有路径能访问，③到达改点路径值最小</p><p>内层循环第二个详解见下图：</p><img data-src="http://resource.silverbeats.cn/static/images/算法/最短路径/Dijkstra_for_0.png"><img data-src="http://resource.silverbeats.cn/static/images/算法/最短路径/Dijkstra_for_01.png"><img data-src="http://resource.silverbeats.cn/static/images/算法/最短路径/Dijkstra_for_02.png"><img data-src="http://resource.silverbeats.cn/static/images/算法/最短路径/Dijkstra_for_03.png"><blockquote><p>❥(^_-)Tip：</p><p>当你使用某个数据类型的最大值作为无穷大，表示无该路径时，需要注意dist[minIndex] + graph[minIndex][j] &lt; dist[j]，倘若graph[minIndex][j]是无穷大，再加上一个数字后，会超出该类型的表示范围，变成一个负数，从而达成这个判断条件，执行if代码块中语句。这并不是我们想要的。所以需要在if中需要添加graph[minIndex][j] != MAXDIST这句话，避免上述情况发生</p></blockquote><h2 id="13-思考"><a class="markdownIt-Anchor" href="#13-思考"></a> 1.3 思考</h2><p>首先，迪杰斯特拉算法能解决单源并且没有负权值边的最短路径问题，那么倘若出现负权值边，该算法不能求解出最短路径的原因是什么</p><h3 id="131-尝试一下"><a class="markdownIt-Anchor" href="#131-尝试一下"></a> 1.3.1 尝试一下</h3><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/Dijkstra_try_0.png" alt="" /></p><p>当把1-&gt;2的权值改为-3后，继续走一遍之前的代码，就可以发现问题。</p><p>当i = 1时，即第二次循环，此时的minIndex为1，当j = 2时，根据if条件，因为isVisited[2]是之前访问过的点，所以不会执行if语句块中的代码，即便<code>dist[minIndex] + graph[minIndex][j] &lt; dist[j]，5 + (-3) &lt; 3</code></p><p>那么倘若if中没有<code>!isVisited[j]</code>这个判断是否就可以了呢？</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/Dijkstra_try_tempRes.png" alt="删除isVisited[j]之后执行的结果" /></p><p>根据上图，可以看到path数组是没有问题的，但是问题出在了dist[4]上。dist[4]应该为6，但却是7，这里是因为什么原因导致的？</p><p>手动模拟一遍过程后不难发现，i=0的第一次循环修改了dist[4]和path[4]；在i=1的第二次循环，到达节点2的最短路径发生变化，但是没有任何的机会去修改以2为前驱的点的dist数组。</p><p>所以在第二个for循环中再添加一个循环，倘若某个点x的最短路径发生变化，去找以x为前驱的其他点y，看看y这个点的最短路径有没有因为x的变化而缩短。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> MAXDIST <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> minIndex <span class="token operator">!=</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    path<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> minIndex<span class="token punctuation">;</span>    <span class="token comment">// 在遍历一遍path数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果path数组的某个点的前驱节点正好是修改长度的点的话</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> j <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后的结果就没有问题了：<img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/Dijkstra_try_res.png" alt="" /></p><h1 id="2-弗洛伊德floyd算法详解"><a class="markdownIt-Anchor" href="#2-弗洛伊德floyd算法详解"></a> 2. 弗洛伊德Floyd算法详解</h1><p>其实倘若涉及到负权值，会选择用Floyd算法，而且，更为强大的是，Floyd能够求出各个顶点到其他点的最短距离。</p><p>我不能呼吸了……= =</p><h2 id="21-完整代码"><a class="markdownIt-Anchor" href="#21-完整代码"></a> 2.1 完整代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Floyd</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> vertexNum <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// path数组,用来存储路径</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>vertexNum<span class="token punctuation">]</span><span class="token punctuation">[</span>vertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 初始化</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">||</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/最短路径/Floyd.png" alt="佛洛依德算法结果"><p>举例：顶点0到4的最短路径</p><p>graph(0,4)的数字是6，说明最短路径长度是6，那么该怎么走呢。这是需要看path数组</p><p>path(0,4)为2，说明想要到顶点4需要经过顶点2，路径0-&gt;2-&gt;4，此时再看path(0,2)为1，说明想要从0到2需要经过顶点1，路径变为0-&gt;1-&gt;2-&gt;4</p><p>关于代码的详细描述过程，见文章：<a href="https://www.cnblogs.com/wangyuliang/p/9216365.html">Floyd-傻子也能看懂的弗洛伊德算法（转）</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路径 </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> Floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo相关命令语法</title>
      <link href="hexo%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/"/>
      <url>hexo%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-相关命令"><a class="markdownIt-Anchor" href="#1-相关命令"></a> 1. 相关命令</h1><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#初始化一个hexo博客</span>hexo init blog<span class="token comment">#创建新页面</span>hexo new page 页面名<span class="token comment">#清理之前生成的旧文件</span>hexo clean<span class="token comment">#重新生成静态文件 下面是简写</span>hexo generatehexo g<span class="token comment">#本地预览 下面是简写</span>hexo serverhexo s<span class="token comment">#合并写法</span>hexo clean <span class="token punctuation">|</span> hexo g <span class="token punctuation">|</span> hexo s<span class="token comment">#通过git提交到仓库,需要配置hexo项目的_config.yml文件</span>hexo deployhexo d<span class="token comment">#当安装七牛云同步插件后,可以通过如下命令将hexo根目录下的static文件夹同步到七牛云</span>hexo qiniu sync<span class="token comment">#或者</span>hexo qiniu s<span class="token comment">#或者</span>hexo qiniu sync2<span class="token comment">#或者</span>hexo qiniu s2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-引用站内文章"><a class="markdownIt-Anchor" href="#2-引用站内文章"></a> 2. 引用站内文章</h1><pre class="line-numbers language-none"><code class="language-none">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-引用图片"><a class="markdownIt-Anchor" href="#3-引用图片"></a> 3. 引用图片</h1><h2 id="31-引用七牛云图片"><a class="markdownIt-Anchor" href="#31-引用七牛云图片"></a> 3.1 引用七牛云图片</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% qnimg 图片.格式 alt:这是图片 title:这是图片 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过这种方式引用图片，还是相当于本地存储，之后引用的图片会出现在需要上传的public目录中，还是会占用空间。</p><h2 id="32-引用本地图片"><a class="markdownIt-Anchor" href="#32-引用本地图片"></a> 3.2 引用本地图片</h2><p>倘若hexo项目的配置文件中将<code>post_asset_folder</code>设置为<code>true</code>，可以通过以下方式来引入图片，需要将example放入<code>source/_post</code>下的文章同名文件夹下。</p><pre class="line-numbers language-none"><code class="language-none">&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125;&#123;% asset_img example.jpg This is an example image %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="%E6%8E%92%E5%BA%8F/"/>
      <url>%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-插入排序"><a class="markdownIt-Anchor" href="#1-插入排序"></a> 1. 插入排序</h1><h2 id="11-直接插入排序"><a class="markdownIt-Anchor" href="#11-直接插入排序"></a> 1.1 直接插入排序</h2><p>直接插入排序，思想较为简单。</p><p>可以类比平常打扑克抓牌的过程。每次抓一张牌时，都会将这张牌与之前手里的牌（之前手里的牌是有序的）进行比较（从左向右比，或者从右向左比），得到一个最终的插入位置，然后插入。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 直接插入排序, 假定前面是有序的，从乱序的后面取一个数插入有序的前面</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 进行插入排序</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 交换</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/insertSort_process.png"><p>上面的代码可以再简化一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 直接插入排序, 假定前面是有序的，从乱序的后面取一个数插入有序的前面</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 进行插入排序</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-折半插入排序"><a class="markdownIt-Anchor" href="#12-折半插入排序"></a> 1.2 折半插入排序</h2><p>直接插入排序确定位置是通过将待排序的元素，与前面有序的序列一个个比较过去，从而得到最终的插入位置。那么，因为是顺序存储，利用数组实现排序，可以对前面的有序序列使用折半查找来确定最终插入位置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binaryInsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// low high mid用于折半查找</span>  <span class="token keyword">int</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    high <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// (high+low)/2 这样的写法可能会超出int的表示范围</span>      mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>        high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// high + 1就是插入的位置</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 找到插入位置后,对元素进行挪动</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> high<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>      arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将待排序的元素插入找到的位置</span>    arr<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-希尔排序"><a class="markdownIt-Anchor" href="#13-希尔排序"></a> 1.3 希尔排序</h2><p>希尔排序又称为缩小增量排序，当增量为1时，其实就是直接插入排序。增量的选取一般两种方案：</p><ul><li>希尔提出，对数组长度不断折半。比如数组长度是32，则增量dk分别是：16,8,4,2,1</li><li>帕佩尔诺夫和斯塔舍维奇提出，dk = 2<sup>k</sup> + 1，dk &lt; 数组长度，k ≥ 0。比如数组长度是32，此时k 只能从4开始，则k = 4，dk = 17；k = 3，dk = 9；k = 2，dk = 5；k = 1，dk = 3；此时还需要额外添加dk = 1，算是一个兜底作用。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 希尔排序</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token keyword">int</span> dk <span class="token operator">=</span> len <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>dk <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">shell_InsertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> dk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// shell_BinaryInsertSort(arr, dk);</span>    dk <span class="token operator">=</span> dk <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**  * @Title: shell_InsertSort  * @Description: 希尔排序，直接插入法进行排序  * @param ar: 数组  * @param dk: 间隔  * @return: void  */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">shell_InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> dk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> dk<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> dk<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j <span class="token operator">-=</span> dk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">[</span>j <span class="token operator">+</span> dk<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/**  * @Title: shell_BinaryInsertSort  * @Description: 希尔排序，折半插入法进行排序  * @param arr: 数组  * @param dk: 间隔  * @return: void  */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">shell_BinaryInsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> dk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> high<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> dk<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    low <span class="token operator">=</span> i <span class="token operator">%</span> dk<span class="token punctuation">;</span>    high <span class="token operator">=</span> i <span class="token operator">-</span> dk<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        low <span class="token operator">=</span> mid <span class="token operator">+</span> dk<span class="token punctuation">;</span>      <span class="token keyword">else</span>        high <span class="token operator">=</span> mid <span class="token operator">-</span> dk<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// high + dk 即为插入的位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> dk<span class="token punctuation">;</span> j <span class="token operator">></span> high<span class="token punctuation">;</span> j <span class="token operator">-=</span> dk<span class="token punctuation">)</span>      arr<span class="token punctuation">[</span>j <span class="token operator">+</span> dk<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>high <span class="token operator">+</span> dk<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>后面那个通过折半插入法进行排序纯属练手，效率远远不及直接插入法希尔排序</p><p>前者，规模1W，20次，19ms</p><p>前者，规模10W，20次，187ms</p><p>后者，规模1W，20次，129ms</p><p>后者，规模10W，20次，10761ms</p><p>估计是在dk较小的时候，序列基本有序，折半插入的话是不管有没有序都得比较那么多次，而直接插入是越有序越快。</p></blockquote><h1 id="2-选择排序"><a class="markdownIt-Anchor" href="#2-选择排序"></a> 2. 选择排序</h1><h2 id="21-堆排序"><a class="markdownIt-Anchor" href="#21-堆排序"></a> 2.1 堆排序</h2><p>堆又分大根堆和小根堆，倘若要升序，选择大根堆，倘若要降序，选择小根堆。</p><p>大根堆：根节点的数字不小于左右孩子的值</p><p>小根堆：根节点的值不大于左右孩子的值</p><p>堆排序是把一个数组，看做是一颗完全二叉树，排序步骤：</p><ul><li>先对乱序的数组建立大根堆，可以得到数组的第一个元素（看做完全二叉树的话就是根节点）就是最大的</li><li>将其与数组最后面的那个值交换，然后重新调整，变为大根堆</li><li>依次类推</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 堆排序</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 首先构建大根堆</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//从第一个非叶子结点从下至上，从右至左调整结构</span>    <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 经过上一步可以得到大根堆,现在开始排序</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//将堆顶元素与末尾元素进行交换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重新对堆进行调整</span>    <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调整为大根堆</span><span class="token comment">// arr是要调整的数组, i是要调整的数组下标, length是调整的范围</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjustHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 临时存储被调整的数组数据</span>  <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// pos是被调整元素的数组下标, 2*pos+1 是其左孩子 2*pos + 2是其右孩子</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    前面的判断条件保证它的右孩子是无序的,    在堆排序过程中会将最大值不断放到后面, length就是限制条件,可以通过这个条件让有序的右孩子不被波及    这个if保证i的下标对应的值是两个孩子中最大的那一个    */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果根节点小于它的孩子,则交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 交换根节点和它孩子的值</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 因为经过了调整,当被调整的节点挪了位置,可能会导致后面的序列出问题,所以需要让pos定到i这个位置</span>      pos <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-简单选择排序"><a class="markdownIt-Anchor" href="#22-简单选择排序"></a> 2.2 简单选择排序</h2><p>思路简单：每次选择最大排到后面，或者每次选择最小的排到最前面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 每次过滤一遍数组将最小值放到前面</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> min<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    min <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 假定第i个位置最小</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是另外一种做法，是每次将最小的放到最前面，最大的放到最后面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectSort_2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 每次过滤一遍数组将最小值放到前面</span>  <span class="token comment">// 将最大的数字放到最后面</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> lastPos<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    min <span class="token operator">=</span> max <span class="token operator">=</span> i<span class="token punctuation">;</span>    lastPos <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> lastPos<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span>        max <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastPos <span class="token operator">!=</span> max<span class="token punctuation">)</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max<span class="token punctuation">,</span> lastPos<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>前者，规模10W，20次，54408ms，2720ms/次</p><p>后者，规模10W，20次，53938ms，2697ms/次</p><p>呵呵……</p></blockquote><p>简单选择排序有两个版本，一种是如同上面的两种写法一样，将最大值（最小值）与序列最后（第一）个进行调换位置，这个版本成为<mark>交换版</mark></p><p>另一种版本是将最大值（最小值）插入到序列的最后（最前）面，成为插入版。</p><p>区别在于：</p><ul><li>交换版不稳定，插入版稳定</li><li>倘若序列顺序存储，插入版会涉及到大批量的元素挪动，不如交换版来的划算</li><li>倘若序列是链式存储，插入版会划算一些</li></ul><h1 id="3-交换排序"><a class="markdownIt-Anchor" href="#3-交换排序"></a> 3. 交换排序</h1><h2 id="31-冒泡排序"><a class="markdownIt-Anchor" href="#31-冒泡排序"></a> 3.1 冒泡排序</h2><p>冒泡排序很经典，每次排序都能讲最大的数字排到最后，或者将最小的数字排到最前面</p><blockquote><p>听说冒泡是毒瘤，比较次数和交换次数超级多</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 倘若内循环没有进行交换,则整个序列有序,会直接终止整个排序,是一个优化的地方</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续发挥，双向冒泡</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 双向冒泡</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubble2Ways</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 从左往右将最大的数字挪到最右边</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 挪到结束后right--</span>    <span class="token operator">--</span>right<span class="token punctuation">;</span>    <span class="token comment">// 从右往左将最小的数字挪到最左边</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">++</span>left<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>前者，规模1W，20次，1362ms，68ms/次</p><p>后者，规模1W，20次，1445ms，72ms/次</p><p>前者，规模10W，20次，303042ms，5min，15152ms/次</p><p>后者，规模10W，20次，202945ms，3min23s，10147ms/次</p><p>……还是有点提高的</p></blockquote><h2 id="32-快速排序"><a class="markdownIt-Anchor" href="#32-快速排序"></a> 3.2 快速排序</h2><p>利用分而治之的思想。每一次快速排序会实现这样的结果：</p><ul><li>该数字的左边都比它小</li><li>该数字的右边都不小于它</li><li>每一次排序都会确定一个数的最终位置</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 快速排序</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">QSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> piovtpos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token class-name">QSort_Partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排左边</span>    <span class="token class-name">QSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> piovtpos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排右边</span>    <span class="token class-name">QSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> piovtpos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 一趟快速排序</span><span class="token comment">// 参数1：数组,参数2：数组的起始位置,参数3：数组的终了位置,闭区间</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">QSort_Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 指定基准</span>  <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> base<span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>  <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>平均时间复杂度为nlogn的算法中，如：堆排序，快速排序，希尔排序，归并排序中，快速排序前面系数最小</p><p>规模1W，20次，15ms</p><p>规模10W，20次，359ms</p><p>快速排序有其特点：<mark>越有序越慢，越无序越快</mark></p></blockquote><h1 id="4-二路归并排序"><a class="markdownIt-Anchor" href="#4-二路归并排序"></a> 4. 二路归并排序</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Title: mergeSort * @Description: 归并排序 * @param arr: int类型数组 * @return: void */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> leftStart<span class="token punctuation">,</span> <span class="token keyword">int</span> rightBound<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>leftStart <span class="token operator">==</span> rightBound<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>leftStart <span class="token operator">></span> rightBound <span class="token operator">||</span> leftStart <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> rightBound <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> mid <span class="token operator">=</span> leftStart <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rightBound <span class="token operator">-</span> leftStart<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>leftStart<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>rightBound<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> leftStart<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> rightBound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @Title: merge * @Description:一次归并,将两个有序的数组合并，仍有序 * @param arr 数组 * @param leftStart 第一个数组的左边界开始的位置 * @param rightStart 第二个数组的左边界开始的位置 * @param rightBound 第二个数组的右边界结束的位置 * @return: void */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> leftStart<span class="token punctuation">,</span> <span class="token keyword">int</span> rightStart<span class="token punctuation">,</span> <span class="token keyword">int</span> rightBound<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 合并思想：新建一个数组，每次将小的数字放到新建的数组中</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> leftStart<span class="token punctuation">,</span> j <span class="token operator">=</span> rightStart<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>rightBound <span class="token operator">-</span> leftStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> rightStart <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span> rightBound<span class="token punctuation">)</span>    tempArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">?</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">:</span>arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 倘若还有剩余</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> rightStart<span class="token punctuation">)</span>    tempArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> rightBound<span class="token punctuation">)</span>    tempArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 此时tempArr就是合并好有序的数组，对原始数组进行覆盖</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> leftStart<span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> rightBound<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> tempArr<span class="token punctuation">[</span>p <span class="token operator">-</span> leftStart<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 对原数组进行覆盖可以使用System.arraycopy,可以提高效率</span>  <span class="token comment">/*  if (i &lt; rightStart) &#123;    System.arraycopy(arr, i, tempArr, k, rightStart - i);    k += (rightStart - i);  &#125;  if (j &lt;= rightBound) &#123;    System.arraycopy(arr, j, tempArr, k, rightBound - j + 1);  &#125;  System.arraycopy(tempArr, 0, arr, leftStart, tempArr.length); */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>规模1W，20次，32ms</p><p>规模10W，20次，241ms</p></blockquote><h1 id="5-桶排序"><a class="markdownIt-Anchor" href="#5-桶排序"></a> 5. 桶排序</h1><h2 id="51-基数排序"><a class="markdownIt-Anchor" href="#51-基数排序"></a> 5.1 基数排序</h2><h3 id="511-完整代码只适用于非负数"><a class="markdownIt-Anchor" href="#511-完整代码只适用于非负数"></a> 5.1.1 完整代码（只适用于非负数）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 基数排序</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span> arrMax <span class="token operator">=</span> <span class="token function">getMinMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 从个位开始,对数组进行排序</span>  <span class="token comment">// exp = 1, 按照个位</span>  <span class="token comment">// exp = 10, 按照十位</span>  <span class="token comment">// exp = 100, 按照百位</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> arrMax <span class="token operator">/</span> exp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> exp <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// 存储被排序数组的临时数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 桶,因为不管是什么数字,个数十位不管是哪一位,都是0-9，所以桶数组的长度是10</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将数据出现的次数进行统计</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 转为累加数组。目的是让更改后的buckets[i]的值，是该数据在output中的位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> buckets<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将数据存储到临时数组output中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      output<span class="token punctuation">[</span>buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将排序好的数组赋值给arr</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="512-分段说明"><a class="markdownIt-Anchor" href="#512-分段说明"></a> 5.1.2 分段说明</h3><p><mark><strong>分段说明举例说明的乱序数组为：{53, 3, 542, 748, 14, 214, 154, 63, 616}，为了更好的说明过程，for循环的说明将会以个位排序，演示整个过程</strong></mark></p><h4 id="5121-外层循环"><a class="markdownIt-Anchor" href="#5121-外层循环"></a> 5.1.2.1 外层循环</h4><p>arrMax是整个数组中最大的数字，同时也是位数最多的那个数字，比如arrMax是748，那么需要进行3次循环，分别对整个数组的个位，十位，百位来进行排序，故，外层循环的次数是由arrMax的位数来决定的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> arrMax <span class="token operator">/</span> exp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> exp <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>……   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>exp  =  1，arrMax = 748/1  = 748&gt; 0，对个位进行排序</li><li>exp = 10，arrMax = 748/10  = 74 &gt; 0，对十位进行排序</li><li>exp = 100，arrMax = 748/100  = 8 &gt; 0，对百位进行排序</li><li>exp = 1000，arrMax = 748/1000  = 0 &gt; 0，false，中止外层循环</li></ul><h4 id="5122-内部循环两个辅助数组的作用"><a class="markdownIt-Anchor" href="#5122-内部循环两个辅助数组的作用"></a> 5.1.2.2 内部循环两个辅助数组的作用</h4><p>首先，先来看一下，我们熟知的基数排序的过程：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B.png" alt="基数排序过程" /></p><p>很清楚能知道，其中一个辅助数组为buckets长度为10，即为上面的桶。但问题是，模拟的时候，是将每个数字放入桶中，然后取出的顺序是放入的先后顺序一致，颇有一种每个桶里面放的都是一个队列，先进先出，这样想倒是很符合，很自然，可以声明一个Object[]数组，之后每个位置存储一个队列，队列不需要自己实现，可以使用java.util包下的Queue实现类，之后操作就比较简单了，完全就和手动模拟的过程是一致的。（倘若用C语言，这样想能恶心死你= =）</p><p>但上面这种考虑虽然简单，但空间复杂度肯定是小不了的，这里给出的是另外一种比较巧妙的解决方案。可见后面更为详细的过程图。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 存储被排序数组的临时数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 桶,因为不管是什么数字,个数十位不管是哪一位,都是0-9，所以桶数组的长度是10</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5123-内部四for第一for-将数据出现的次数进行统计"><a class="markdownIt-Anchor" href="#5123-内部四for第一for-将数据出现的次数进行统计"></a> 5.1.2.3 内部四for第一for: 将数据出现的次数进行统计</h4><p><code>(arr[i]/exp)%10</code>的目的是要获得目标位置的数字。</p><p>首先，将需要的那一位变为个位，比如214，想要取得十位1，此时的exp = 10，先要除exp，得到21，这样想要的十位数字1就挪到了个位，之后让21 % 10，即可得到想要的十位数字1</p><p>这里的for循环其实目的是统计每个数字的exp位（exp = 1 表示每个数字的个位，exp = 10 表示每个数字的十位……）出现的次数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>以个排序演示完整过程，出现次数：为待排序数组，每个数字的个位出现的次数</strong></p><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第一for.png" alt="基数排序_分段说明第一for" style="zoom:67%;" /><h4 id="5124-内部四for第二for-转为累加数组"><a class="markdownIt-Anchor" href="#5124-内部四for第二for-转为累加数组"></a> 5.1.2.4 内部四for第二for: 转为累加数组</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 转为累加数组。目的是让更改后的buckets[i]的值，是该数据在output中的位置</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> buckets<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第二for.png" alt="基数排序_分段说明第二for.png"><p>这个累加数组中的值，就代表了每个数字最终应该存储的位置。比如53这个数字，当按照个位排完序，应该在哪里？</p><p>首先，我们应该能想到应该要遍历待排序数组，然后按照某种规则放入用来临时存储的output数组中。那么问题来了，应该正向遍历，还是逆向遍历？</p><p>假设是正向遍历，遍历到每个数字都需要考虑一些问题：</p><ul><li>有多少个数字在我前面</li><li>和我拥有相同的个位，有多少个，还有多少个没有被安排进临时数组</li><li>比如，第一个数字53，首先，获取53的个位数字3，对应到buckets数组中发现buckets[3] = 4，说明最后一个个位为3的数字应该排在第四个。通过buckets[2] = 1，说明能排在个位3前面的数字只有1个，能推出，在最后的排序结果中，以3为个位的数字应该排在序列的第2,3,4位置。问题来了，如何确定到底是那个位置，同时还要保证相同个位的数字之间相对位置不变。</li></ul><p>假设是逆序，它天然就能保证在最终结果序列中，相同个位之间相对顺序不变。比如063。</p><ul><li>buckets[3] = 4，让063排第4位，buckets[3] = 3</li><li>buckets[3] = 3，让003排第3位，buckets[3] = 2</li><li>buckets[2] = 2，让053排第2位，buckets[3] = 1</li></ul><p>这个逻辑写起来就会很轻松。</p><h4 id="5125-内部四for第三for-将数据存储到临时数组output中"><a class="markdownIt-Anchor" href="#5125-内部四for第三for-将数据存储到临时数组output中"></a> 5.1.2.5 内部四for第三for: 将数据存储到临时数组output中</h4><p>这里是整个排序中最不好懂的一部分。但是当你看到上面的说明，这里就会比较容易去理解。为了方便理解，将源代码中的两行代码拆分。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">// 将数据存储到临时数组output中</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取这个数字的exp位</span>  <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 对应到buckets数组</span>  <span class="token keyword">int</span> b <span class="token operator">=</span> buckets<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 数组下标从0开始,需要减1,才是arr[i]应该存储的地方</span>  output<span class="token punctuation">[</span><span class="token operator">--</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 让桶的数字自减</span>  buckets<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">//output[buckets[(arr[i] / exp) % 10] - 1] = arr[i];</span>  <span class="token comment">//buckets[(arr[i] / exp) % 10]--;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第1次：616，获取个位6，buckets[6] = 8，需要减1才是存放处，output[8 - 1] = 616，桶的数字减1，buckets[6] = 7</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_01.png" alt="基数排序_分段说明第三for_01"><ul><li>第2次：063，获取个位3，buckets[3] = 4，需要减1才是存放处，output[4 - 1] = 063，桶的数字减1，buckets[3] = 3</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_02.png" alt="基数排序_分段说明第三for_02"><ul><li>第3次：154，获取个位4，buckets[4] = 7，需要减1才是存放处，output[7 - 1] = 154，桶的数字减1，buckets[4] = 6</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_03.png" alt="基数排序_分段说明第三for_03"><ul><li>第4次：214，获取个位4，buckets[4] = 6，需要减1才是存放处，output[6 - 1] = 124，桶的数字减1，buckets[4] = 5</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_04.png" alt="基数排序_分段说明第三for_04"><ul><li>第5次：014，获取个位4，buckets[4] = 5，需要减1才是存放处，output[5 - 1] = 014，桶的数字减1，buckets[4] = 4</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_05.png" alt="基数排序_分段说明第三for_05"><ul><li>第6次：748，获取个位8，buckets[8] = 9，需要减1才是存放处，output[9 - 1] = 748，桶的数字减1，buckets[8] = 8</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_06.png" alt="基数排序_分段说明第三for_06"><ul><li>第7次：542，获取个位2，buckets[2] = 1，需要减1才是存放处，output[1 - 1] = 542，桶的数字减1，buckets[2] = 0</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_07.png" alt="基数排序_分段说明第三for_07"><ul><li>第8次：003，获取个位3，buckets[3] = 3，需要减1才是存放处，output[3 - 1] = 003，桶的数字减1，buckets[3] = 2</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_08.png" alt="基数排序_分段说明第三for_08"><ul><li>第9次：053，获取个位3，buckets[3] = 2，需要减1才是存放处，output[2 - 1] = 053，桶的数字减1，buckets[3] = 1</li></ul><img data-src="http://resource.silverbeats.cn/static/images/算法/排序/基数排序_分段说明第三for_09.png" alt="基数排序_分段说明第三for_09"><h3 id="513-完整代码适用于负数"><a class="markdownIt-Anchor" href="#513-完整代码适用于负数"></a> 5.1.3 完整代码（适用于负数）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token function">getMinMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 应该是位数最多的那一个</span>  <span class="token keyword">int</span> arrMax <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> arrMax <span class="token operator">/</span> exp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> exp <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// 存储被排序数组的临时数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 桶,因为要考虑负数,桶编号从-9~9,，所以桶数组的长度是19</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将数据出现的次数进行统计,其中buckets数组下标0-8代表-9~-1,下标9代表0,10-18代表1-9</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//获取这一位</span>      <span class="token keyword">int</span> bit <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>      buckets<span class="token punctuation">[</span>bit <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 转为累加数组。目的是让更改后的buckets[i]的值，是该数据在output中的位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> buckets<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将数据存储到临时数组output中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      output<span class="token punctuation">[</span>buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将排序好的数组赋值给arr</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先和上面不包含负数的基数排序相比，变动的地方如下：</p><ul><li>arrMax</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token function">getMinMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> arrMax <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>实际上，arrMax的意义其实没有变化，都指的是这一串数字当中位数最多的那个数字，至于是正的还是负的，这无所谓，只要它位数最多。</p><p>所以，倘若这串数字包含负数，在获取位数最多的那个数字，可以这样获取。</p><p>其中getMinMax是获取arr中的最小值和最大值，返回值{min，max}</p></blockquote><ul><li>桶数组大小变动</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 将数据出现的次数进行统计,其中buckets数组下标0-8代表-9~-1,下标9代表0,10-18代表1-9</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//获取这一位</span>  <span class="token keyword">int</span> bit <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>  buckets<span class="token punctuation">[</span>bit <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>……<span class="token comment">// 将数据存储到临时数组output中</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  output<span class="token punctuation">[</span>buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为要考虑到负数，应该有：-9，-8，-7，-6，……，0，1，2，……，9共计19个桶</p><p>因为数组下标是从0开始的，所以在第一个计数的for循环，当在得到该数字的某一位时，需要+9</p><p>同时在第三个for循环，在获取某个桶的值的时候，也需要+9</p></blockquote><h2 id="52-计数排序"><a class="markdownIt-Anchor" href="#52-计数排序"></a> 5.2 计数排序</h2><p>利用桶，空间换时间，在面对在一定范围内的大量重复数字的场景下，很适用。</p><p>比如一个省的高考成绩排名，可以声明一个长度为751的计数数组，其数组下标为0-750，代表每个分数。之后遍历整个省的所有人，统计每个分数的出现的次数，然后再遍历计数数组，即可实现有序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Title: countSort * @Description:计数排序,适用于数字的范围小，排序量大的数组 * @param arr 数组 * @param min 该数组中的最小值 * @param max 该数组中的最大值 * @return: int[] */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// arr的最小值到最大值之间的数字，即为countArr的下标</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> countArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 统计arr中每个数字出现的次数</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    countArr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 将countArr变为累加数组,这一步主要是实现算法稳定</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> countArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span>    countArr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">+=</span> countArr<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 这一步参见基数排序的过程示意图</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>    res<span class="token punctuation">[</span><span class="token operator">--</span>countArr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 将排序好的数组赋值给arr</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-排序比较"><a class="markdownIt-Anchor" href="#6-排序比较"></a> 6. 排序比较</h1><table><thead><tr><th>排序</th><th>英文</th><th>平均</th><th>最坏</th><th>最好</th><th>空间</th><th>稳定性</th></tr></thead><tbody><tr><td>插入排序</td><td>Insertion</td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>n</td><td>1</td><td>稳</td></tr><tr><td>折半插入</td><td></td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>nlog<sub>2</sub>n</td><td>1</td><td>稳</td></tr><tr><td>希尔排序</td><td>Shell</td><td>n<sup>1.3</sup></td><td>n<sup>2</sup></td><td>n</td><td>1</td><td>不稳</td></tr><tr><td>堆排序</td><td>Heap</td><td>nlog<sub>2</sub>n</td><td>nlog<sub>2</sub>n</td><td>nlog<sub>2</sub>n</td><td>1</td><td>不稳</td></tr><tr><td>选择排序</td><td>Selection</td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>1</td><td>不稳</td></tr><tr><td>冒泡排序</td><td>Bubble</td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>n</td><td>1</td><td>稳</td></tr><tr><td>快速排序</td><td>Quick</td><td>nlog<sub>2</sub>n</td><td>n<sup>2</sup></td><td>nlog<sub>2</sub>n</td><td>log<sub>2</sub>n</td><td>不稳</td></tr><tr><td>归并排序</td><td>Merge</td><td>nlog<sub>2</sub>n</td><td>nlog<sub>2</sub>n</td><td>nlog<sub>2</sub>n</td><td>n</td><td>稳</td></tr><tr><td>桶排序</td><td>Bucket</td><td>n+k</td><td>n<sup>2</sup></td><td>n</td><td>n+k</td><td>稳</td></tr><tr><td>计数排序</td><td>Counting</td><td>n+k</td><td>n+k</td><td>n+k</td><td>n+k</td><td>稳</td></tr><tr><td>基数排序</td><td>Radix</td><td>n*k</td><td>n*k</td><td>n*k</td><td>n+k</td><td>稳</td></tr></tbody></table><ul><li>经过一趟排序能够使某个关键字到达最终位置的排序：交换类排序（冒泡，快速排序）、选择类排序（简单选择，堆排序）</li><li>排序算法的关键字比较次数和原始序列无关：简单选择排序和折半插入排序</li><li>排序算法的排序趟数和原始序列有关：交换类排序（冒泡，快速排序）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo之yelee主题配置</title>
      <link href="hexo%E4%B9%8Byelee%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>hexo%E4%B9%8Byelee%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><p><a href="https://www.jianshu.com/p/f9b213097c42">使用Github搭建Hexo技术博客托管在GitHub Pages上–安装教程</a></p></li><li><p><a href="https://www.jianshu.com/p/288ab888ac42">博客系统hexo yelee搭建历程</a></p></li><li><p><a href="https://blog.csdn.net/u010996565/article/details/89196612">hexo在文章中添加图片</a></p></li><li><p><a href="https://www.jianshu.com/p/6991e8e7f01b">Hexo七牛插件安装与使用</a></p></li><li><a href="/hexo%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/" title="hexo相关命令语法">hexo相关命令语法</a></li></ul><h1 id="1-前期准备"><a class="markdownIt-Anchor" href="#1-前期准备"></a> 1. 前期准备</h1><ol><li><p>github账号、安装<a href="http://git-scm.com/">git</a></p></li><li><p><a href="http://nodejs.org">nodejs</a></p></li><li><p>notepad++或者editplus，记事本也可以</p></li><li><p>typora（后期写md格式文章用的软件）</p></li><li><p>可选内容</p><ul><li>修改node.js源</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 设置 淘宝镜像源npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;&#x2F; 查看使用的镜像源npm config get registry&#x2F;&#x2F; 安装淘宝镜像源npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="2-实操"><a class="markdownIt-Anchor" href="#2-实操"></a> 2. 实操</h1><h2 id="21-安装hexo框架"><a class="markdownIt-Anchor" href="#21-安装hexo框架"></a> 2.1 安装Hexo框架</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g hexo-cli&#x2F;&#x2F; 或者cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="22-创建hexo项目"><a class="markdownIt-Anchor" href="#22-创建hexo项目"></a> 2.2 创建Hexo项目</h2><ul><li>在本地，选择要创建项目的目录</li><li>打开Git Bash（或者cmd命令行，或者powershell），并进入该目录</li><li>输入并运行<code>hexo init blog</code>之后，会在当前目录下创建blog文件夹，并初始化相关文件</li><li><code>cd blog</code>进入创建的项目，运行<code>npm install</code>下载相关依赖包</li></ul><h2 id="23-相关命令"><a class="markdownIt-Anchor" href="#23-相关命令"></a> 2.3 相关命令</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#清理之前生成的旧文件</span>hexo clean<span class="token comment">#重新生成静态文件 下面是简写</span>hexo generatehexo g<span class="token comment">#本地预览 下面是简写</span>hexo serverhexo s<span class="token comment">#合并写法</span>hexo clean <span class="token punctuation">|</span> hexo g <span class="token punctuation">|</span> hexo s<span class="token comment">#通过git提交到仓库,需要配置,见后文</span>hexo deployhexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-下载yelee主题"><a class="markdownIt-Anchor" href="#24-下载yelee主题"></a> 2.4 下载yelee主题</h2><p>在当前目录下，输入命令<code>git clone https://github.com/MOxFIVE/hexo-theme-yelee themes/yelee</code>，倘若下载速度是龟速，不如直接用迅雷下zip压缩包来的快……</p><p><a href="https://pan.baidu.com/s/1OSbQMbU2MNL5xHQ7HambFg">Hexo主题压缩包，百度云，密码abcd</a></p><p>下载完成之后，需要修改项目目录下的<code>_config.yml</code>文件，找到<code>theme</code>主题字样，将后面的默认主题<code>landscape</code>修改为<code>yelee</code>。倘若之后想要更换主题也是如此。</p><h2 id="25-修改yelee主题_configyml文件"><a class="markdownIt-Anchor" href="#25-修改yelee主题_configyml文件"></a> 2.5 修改yelee主题_config.yml文件</h2><h3 id="251-首页不显示文章列表"><a class="markdownIt-Anchor" href="#251-首页不显示文章列表"></a> 2.5.1 首页不显示文章列表</h3><p>启动后会发现左侧导航栏，点击主页后不显示文章列表</p><p>进入yelee模板页的 <code>_config.yml</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">search:   on: true  onload: true  ## true: get search.xml file when the page has loaded  ## false: get the file when search box gets focus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="252-相关链接无法跳转"><a class="markdownIt-Anchor" href="#252-相关链接无法跳转"></a> 2.5.2 相关链接无法跳转</h3><p>在<code>themes/yelee/_config.yml</code>中类似如下的内容。实际上当预览的时候会发现有相关的链接没有配置路由。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">## About Page: &#96;hexo new page about&#96;## Tags Cloud Page: &#96;hexo new page tags&#96;menu:  主页: &#x2F;  所有文章: &#x2F;archives&#x2F;  随笔: &#x2F;note&#x2F;  标签云: &#x2F;tags&#x2F;  关于我: &#x2F;about&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为随笔、标签云、关于我这种链接，在此项目中是没有的，需要去创建。留意上方注释，已经说明如何创建。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#在项目根目录下操作, 根据需要创建系统页</span>hexo new page tagshexo new page abouthexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="253-添加文章的字数统计和大概看完的时间"><a class="markdownIt-Anchor" href="#253-添加文章的字数统计和大概看完的时间"></a> 2.5.3 添加文章的字数统计和大概看完的时间</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#项目根路径下操作</span>npm i <span class="token operator">--</span>save hexo<span class="token operator">-</span>wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文件配置：</p><ol><li>在<code>yelee/layout/_partial/post/word.ejs</code>下创建<code>word.ejs</code>文件：</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!--倘若出现tag标签和统计字数的文件有布局上的问题，可以对上下外边距进行调整--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 30px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-item-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-keyboard-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-item-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  字数统计: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">wordcount</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span> | <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-item-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-hourglass-half<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-item-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  阅读时长: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">min2read</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>然后在 <code>themes/yelee/layout/_partial/article.ejs</code>中添加</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>fancybox<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isFancy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>link <span class="token operator">||</span> post<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'post/title'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>class_name<span class="token operator">:</span> <span class="token string">'article-title'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token comment">&lt;!-- 开始添加字数统计,这里才是添加的东西--></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>word_count <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>post<span class="token punctuation">.</span>no_word_count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></span><span class="token delimiter punctuation">%></span></span>          <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'post/word'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>          <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>         <span class="token comment">&lt;!-- 添加完成 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>开启功能</li></ol><p>在yelee主题的<code>_config.yml</code>中添加：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">word_count: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="254-配置本地搜索"><a class="markdownIt-Anchor" href="#254-配置本地搜索"></a> 2.5.4 配置本地搜索</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 项目根目录运行</span>npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>search <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后配置文件<code>themes/yelee/_config.yml</code>中修改为：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">search:   on: true  onload: true  ## true: get search.xml file when the page has loaded  ## false: get the file when search box gets focus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="255-添加网站运行时间"><a class="markdownIt-Anchor" href="#255-添加网站运行时间"></a> 2.5.5 添加网站运行时间</h3><p><code>\themes\yelee\layout\_partial</code>路径下找到<code>footer.ejs</code>添加如下代码：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--添加代码的位置,以及要添加的代码&lt;span id="timeDate">载入天数...&lt;/span>&lt;span id="times">载入时分秒...&lt;/span>      &lt;script>        var now = new Date();        function createtime() &#123;          var grt = new Date("09/13/2020 12:49:00");//此处修改你的建站时间或者网站上线时间           now.setTime(now.getTime() + 250);          days = (now - grt) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);          hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);          if (String(hnum).length == 1) &#123; hnum = "0" + hnum; &#125; minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);          mnum = Math.floor(minutes); if (String(mnum).length == 1) &#123; mnum = "0" + mnum; &#125;          seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);          snum = Math.round(seconds); if (String(snum).length == 1) &#123; snum = "0" + snum; &#125;          document.getElementById("timeDate").innerHTML = "本站已安全运行 " + dnum + " 天 ";          document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";        &#125;        setInterval("createtime()", 250);      &lt;/script>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    ……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="256-文章底部不显示作者"><a class="markdownIt-Anchor" href="#256-文章底部不显示作者"></a> 2.5.6 文章底部不显示作者</h3><p>倘若出现了这种情况，可以在主题的配置文件中添加：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">author: 作者名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="257-添加点击爱心效果"><a class="markdownIt-Anchor" href="#257-添加点击爱心效果"></a> 2.5.7 添加点击爱心效果</h3><ul><li><p>下载js文件，<a href="https://pan.baidu.com/s/1dKH_FBNNGjdkTF3PslJkKQ">链接地址,密码bcde</a></p></li><li><p>在<code>theme/yelee/source</code>下创建<code>resources目录</code>并将js文件拷贝到此目录下</p></li><li><p>在<code>/themes/yelee/layout/_partial/after-footer.ejs</code>下添加代码</p></li></ul><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/resources/float.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/resources/love.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>0,104,183</span> <span class="token attr-name">opacity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token attr-name">zindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>-1</span> <span class="token attr-name">count</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>50</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/resources/particle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/resources/typewriter.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2511-其它"><a class="markdownIt-Anchor" href="#2511-其它"></a> 2.5.11 其它</h3><p>主题文件的_config.yml还可以配置什么：</p><ul><li>网站的ico图标</li><li>自己的头像</li><li>导航栏链接</li><li>背景图片</li><li>是否开启分享</li><li>是否需要评论、以及是否显示评论数量</li><li>文章的标题风格、字体大小</li><li>……</li></ul><h2 id="26-修改hexo的_configyml"><a class="markdownIt-Anchor" href="#26-修改hexo的_configyml"></a> 2.6 修改hexo的_config.yml</h2><h3 id="261-url持久化"><a class="markdownIt-Anchor" href="#261-url持久化"></a> 2.6.1 Url持久化</h3><p>可以发现 hexo 默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。</p><p>这种链接对搜索爬虫是很不友好的，它的 url 结构超过了三层，太深了。</p><p>安装 <code>hexo-abbrlink</code> 插件：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install hexo<span class="token operator">-</span>abbrlink <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后配置根目录的_config.yml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">permalink: :title&#x2F;#permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="262-添加二次元虚拟人物"><a class="markdownIt-Anchor" href="#262-添加二次元虚拟人物"></a> 2.6.2 添加二次元虚拟人物</h3><p>获取：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install <span class="token operator">--</span>save hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载人物模型，<a href="https://www.npmjs.com/package/hexo-helper-live2d">官方</a>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>shizuku <span class="token comment"># 对应use: live2d-widget-model-unitychan</span>npm install live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>hibiki<span class="token comment"># 对应use: live2d-widget-model-hibiki</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">live2d:  enable: true  scriptFrom: local  model:  #只需要修改unitychan就可以更换虚拟人物    use: live2d-widget-model-unitychan  display:    position: right    width: 150    height: 300  mobile:    show: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="263-当文章中有图片时"><a class="markdownIt-Anchor" href="#263-当文章中有图片时"></a> 2.6.3 当文章中有图片时</h3><p>图片在博文中十分常见，因博客部署在GitHub上，空间有限，推荐将图片、音频、视频等文件存放在<a href="https://www.qiniu.com/">七牛云</a>这样的地方。</p><h4 id="2631-使用七牛云同步插件"><a class="markdownIt-Anchor" href="#2631-使用七牛云同步插件"></a> 2.6.3.1 使用七牛云同步插件</h4><ol><li><p>注册账号登录，点击对象存储，创建存储空间，并绑定域名，绑定域名参考官网提供的说明</p></li><li><p>hexo安装七牛云同步插件：<code>npm install hexo-qiniu-sync --save</code></p></li><li><p>hexo的配置文件中进行七牛云配置</p></li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#plugins:# - hexo-qiniu-syncqiniu:offline: true # 离线,true会省流量sync: truebucket: #这里需要填写第一步创建的存储空间的名字# 这里将其注释掉，不注释，执行hexo g报错# secret_file: sec&#x2F;qn.json or C:#登录自己的七牛云账号，点击右上角的投降，选择密钥管理，可以获得access_key: your access_key secret_key: your secret_key#上传的资源子目录前缀.如设置，需与urlPrefix同步dirPrefix: static#外链前缀，第一步绑定的加速域名urlPrefix: http:&#x2F;&#x2F;自己的加速域名&#x2F;static#使用默认配置即可up_host: http:&#x2F;&#x2F;upload.qiniu.com&#x2F;&#x2F;本地目录local_dir: static#是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)update_exist: trueimage: folder: imagesextend: js:folder: jscss:folder: css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在hexo根目录下创建如下目录结构，之后将对应的想要存放到七牛云的文件放到对应的文件夹即可</li></ol><pre class="line-numbers language-none"><code class="language-none">static- images- js- css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>在文章中插入图片</li></ol><pre class="line-numbers language-none"><code class="language-none">&#123;% qnimg 图片.图片格式 title: alt: &#39;class:&#39; extend:?imageView2&#x2F;2&#x2F;w&#x2F;450 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>将本地static目录下的文件同步到七牛云</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo qiniu sync<span class="token comment">#或者</span>hexo qiniu s<span class="token comment">#或者</span>hexo qiniu sync2<span class="token comment">#或者</span>hexo qiniu s2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2632-使用picgo工具"><a class="markdownIt-Anchor" href="#2632-使用picgo工具"></a> 2.6.3.2 使用picGo工具</h4><p>同步插件在使用过程中发现，在文章使用过程中看不到预览，并且在生成过程中还是会把图片放到public目录，所以会推荐使用<a href="https://pan.baidu.com/s/1RPdP03TrigJTZgmzVs9Dgg">picGo，提取码cdef</a>工具来上传，成功后会返回外链地址，方便使用。</p><h1 id="3-把本地的博客内容同步到-github-上"><a class="markdownIt-Anchor" href="#3-把本地的博客内容同步到-github-上"></a> 3. 把本地的博客内容同步到 Github 上</h1><p>因为博客托管在GitHub上，所以在建立博客仓库时，仓库的名字需要命名为：<code>用户名.github.io</code>这样就可以通过<code>用户名.github.io</code>来访问该站点了。</p><ol><li><p>创建好仓库后，需要本地生成SSH秘钥，方便通过git来进行提交</p></li><li><p>命令行输入：<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code>,之后不停的回车，期间，留意秘钥保存的路径，一般是：<code>C:\Users\你的计算机用户名\.ssh</code>，会生成两个文件：</p><ul><li>私钥：<code>id_rsa</code></li><li>公钥：<code>id_rsa.pub</code></li></ul></li><li><p>访问自己GitHub账户的setting/SSH keys，将公钥的内容复制粘贴到Key的位置（主义末尾不要留有空行），title内容随意。</p></li><li><p>安装两个跟部署相关的 hexo 插件</p></li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install hexo <span class="token operator">-</span>server <span class="token operator">--</span>savenpm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>编辑全局的hexo配置文件：_config.xml</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Hexo Configuration## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration.html## Source: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo&#x2F;# Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的stitle: LearnFoever  #网站标题subtitle:  #网站副标题description: #描述author: silverbeatsemail: 418116014@qq.comlanguage: zh-CNtimezone:   #网站时区。Hexo 默认使用您电脑的时区# URL 这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: http:&#x2F;&#x2F;silverbeats.github.io #倘若已经购买了域名的话可以填买的域名root: &#x2F;#这里配置的url持久化permalink: :title&#x2F; #:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F; permalink_defaults:# Directorysource_dir: source #源文件夹，这个文件夹用来存放内容。public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads&#x2F;code #nclude code 文件夹i18n_dir: :lang #国际化（i18n）文件夹skip_render:  #跳过指定文件的渲染，可使用 glob 表达式来匹配路径# Writingnew_post_name: :title.md #新建文章默认文件名default_layout: post # 默认布局titlecase: false # Transform title into titlecaseexternal_link: true # 在新标签中打开一个外部链接，默认为truefilename_case: 0 render_drafts: false #是否渲染_drafts目录下的文章，默认为falsepost_asset_folder: true #启动 Asset 文件夹relative_link: false #把链接改为与根目录的相对位址，默认falsefuture: true #显示未来的文章，默认falsehighlight:  #代码块的设置enable: trueline_number: trueauto_detect: falsetab_replace: &#39;&#39;wrap: truehljs: falseprismjs:enable: falsepreprocess: trueline_number: truetab_replace: &#39;&#39;# Home page setting# path: Root path for your blogs index page. (default &#x3D; &#39;&#39;)# per_page: Posts displayed per page. (0 &#x3D; disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:path: &#39;&#39;per_page: 10order_by: -date# Category &amp; Tag #分类和标签的设置default_category: uncategorized #默认分类category_map:tag_map:# Metadata elements## https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;metameta_generator: true# Date &#x2F; Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports &#39;mtime&#39;, &#39;date&#39;, &#39;empty&#39;updated_option: &#39;mtime&#39;# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Include &#x2F; Exclude file(s)## include:&#x2F;exclude: options only apply to the &#39;source&#x2F;&#39; folderinclude:exclude:ignore:# Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: yelee # next  yeleesearch:path: search.xmlfield: all# Deployment## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后熟悉了要换其他也无所谓。## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:type: gitrepo:github: git@github.com:SilverBeats&#x2F;SilverBeats.github.io.git,master# hexo-neat 对静态文件进行压缩neat_enable: trueneat_html:enable: trueexclude:  neat_css:enable: trueexclude:- &#39;*.min.css&#39;neat_js:enable: truemangle: trueoutput:compress:exclude:- &#39;*.min.js&#39;#萌妹子live2d:enable: truescriptFrom: localmodel:use: live2d-widget-model-hibikidisplay:position: rightwidth: 150height: 300mobile:show: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
