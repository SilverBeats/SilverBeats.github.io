<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法设计与分析——分治法</title>
      <link href="%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90_%E5%88%86%E6%B2%BB%E6%B3%95/"/>
      <url>%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90_%E5%88%86%E6%B2%BB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>分治法的基本思想是将一个规模为n的问题分解为k个规模较小的子问题，这些子问题互相独立且与原问题相同。递归的解决这些子问题，然后将各个子问题的解合并得到原问题。</p><h1 id="1-二分搜索法"><a class="markdownIt-Anchor" href="#1-二分搜索法"></a> 1. 二分搜索法</h1><p>最简单的想法是从头找到尾，进行遍历，时间复杂度为O(n)，而利用分治法思想，使用二分搜索法，可以将时间复杂度缩小为O(logn)，但是该方法有一个前提就是，这一个序列必须有序。</p><p><strong>下面代码假设序列是非递减序列</strong></p><ul><li>递归写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这说明没有数字了,说明没找到,返回-1</span></span><br><span class="line">  <span class="keyword">if</span>(to &lt; from) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 得到from至to中间位置的数字的下标</span></span><br><span class="line">  <span class="keyword">int</span> midPos = (to + from) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 如果找到了该数字,返回数组下标</span></span><br><span class="line">  <span class="keyword">if</span>(arr[midPos] == target) &#123;</span><br><span class="line">    <span class="keyword">return</span> midPos;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(arr[midPos] &gt; target) &#123;</span><br><span class="line">    <span class="comment">// 如果中间的数字比目标值大,说明目标值值在中间值的左边</span></span><br><span class="line">    <span class="keyword">return</span> binarySearch(arr, from, midPos - <span class="number">1</span>, target);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果中间的数字比目标值大,说明目标值值在中间值的右边</span></span><br><span class="line">    <span class="keyword">return</span> binarySearch(arr, midPos + <span class="number">1</span>, to, target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非递归写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 两个指针指向target存在区域的左右边界,圈定范围</span></span><br><span class="line">  <span class="keyword">int</span> left = <span class="number">0</span>, right = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">    <span class="comment">// 得到该范围的中间位置</span></span><br><span class="line">    <span class="keyword">int</span> midPos = (right + left) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 说明找到了</span></span><br><span class="line">    <span class="keyword">if</span>(arr[midPos] == target) <span class="keyword">return</span> midPos;</span><br><span class="line">    <span class="comment">// 如果中间值大,说明目标值在中间值左边,右边界right指针挪到midPos的前一个</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(arr[midPos] &gt; target) right = midPos - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 如果中间值大,说明目标值在中间值左边,右边界left指针挪到midPos的后一个</span></span><br><span class="line">    <span class="keyword">else</span> left = midPos + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 找不到返回-1</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-大整数乘法"><a class="markdownIt-Anchor" href="#2-大整数乘法"></a> 2. 大整数乘法</h1><p>对于乘法，直接使用乘法的运算符会很方便，但是仅限于参加运算的整数能在计算机硬件对整数的表示范围内直接处理时才是合理的。当需要处理很大的整数时，无法在计算机硬件能直接表示的整数范围内进行处理，若用浮点数表示，只能得到近似值，计算结果中的有效位数也会受到限制。</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E5%A4%A7%E6%95%B4%E6%95%B0%E4%B9%98%E6%B3%95.png" alt="大整数乘法逻辑" /></p><p>这里进行说明，为什么X可以那样表示。</p><p>比如一个十进制数1234，一共4位，按照上面的样子进行划分成左右AB两部分，则1234 = 12 * 10<sup>2</sup> + 34，这里的10其实是进制</p><p>同理，案例中，XY都是二进制，如X = 1101，X = 11 * 2<sup>2</sup> + 01，1101的十进制是13，11的十进制是3，01的十进制是1，X = 3 * 4 + 1 = 13</p><ul><li>O(n<sup>2</sup>)写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为数字很大,无法用某个整数数据类型表示,需要转换成整型数组,方便处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] NumToArr(String num) &#123;</span><br><span class="line">  num = fliter(num);</span><br><span class="line">  <span class="keyword">char</span>[] temp = num.toCharArray();</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[temp.length];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">    arr[i] = Integer.parseInt(temp[i] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 倘若传进来的字符串num中有0开头,比如0123,,或者00123,需要将0去掉</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fliter</span><span class="params">(String num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pos0 = num.indexOf(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(pos0 != <span class="number">0</span>) <span class="keyword">return</span> num;</span><br><span class="line">  StringBuilder sb = <span class="keyword">new</span> StringBuilder(num);</span><br><span class="line">  <span class="keyword">while</span>(pos0 == <span class="number">0</span>) &#123;</span><br><span class="line">    sb.deleteCharAt(pos0);</span><br><span class="line">    pos0 = sb.indexOf(<span class="string">&#x27;0&#x27;</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O(n2)的大整数乘法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">LargeIntegerMultiplication</span><span class="params">(<span class="keyword">int</span>[] num1, <span class="keyword">int</span>[] num2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len1 = num1.length;</span><br><span class="line">  <span class="keyword">int</span> len2 = num2.length;</span><br><span class="line">  <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[len1 * len2];</span><br><span class="line">  <span class="keyword">int</span> p = res.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      res[p--] += num2[j] * num1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理进制</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = res.length - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">    <span class="keyword">if</span>(res[k] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      res[k - <span class="number">1</span>] = res[k] / <span class="number">10</span>;</span><br><span class="line">      res[k] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从后向前充填res数组，可能没有填满，导致前几位有0</span></span><br><span class="line">  StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">  <span class="comment">// 从头向后遍历当遇到第一次非0数字后,flag为true</span></span><br><span class="line">  <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; res.length; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res[k] != <span class="number">0</span>) flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) sb.append(res[k]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>O(n<sup>1.59</sup>)</li></ul><p>可以看到，想要达到这个效果有很多的前置条件，比如：①两个数字的位数相同，②位数必须是2的整数次幂</p><p>这样，才能保证每次划分后，两部分的位数相同，才会有后面的合并同类项的步骤。为简化操作，输入的两个数字符合①②</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上图的公式中有两个数相加的步骤</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arrAddArr(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2) &#123;</span><br><span class="line">  <span class="keyword">int</span> len1 = arr1.length, len2 = arr2.length;<span class="comment">//123,12</span></span><br><span class="line">  <span class="comment">// 这里还需要长度＋1是因为：900 + 900 = 1800类似这种情况</span></span><br><span class="line">  <span class="comment">// 另外两个相加的数组的长度不一定一样, 并且二者相差的位数不定</span></span><br><span class="line">  <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[Math.max(len1, len2) + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">int</span> p = res.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> dist = len1 - len2;</span><br><span class="line">  <span class="keyword">if</span>(dist &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// arr1短</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      res[p--] = arr1[i] + arr2[i - dist];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = -dist - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      res[p--] = arr2[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dist &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// arr2短</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len2 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      res[p--] = arr1[i + dist] + arr2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = dist - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      res[p--] = arr1[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr1.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      res[p--] = arr1[i] + arr2[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理进制</span></span><br><span class="line">  decimalism(res);</span><br><span class="line">  <span class="comment">// 再次考虑,当res[0]为0的情况</span></span><br><span class="line">  <span class="keyword">return</span> filterZero(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理数组arr首位为0的情况</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] filterZero(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">  <span class="keyword">if</span>(arr[<span class="number">0</span>] != <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="comment">// 从头遍历arr,当出现第一个不为0的数字后,会变成true</span></span><br><span class="line">  <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">// 用来统计非0数字前面,0的个数</span></span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length &amp;&amp; !flag; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] != <span class="number">0</span>) flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 倘若还没有遇到第一个不为0的数字,计数+1</span></span><br><span class="line">    <span class="keyword">if</span>(!flag) k++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 比如[0,0,1,2,3],经过统计k=2,那么最终的finalRes长度应该是3 = arr.length - k</span></span><br><span class="line">  <span class="keyword">int</span>[] finalRes = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length - k];</span><br><span class="line">  <span class="comment">// 开始拷贝的位置下标应该是k</span></span><br><span class="line">  System.arraycopy(arr, k, finalRes, <span class="number">0</span>, finalRes.length);</span><br><span class="line">  <span class="keyword">return</span> finalRes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进制处理</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decimalism</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 处理进制</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = arr.length - <span class="number">1</span>; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[k] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      arr[k - <span class="number">1</span>] += arr[k] / <span class="number">10</span>;</span><br><span class="line">      arr[k] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上图的公式中有两个数相减的步骤</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arrSubArr(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2) &#123;</span><br><span class="line">  <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length];</span><br><span class="line">  <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    res[p++] = arr1[i] - arr2[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 也要考虑相减之后,首位出现0的情况</span></span><br><span class="line">  <span class="keyword">return</span> filterZero(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上图中还存在位移,因为示例采用10进制,故只需要在数组后面添0即可</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] move(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> offset) &#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[len + offset];</span><br><span class="line">  System.arraycopy(arr, <span class="number">0</span>, res, <span class="number">0</span>, len);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 过滤负数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">filterNegative</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      arr[i - <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">      arr[i] += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是需要使用的相关方法实现时间复杂度都是O(n)，下面是正式的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为满足上述两个限制条件,num1的位数与num2的位数一致,这里的一致仅限于划分后AC,BD的递归调用</span></span><br><span class="line"><span class="comment">// (A-B)(D-C),该两个整数不一定位数相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] LargeIntegerMultiplication(<span class="keyword">int</span>[] num1, <span class="keyword">int</span> num1Start, <span class="keyword">int</span> num1End, <span class="keyword">int</span>[] num2, <span class="keyword">int</span> num2Start, <span class="keyword">int</span> num2End) &#123;</span><br><span class="line">  <span class="comment">// X和Y的位数</span></span><br><span class="line">  <span class="keyword">int</span> n = num1End - num1Start + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 只有有一个数为0,乘积就是0</span></span><br><span class="line">  <span class="keyword">if</span>(num1.length == <span class="number">0</span> || num2.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,num1[num1Start] * num2[num2Start]&#125;;</span><br><span class="line">    <span class="comment">// 处理进制</span></span><br><span class="line">    decimalism(res);</span><br><span class="line">    <span class="comment">// 首部去0</span></span><br><span class="line">    <span class="keyword">return</span> filterZero(res);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 进行划分,划分后左右各n/2位</span></span><br><span class="line">  <span class="keyword">int</span> mid = (num1End + num1Start) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  A下标范围:[num1Start,mid]</span></span><br><span class="line"><span class="comment">  B下标范围:[mid + 1, num1End]</span></span><br><span class="line"><span class="comment">  C下标范围:[num2Start,mid]</span></span><br><span class="line"><span class="comment">  D下标范围:[mid + 1, num2End]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// 求得AC的结果</span></span><br><span class="line">  <span class="keyword">int</span>[] AC = LargeIntegerMultiplication(num1, num1Start, mid, num2, num2Start, mid);</span><br><span class="line">  <span class="comment">// 求得BD的结果</span></span><br><span class="line">  <span class="keyword">int</span>[] BD = LargeIntegerMultiplication(num1, mid + <span class="number">1</span>, num1End, num2, mid + <span class="number">1</span>, num2End);</span><br><span class="line">  <span class="comment">// 临时存储A,B,C,D</span></span><br><span class="line">  <span class="keyword">int</span>[] tempA = <span class="keyword">new</span> <span class="keyword">int</span>[n &gt;&gt; <span class="number">1</span>], </span><br><span class="line">        tempB = <span class="keyword">new</span> <span class="keyword">int</span>[n &gt;&gt; <span class="number">1</span>], </span><br><span class="line">        tempC = <span class="keyword">new</span> <span class="keyword">int</span>[n &gt;&gt; <span class="number">1</span>], </span><br><span class="line">        tempD = <span class="keyword">new</span> <span class="keyword">int</span>[n &gt;&gt; <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = num1Start; i &lt;= mid; i++) &#123;</span><br><span class="line">    tempA[i - num1Start] = num1[i];</span><br><span class="line">    tempC[i - num1Start] = num2[i];</span><br><span class="line">    tempB[i - num1Start] = num1[i + n/<span class="number">2</span>];</span><br><span class="line">    tempD[i - num1Start] = num2[i + n/<span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 得到A-B、D-C的结果</span></span><br><span class="line">  <span class="keyword">int</span>[] ASubB = arrSubArr(tempA, tempB);</span><br><span class="line">  <span class="keyword">int</span>[] DSubC = arrSubArr(tempD, tempC);</span><br><span class="line">  <span class="comment">// 位移</span></span><br><span class="line">  <span class="keyword">int</span>[] moveAC = move(AC, n);</span><br><span class="line">  <span class="comment">// 计算[(A-B)(D-C) + AC + BD]并进行位移</span></span><br><span class="line">  <span class="keyword">int</span>[] moveMid = move(arrAddArr(LargeIntegerMultiplication(ASubB, <span class="number">0</span>, ASubB.length - <span class="number">1</span>, DSubC, <span class="number">0</span>, DSubC.length - <span class="number">1</span>), arrAddArr(AC, BD)), n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span>[] res = arrAddArr(arrAddArr(moveAC, moveMid), BD);</span><br><span class="line">  filterNegative(res);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="http://resource.silverbeats.cn/static/images/%E5%A4%A7%E6%95%B4%E6%95%B0%E4%B9%98%E6%B3%95%E7%BB%93%E6%9E%9C.png" alt="" /></p><p>其实还存在问题，因为在递归调用时，无法保证(A-B)，(D-C)也满足上面的约束条件，所以会有出错的可能。同时可以思考当分成三部分，四部分又会如何，是否会比上述分成两部分效率来的更高？答案是否定的。</p><p>可以知道，真正费时间的是乘法，故在改进过程中都尽可能减少乘法的次数。当分成两部分，经过优化，乘法次数从4次变成3次，而当分成三部分后，则需要考虑如何将9次乘法变成3次以内，而当分成四部分后，则需要考虑如何将16次乘法优化成3次以内。显然，让分的块越多，优化的难度越大，事实上不可能实现，分成两块为最优。</p><blockquote><p>上面的代码，有可能是自己的实现方法有问题，有待改进</p></blockquote><h1 id="3-strassen矩阵乘法"><a class="markdownIt-Anchor" href="#3-strassen矩阵乘法"></a> 3. Strassen矩阵乘法</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 算法设计与分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 分治法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径</title>
      <link href="%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<img data-src="http://resource.silverbeats.cn/static/images/bg_07.jpg"><h1 id="1-迪杰斯特拉dijkstra算法详解"><a class="markdownIt-Anchor" href="#1-迪杰斯特拉dijkstra算法详解"></a> 1. 迪杰斯特拉Dijkstra算法详解</h1><h2 id="11-完整代码"><a class="markdownIt-Anchor" href="#11-完整代码"></a> 1.1 完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 当起点无法达到该点时,路径长度是无穷大,这里用整型最大值代替</span></span><br><span class="line">  <span class="keyword">int</span> MAXDIST = Integer.MAX_VALUE;</span><br><span class="line">  <span class="keyword">int</span> vertexNum = graph.length;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. Dijkstra算法需要三个辅助数组</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">  <span class="keyword">boolean</span>[] isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertexNum];</span><br><span class="line">  <span class="keyword">int</span>[] path = <span class="keyword">new</span> <span class="keyword">int</span>[vertexNum];</span><br><span class="line">  <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[vertexNum];</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2. 初始化</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">    dist[i] = graph[start][i];</span><br><span class="line">    <span class="keyword">if</span> (graph[start][i] &lt; MAXDIST) &#123;</span><br><span class="line">      path[i] = start;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      path[i] = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// start起点默认已经被访问</span></span><br><span class="line">  isVisited[start] = <span class="keyword">true</span>;</span><br><span class="line">  <span class="comment">// start没有前驱结点,因为它是开始的位置</span></span><br><span class="line">  path[start] = -<span class="number">1</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 3. 迪杰斯特拉算法核心</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 存储最短路径</span></span><br><span class="line">    <span class="keyword">int</span> minPath = MAXDIST;</span><br><span class="line">    <span class="comment">// 存储距离最小的点的数组下标</span></span><br><span class="line">    <span class="comment">// 倘若这里minIndex不赋初始值,在后面isVisited[minIndex] = true会报错</span></span><br><span class="line">    <span class="comment">// 因为后面的循环找最小值可能找不到</span></span><br><span class="line">    <span class="keyword">int</span> minIndex = start;</span><br><span class="line">    <span class="comment">// 这个循环目的是:从未访问的节点中找到路径最短的那个</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++) &#123;</span><br><span class="line">      <span class="comment">// 倘若这个节点没有访问,并且该点小于最短路径</span></span><br><span class="line">      <span class="keyword">if</span> (!isVisited[j] &amp;&amp; dist[j] &lt; minPath) &#123;</span><br><span class="line">        minPath = dist[j];</span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (minIndex != start) isVisited[minIndex] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isVisited[j] &amp;&amp; graph[minIndex][j] != MAXDIST </span><br><span class="line">          &amp;&amp; dist[minIndex] + graph[minIndex][j] &lt; dist[j] </span><br><span class="line">          &amp;&amp; minIndex != start) &#123;</span><br><span class="line">        dist[j] = dist[minIndex] + graph[minIndex][j];</span><br><span class="line">        path[j] = minIndex;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-分段解读"><a class="markdownIt-Anchor" href="#12-分段解读"></a> 1.2 分段解读</h2><h3 id="121-完整过程图示"><a class="markdownIt-Anchor" href="#121-完整过程图示"></a> 1.2.1  完整过程图示</h3><img data-src="http://resource.silverbeats.cn/static/images/Dijkstra_完整示例.png" alt="完整过程图示"><h3 id="122-辅助数组说明"><a class="markdownIt-Anchor" href="#122-辅助数组说明"></a> 1.2.2 辅助数组说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来记录每个节点是否被访问</span></span><br><span class="line"><span class="keyword">boolean</span>[] isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertexNum];</span><br><span class="line"><span class="comment">// 用来存储到达某个点最短路径的前一个节点下标</span></span><br><span class="line"><span class="comment">// 比如上图第1次循环,到达顶点4的最短路径是0-2-4,那么path[4]存放下标2</span></span><br><span class="line"><span class="comment">// 这个数组的每个值会不断变动</span></span><br><span class="line"><span class="keyword">int</span>[] path = <span class="keyword">new</span> <span class="keyword">int</span>[vertexNum];</span><br><span class="line"><span class="comment">// 存放到某个顶点的最短路径长度</span></span><br><span class="line"><span class="comment">// 比如顶点4,dist[4]从8,最后修改成7,这个数组的每个值会不断变动</span></span><br><span class="line"><span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[vertexNum];</span><br></pre></td></tr></table></figure><h3 id="123-初始化说明"><a class="markdownIt-Anchor" href="#123-初始化说明"></a> 1.2.3 初始化说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">  dist[i] = graph[start][i];</span><br><span class="line">  <span class="comment">// 这一步其实可以不用,声明boolean数组时默认就是false</span></span><br><span class="line">  <span class="comment">// isVisited[i] = false;</span></span><br><span class="line">  <span class="comment">// start点到i有路径,这里面包含了start自己到自己</span></span><br><span class="line">  <span class="comment">// path[start]=start,这是不对的,start没有前驱节点,应该存-1,循环结束之后会做处理</span></span><br><span class="line">  <span class="keyword">if</span> (graph[start][i] &lt; MAXDIST) &#123;</span><br><span class="line">    path[i] = start;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有前驱节点的意思,当前以start为起点,到不了i这个点</span></span><br><span class="line">    path[i] = -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// start起点默认已经被访问</span></span><br><span class="line">isVisited[start] = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// start没有前驱结点,因为它是开始的位置</span></span><br><span class="line">path[start] = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="124-算法核心说明"><a class="markdownIt-Anchor" href="#124-算法核心说明"></a> 1.2.4 算法核心说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">  <span class="comment">// 存储最短路径</span></span><br><span class="line">  <span class="keyword">int</span> minPath = MAXDIST;</span><br><span class="line">  <span class="comment">// 存储距离最小的点的数组下标</span></span><br><span class="line">  <span class="comment">// 倘若这里minIndex不赋初始值,在后面isVisited[minIndex] = true会报错</span></span><br><span class="line">  <span class="comment">// 因为后面的循环找最小值可能找不到</span></span><br><span class="line">  <span class="keyword">int</span> minIndex = start;</span><br><span class="line">  <span class="comment">// 这个循环目的是:从未访问的节点中找到路径最短的那个</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="comment">// 倘若这个节点没有访问,并且该点小于最短路径</span></span><br><span class="line">    <span class="keyword">if</span> (!isVisited[j] &amp;&amp; dist[j] &lt; minPath) &#123;</span><br><span class="line">      minPath = dist[j];</span><br><span class="line">      minIndex = j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (minIndex != start) isVisited[minIndex] = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isVisited[j] &amp;&amp; graph[minIndex][j] != MAXDIST </span><br><span class="line">        &amp;&amp; dist[minIndex] + graph[minIndex][j] &lt; dist[j] </span><br><span class="line">        &amp;&amp; minIndex != start) &#123;</span><br><span class="line">      dist[j] = dist[minIndex] + graph[minIndex][j];</span><br><span class="line">      path[j] = minIndex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内层循环第一个for比较简单，目的是找到一个点，该点满足：①未被访问，②有路径能访问，③到达改点路径值最小</p><p>内层循环第二个详解见下图：</p><img data-src="http://resource.silverbeats.cn/static/images/Dijkstra_for_0.png"><img data-src="http://resource.silverbeats.cn/static/images/Dijkstra_for_01.png"><img data-src="http://resource.silverbeats.cn/static/images/Dijkstra_for_02.png"><img data-src="http://resource.silverbeats.cn/static/images/Dijkstra_for_03.png"><blockquote><p>❥(^_-)Tip：</p><p>当你使用某个数据类型的最大值作为无穷大，表示无该路径时，需要注意dist[minIndex] + graph[minIndex][j] &lt; dist[j]，倘若graph[minIndex][j]是无穷大，再加上一个数字后，会超出该类型的表示范围，变成一个负数，从而达成这个判断条件，执行if代码块中语句。这并不是我们想要的。所以需要在if中需要添加graph[minIndex][j] != MAXDIST这句话，避免上述情况发生</p></blockquote><h2 id="13-思考"><a class="markdownIt-Anchor" href="#13-思考"></a> 1.3 思考</h2><p>首先，迪杰斯特拉算法能解决单源并且没有负权值边的最短路径问题，那么倘若出现负权值边，该算法不能求解出最短路径的原因是什么</p><h3 id="131-尝试一下"><a class="markdownIt-Anchor" href="#131-尝试一下"></a> 1.3.1 尝试一下</h3><p><img data-src="http://resource.silverbeats.cn/static/images/Dijkstra_try_0.png" alt="" /></p><p>当把1-&gt;2的权值改为-3后，继续走一遍之前的代码，就可以发现问题。</p><p>当i = 1时，即第二次循环，此时的minIndex为1，当j = 2时，根据if条件，因为isVisited[2]是之前访问过的点，所以不会执行if语句块中的代码，即便<code>dist[minIndex] + graph[minIndex][j] &lt; dist[j]，5 + (-3) &lt; 3</code></p><p>那么倘若if中没有<code>!isVisited[j]</code>这个判断是否就可以了呢？</p><p><img data-src="http://resource.silverbeats.cn/static/images/Dijkstra_try_tempRes.png" alt="删除isVisited[j]之后执行的结果" /></p><p>根据上图，可以看到path数组是没有问题的，但是问题出在了dist[4]上。dist[4]应该为6，但却是7，这里是因为什么原因导致的？</p><p>手动模拟一遍过程后不难发现，i=0的第一次循环修改了dist[4]和path[4]；在i=1的第二次循环，到达节点2的最短路径发生变化，但是没有任何的机会去修改以2为前驱的点的dist数组。</p><p>所以在第二个for循环中再添加一个循环，倘若某个点x的最短路径发生变化，去找以x为前驱的其他点y，看看y这个点的最短路径有没有因为x的变化而缩短。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (graph[minIndex][j] != MAXDIST &amp;&amp; dist[minIndex] + graph[minIndex][j] &lt; dist[j] &amp;&amp; minIndex != start) &#123;</span><br><span class="line">    dist[j] = dist[minIndex] + graph[minIndex][j];</span><br><span class="line">    path[j] = minIndex;</span><br><span class="line">    <span class="comment">// 在遍历一遍path数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; vertexNum; k++) &#123;</span><br><span class="line">      <span class="comment">// 如果path数组的某个点的前驱节点正好是修改长度的点的话</span></span><br><span class="line">      <span class="keyword">if</span>(path[k] == j &amp;&amp; dist[k] &gt; dist[j] + graph[j][k]) &#123;</span><br><span class="line">        dist[k] = dist[j] + graph[j][k];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后的结果就没有问题了：<img data-src="http://resource.silverbeats.cn/static/images/Dijkstra_try_res.png" alt="" /></p><h1 id="2-弗洛伊德floyd算法详解"><a class="markdownIt-Anchor" href="#2-弗洛伊德floyd算法详解"></a> 2. 弗洛伊德Floyd算法详解</h1><p>其实倘若涉及到负权值，会选择用Floyd算法，而且，更为强大的是，Floyd能够求出各个顶点到其他点的最短距离。</p><p>我不能呼吸了……= =</p><h2 id="21-完整代码"><a class="markdownIt-Anchor" href="#21-完整代码"></a> 2.1 完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> vertexNum = graph.length;</span><br><span class="line">  <span class="comment">// path数组,用来存储路径</span></span><br><span class="line">  <span class="keyword">int</span>[][] path = <span class="keyword">new</span> <span class="keyword">int</span>[vertexNum][vertexNum];</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++) path[i][j] = -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; vertexNum; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(graph[j][i] == Integer.MAX_VALUE || graph[i][k] == Integer.MAX_VALUE) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = graph[j][i] + graph[i][k];</span><br><span class="line">        <span class="keyword">if</span>(graph[j][k] &gt; temp) graph[j][k] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="http://resource.silverbeats.cn/static/images/Floyd.png" alt="佛洛依德算法结果"><p>举例：顶点0到4的最短路径</p><p>graph(0,4)的数字是6，说明最短路径长度是6，那么该怎么走呢。这是需要看path数组</p><p>path(0,4)为2，说明想要到顶点4需要经过顶点2，路径0-&gt;2-&gt;4，此时再看path(0,2)为1，说明想要从0到2需要经过顶点1，路径变为0-&gt;1-&gt;2-&gt;4</p><p>关于代码的详细描述过程，见文章：<a href="https://www.cnblogs.com/wangyuliang/p/9216365.html">Floyd-傻子也能看懂的弗洛伊德算法（转）</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迪杰斯特拉算法 </tag>
            
            <tag> 佛洛依德算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo相关命令语法</title>
      <link href="hexo%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/"/>
      <url>hexo%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-相关命令"><a class="markdownIt-Anchor" href="#1-相关命令"></a> 1. 相关命令</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化一个hexo博客</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="comment">#创建新页面</span></span><br><span class="line">hexo new page 页面名</span><br><span class="line"><span class="comment">#清理之前生成的旧文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment">#重新生成静态文件 下面是简写</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo g</span><br><span class="line"><span class="comment">#本地预览 下面是简写</span></span><br><span class="line">hexo server</span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">#合并写法</span></span><br><span class="line">hexo clean | hexo g | hexo s</span><br><span class="line"><span class="comment">#通过git提交到仓库,需要配置hexo项目的_config.yml文件</span></span><br><span class="line">hexo deploy</span><br><span class="line">hexo d</span><br><span class="line"><span class="comment">#当安装七牛云同步插件后,可以通过如下命令将hexo根目录下的static文件夹同步到七牛云</span></span><br><span class="line">hexo qiniu sync</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu s</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu sync2</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu s2</span><br></pre></td></tr></table></figure><h1 id="2-引用站内文章"><a class="markdownIt-Anchor" href="#2-引用站内文章"></a> 2. 引用站内文章</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure><h1 id="3-引用图片"><a class="markdownIt-Anchor" href="#3-引用图片"></a> 3. 引用图片</h1><h2 id="31-引用七牛云图片"><a class="markdownIt-Anchor" href="#31-引用七牛云图片"></a> 3.1 引用七牛云图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg 图片.格式 alt:这是图片 title:这是图片 %&#125;</span><br></pre></td></tr></table></figure><p>不过这种方式引用图片，还是相当于本地存储，之后引用的图片会出现在需要上传的public目录中，还是会占用空间。</p><h2 id="32-引用本地图片"><a class="markdownIt-Anchor" href="#32-引用本地图片"></a> 3.2 引用本地图片</h2><p>倘若hexo项目的配置文件中将<code>post_asset_folder</code>设置为<code>true</code>，可以通过以下方式来引入图片，需要将example放入<code>source/_post</code>下的文章同名文件夹下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="%E6%8E%92%E5%BA%8F/"/>
      <url>%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><img data-src="http://resource.silverbeats.cn/static/images/bg_06.jpg" alt="" /></p><h1 id="1-插入排序"><a class="markdownIt-Anchor" href="#1-插入排序"></a> 1. 插入排序</h1><h2 id="11-直接插入排序"><a class="markdownIt-Anchor" href="#11-直接插入排序"></a> 1.1 直接插入排序</h2><p>直接插入排序，思想较为简单。</p><p>可以类比平常打扑克抓牌的过程。每次抓一张牌时，都会将这张牌与之前手里的牌（之前手里的牌是有序的）进行比较（从左向右比，或者从右向左比），得到一个最终的插入位置，然后插入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接插入排序, 假定前面是有序的，从乱序的后面取一个数插入有序的前面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 进行插入排序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">  arr[a] = arr[b];</span><br><span class="line">  arr[b] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="http://resource.silverbeats.cn/static/images/insertSort_process.png"><p>上面的代码可以再简化一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接插入排序, 假定前面是有序的，从乱序的后面取一个数插入有序的前面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 进行插入排序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]; j--)</span><br><span class="line">    swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-折半插入排序"><a class="markdownIt-Anchor" href="#12-折半插入排序"></a> 1.2 折半插入排序</h2><p>直接插入排序确定位置是通过将待排序的元素，与前面有序的序列一个个比较过去，从而得到最终的插入位置。那么，因为是顺序存储，利用数组实现排序，可以对前面的有序序列使用折半查找来确定最终插入位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binaryInsertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// low high mid用于折半查找</span></span><br><span class="line">  <span class="keyword">int</span> low, high, mid;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">      <span class="comment">// (high+low)/2 这样的写法可能会超出int的表示范围</span></span><br><span class="line">      mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (arr[mid] &lt; arr[i])</span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// high + 1就是插入的位置</span></span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    <span class="comment">// 找到插入位置后,对元素进行挪动</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt; high; j--)</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">    <span class="comment">// 将待排序的元素插入找到的位置</span></span><br><span class="line">    arr[high + <span class="number">1</span>] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-希尔排序"><a class="markdownIt-Anchor" href="#13-希尔排序"></a> 1.3 希尔排序</h2><p>希尔排序又称为缩小增量排序，当增量为1时，其实就是直接插入排序。增量的选取一般两种方案：</p><ul><li>希尔提出，对数组长度不断折半。比如数组长度是32，则增量dk分别是：16,8,4,2,1</li><li>帕佩尔诺夫和斯塔舍维奇提出，dk = 2<sup>k</sup> + 1，dk &lt; 数组长度，k ≥ 0。比如数组长度是32，此时k 只能从4开始，则k = 4，dk = 17；k = 3，dk = 9；k = 2，dk = 5；k = 1，dk = 3；此时还需要额外添加dk = 1，算是一个兜底作用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">int</span> dk = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (dk != <span class="number">0</span>) &#123;</span><br><span class="line">    shell_InsertSort(arr, dk);</span><br><span class="line">    <span class="comment">// shell_BinaryInsertSort(arr, dk);</span></span><br><span class="line">    dk = dk &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Title</span>: shell_InsertSort</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>: 希尔排序，直接插入法进行排序</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ar: 数组</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dk: 间隔</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shell_InsertSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> dk)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i = dk; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (j = i - dk; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= dk) &#123;</span><br><span class="line">      arr[j + dk] = arr[j];</span><br><span class="line">      arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Title</span>: shell_BinaryInsertSort</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>: 希尔排序，折半插入法进行排序</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> arr: 数组</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dk: 间隔</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shell_BinaryInsertSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> dk)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, high, low, mid, temp;</span><br><span class="line">  <span class="keyword">for</span> (i = dk; i &lt; arr.length; i++) &#123;</span><br><span class="line">    low = i % dk;</span><br><span class="line">    high = i - dk;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">      mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> (arr[mid] &lt; arr[i])</span><br><span class="line">        low = mid + dk;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        high = mid - dk;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    <span class="comment">// high + dk 即为插入的位置</span></span><br><span class="line">    <span class="keyword">for</span> (j = i - dk; j &gt; high; j -= dk)</span><br><span class="line">      arr[j + dk] = arr[j];</span><br><span class="line">    arr[high + dk] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后面那个通过折半插入法进行排序纯属练手，效率远远不及直接插入法希尔排序</p><p>前者，规模1W，20次，19ms</p><p>前者，规模10W，20次，187ms</p><p>后者，规模1W，20次，129ms</p><p>后者，规模10W，20次，10761ms</p><p>估计是在dk较小的时候，序列基本有序，折半插入的话是不管有没有序都得比较那么多次，而直接插入是越有序越快。</p></blockquote><h1 id="2-选择排序"><a class="markdownIt-Anchor" href="#2-选择排序"></a> 2. 选择排序</h1><h2 id="21-堆排序"><a class="markdownIt-Anchor" href="#21-堆排序"></a> 2.1 堆排序</h2><p>堆又分大根堆和小根堆，倘若要升序，选择大根堆，倘若要降序，选择小根堆。</p><p>大根堆：根节点的数字不小于左右孩子的值</p><p>小根堆：根节点的值不大于左右孩子的值</p><p>堆排序是把一个数组，看做是一颗完全二叉树，排序步骤：</p><ul><li>先对乱序的数组建立大根堆，可以得到数组的第一个元素（看做完全二叉树的话就是根节点）就是最大的</li><li>将其与数组最后面的那个值交换，然后重新调整，变为大根堆</li><li>依次类推</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 首先构建大根堆</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> pos = arr.length/<span class="number">2</span> - <span class="number">1</span>; pos &gt;= <span class="number">0</span>; --pos) &#123;</span><br><span class="line">    <span class="comment">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class="line">    adjustHeap(arr, pos, arr.length);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(Arrays.toString(arr));</span><br><span class="line">  <span class="comment">// 经过上一步可以得到大根堆,现在开始排序</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">    <span class="comment">//将堆顶元素与末尾元素进行交换</span></span><br><span class="line">    swap(arr,<span class="number">0</span>, j);</span><br><span class="line">    <span class="comment">//重新对堆进行调整</span></span><br><span class="line">    adjustHeap(arr,<span class="number">0</span>, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调整为大根堆</span></span><br><span class="line"><span class="comment">// arr是要调整的数组, i是要调整的数组下标, length是调整的范围</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> pos, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 临时存储被调整的数组数据</span></span><br><span class="line">  <span class="keyword">int</span> temp = arr[pos];</span><br><span class="line">  <span class="comment">// pos是被调整元素的数组下标, 2*pos+1 是其左孩子 2*pos + 2是其右孩子</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = pos*<span class="number">2</span> + <span class="number">1</span>; i &lt; length; i = i*<span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    前面的判断条件保证它的右孩子是无序的,</span></span><br><span class="line"><span class="comment">    在堆排序过程中会将最大值不断放到后面, length就是限制条件,可以通过这个条件让有序的右孩子不被波及</span></span><br><span class="line"><span class="comment">    这个if保证i的下标对应的值是两个孩子中最大的那一个</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(i + <span class="number">1</span> &lt; length &amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果根节点小于它的孩子,则交换</span></span><br><span class="line">    <span class="keyword">if</span>(temp &lt; arr[i]) &#123;</span><br><span class="line">      <span class="comment">// 交换根节点和它孩子的值</span></span><br><span class="line">      swap(arr, pos, i);</span><br><span class="line">      <span class="comment">// 因为经过了调整,当被调整的节点挪了位置,可能会导致后面的序列出问题,所以需要让pos定到i这个位置</span></span><br><span class="line">      pos = i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-简单选择排序"><a class="markdownIt-Anchor" href="#22-简单选择排序"></a> 2.2 简单选择排序</h2><p>思路简单：每次选择最大排到后面，或者每次选择最小的排到最前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 每次过滤一遍数组将最小值放到前面</span></span><br><span class="line">  <span class="keyword">int</span> i, j, min;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    min = i; <span class="comment">// 假定第i个位置最小</span></span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">        min = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i != min) swap(arr, i, min);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另外一种做法，是每次将最小的放到最前面，最大的放到最后面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort_2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 每次过滤一遍数组将最小值放到前面</span></span><br><span class="line">  <span class="comment">// 将最大的数字放到最后面</span></span><br><span class="line">  <span class="keyword">int</span> i, j, min, max, lastPos;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= arr.length &gt;&gt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">    min = max = i;</span><br><span class="line">    lastPos = arr.length - i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= lastPos; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">        min = j;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[max])</span><br><span class="line">        max = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i != min)</span><br><span class="line">      swap(arr, i, min);</span><br><span class="line">    <span class="keyword">if</span> (lastPos != max)</span><br><span class="line">      swap(arr, max, lastPos);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前者，规模10W，20次，54408ms，2720ms/次</p><p>后者，规模10W，20次，53938ms，2697ms/次</p><p>呵呵……</p></blockquote><p>简单选择排序有两个版本，一种是如同上面的两种写法一样，将最大值（最小值）与序列最后（第一）个进行调换位置，这个版本成为<mark>交换版</mark></p><p>另一种版本是将最大值（最小值）插入到序列的最后（最前）面，成为插入版。</p><p>区别在于：</p><ul><li>交换版不稳定，插入版稳定</li><li>倘若序列顺序存储，插入版会涉及到大批量的元素挪动，不如交换版来的划算</li><li>倘若序列是链式存储，插入版会划算一些</li></ul><h1 id="3-交换排序"><a class="markdownIt-Anchor" href="#3-交换排序"></a> 3. 交换排序</h1><h2 id="31-冒泡排序"><a class="markdownIt-Anchor" href="#31-冒泡排序"></a> 3.1 冒泡排序</h2><p>冒泡排序很经典，每次排序都能讲最大的数字排到最后，或者将最小的数字排到最前面</p><blockquote><p>听说冒泡是毒瘤，比较次数和交换次数超级多</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// 倘若内循环没有进行交换,则整个序列有序,会直接终止整个排序,是一个优化的地方</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续发挥，双向冒泡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双向冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubble2Ways</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> left = <span class="number">0</span>, right = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">boolean</span> flag;</span><br><span class="line">  <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 从左往右将最大的数字挪到最右边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt; right; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">        swap(arr, i, i + <span class="number">1</span>);</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 挪到结束后right--</span></span><br><span class="line">    --right;</span><br><span class="line">    <span class="comment">// 从右往左将最小的数字挪到最左边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = right; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">        swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++left;</span><br><span class="line">    <span class="keyword">if</span>(!flag)<span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前者，规模1W，20次，1362ms，68ms/次</p><p>后者，规模1W，20次，1445ms，72ms/次</p><p>前者，规模10W，20次，303042ms，5min，15152ms/次</p><p>后者，规模10W，20次，202945ms，3min23s，10147ms/次</p><p>……还是有点提高的</p></blockquote><h2 id="32-快速排序"><a class="markdownIt-Anchor" href="#32-快速排序"></a> 3.2 快速排序</h2><p>利用分而治之的思想。每一次快速排序会实现这样的结果：</p><ul><li>该数字的左边都比它小</li><li>该数字的右边都不小于它</li><li>每一次排序都会确定一个数的最终位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">int</span> piovtpos = <span class="keyword">this</span>.QSort_Partition(arr, low, high);</span><br><span class="line">    <span class="comment">// 排左边</span></span><br><span class="line">    QSort(arr, low, piovtpos - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 排右边</span></span><br><span class="line">    QSort(arr, piovtpos + <span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一趟快速排序</span></span><br><span class="line"><span class="comment">// 参数1：数组,参数2：数组的起始位置,参数3：数组的终了位置,闭区间</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">QSort_Partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 指定基准</span></span><br><span class="line">  <span class="keyword">int</span> base = arr[left];</span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= base) right--;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) arr[left] = arr[right];</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt; base) left++;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) arr[right] = arr[left];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[left] = base;</span><br><span class="line">  <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>平均时间复杂度为nlogn的算法中，如：堆排序，快速排序，希尔排序，归并排序中，快速排序前面系数最小</p><p>规模1W，20次，15ms</p><p>规模10W，20次，359ms</p><p>快速排序有其特点：<mark>越有序越慢，越无序越快</mark></p></blockquote><h1 id="4-二路归并排序"><a class="markdownIt-Anchor" href="#4-二路归并排序"></a> 4. 二路归并排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: mergeSort</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 归并排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr: int类型数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> leftStart, <span class="keyword">int</span> rightBound)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(leftStart == rightBound)<span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span>(leftStart &gt; rightBound || leftStart &lt; <span class="number">0</span> || rightBound &lt; <span class="number">0</span>)<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> mid = leftStart + ((rightBound - leftStart) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  mergeSort(arr,leftStart,mid);</span><br><span class="line">  mergeSort(arr,mid+<span class="number">1</span>,rightBound);</span><br><span class="line">  merge(arr, leftStart, mid+<span class="number">1</span>, rightBound);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: merge</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:一次归并,将两个有序的数组合并，仍有序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> leftStart 第一个数组的左边界开始的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rightStart 第二个数组的左边界开始的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rightBound 第二个数组的右边界结束的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> leftStart, <span class="keyword">int</span> rightStart, <span class="keyword">int</span> rightBound)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 合并思想：新建一个数组，每次将小的数字放到新建的数组中</span></span><br><span class="line">  <span class="keyword">int</span> i = leftStart, j = rightStart, k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">int</span>[rightBound - leftStart + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span>(i &lt; rightStart &amp;&amp; j&lt;= rightBound)</span><br><span class="line">    tempArr[k++] = arr[i] &lt;= arr[j]?arr[i++]:arr[j++];</span><br><span class="line">  <span class="comment">// 倘若还有剩余</span></span><br><span class="line">  <span class="keyword">while</span>(i &lt; rightStart)</span><br><span class="line">    tempArr[k++] = arr[i++];</span><br><span class="line">  <span class="keyword">while</span>(j &lt;= rightBound)</span><br><span class="line">    tempArr[k++] = arr[j++];</span><br><span class="line">  <span class="comment">// 此时tempArr就是合并好有序的数组，对原始数组进行覆盖</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> p = leftStart; p &lt;= rightBound; p++)</span><br><span class="line">    arr[p] = tempArr[p - leftStart];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>规模1W，20次，32ms</p><p>规模10W，20次，241ms</p></blockquote><h1 id="5-桶排序"><a class="markdownIt-Anchor" href="#5-桶排序"></a> 5. 桶排序</h1><h2 id="51-基数排序"><a class="markdownIt-Anchor" href="#51-基数排序"></a> 5.1 基数排序</h2><h3 id="511-完整代码只适用于非负数"><a class="markdownIt-Anchor" href="#511-完整代码只适用于非负数"></a> 5.1.1 完整代码（只适用于非负数）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">int</span> arrMax = getMinMax(arr)[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 从个位开始,对数组进行排序</span></span><br><span class="line">  <span class="comment">// exp = 1, 按照个位</span></span><br><span class="line">  <span class="comment">// exp = 10, 按照十位</span></span><br><span class="line">  <span class="comment">// exp = 100, 按照百位</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> exp = <span class="number">1</span>; arrMax / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// 存储被排序数组的临时数组</span></span><br><span class="line">    <span class="keyword">int</span>[] output = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">    <span class="comment">// 桶,因为不管是什么数字,个数十位不管是哪一位,都是0-9，所以桶数组的长度是10</span></span><br><span class="line">    <span class="keyword">int</span>[] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 将数据出现的次数进行统计</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      buckets[(arr[i] / exp) % <span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转为累加数组。目的是让更改后的buckets[i]的值，是该数据在output中的位置</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      buckets[i] += buckets[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将数据存储到临时数组output中</span></span><br><span class="line">    <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      output[buckets[(arr[i] / exp) % <span class="number">10</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">      buckets[(arr[i] / exp) % <span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将排序好的数组赋值给arr</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">      arr[i] = output[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="512-分段说明"><a class="markdownIt-Anchor" href="#512-分段说明"></a> 5.1.2 分段说明</h3><p><mark><strong>分段说明举例说明的乱序数组为：{53, 3, 542, 748, 14, 214, 154, 63, 616}，为了更好的说明过程，for循环的说明将会以个位排序，演示整个过程</strong></mark></p><h4 id="5121-外层循环"><a class="markdownIt-Anchor" href="#5121-外层循环"></a> 5.1.2.1 外层循环</h4><p>arrMax是整个数组中最大的数字，同时也是位数最多的那个数字，比如arrMax是748，那么需要进行3次循环，分别对整个数组的个位，十位，百位来进行排序，故，外层循环的次数是由arrMax的位数来决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> exp = <span class="number">1</span>; arrMax / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">……   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>exp  =  1，arrMax = 748/1  = 748&gt; 0，对个位进行排序</li><li>exp = 10，arrMax = 748/10  = 74 &gt; 0，对十位进行排序</li><li>exp = 100，arrMax = 748/100  = 8 &gt; 0，对百位进行排序</li><li>exp = 1000，arrMax = 748/1000  = 0 &gt; 0，false，中止外层循环</li></ul><h4 id="5122-内部循环两个辅助数组的作用"><a class="markdownIt-Anchor" href="#5122-内部循环两个辅助数组的作用"></a> 5.1.2.2 内部循环两个辅助数组的作用</h4><p>首先，先来看一下，我们熟知的基数排序的过程：</p><p><img data-src="http://resource.silverbeats.cn/static/images/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B.png" alt="基数排序过程" /></p><p>很清楚能知道，其中一个辅助数组为buckets长度为10，即为上面的桶。但问题是，模拟的时候，是将每个数字放入桶中，然后取出的顺序是放入的先后顺序一致，颇有一种每个桶里面放的都是一个队列，先进先出，这样想倒是很符合，很自然，可以声明一个Object[]数组，之后每个位置存储一个队列，队列不需要自己实现，可以使用java.util包下的Queue实现类，之后操作就比较简单了，完全就和手动模拟的过程是一致的。（倘若用C语言，这样想能恶心死你= =）</p><p>但上面这种考虑虽然简单，但空间复杂度肯定是小不了的，这里给出的是另外一种比较巧妙的解决方案。可见后面更为详细的过程图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储被排序数组的临时数组</span></span><br><span class="line"><span class="keyword">int</span>[] output = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"><span class="comment">// 桶,因为不管是什么数字,个数十位不管是哪一位,都是0-9，所以桶数组的长度是10</span></span><br><span class="line"><span class="keyword">int</span>[] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h4 id="5123-内部四for第一for-将数据出现的次数进行统计"><a class="markdownIt-Anchor" href="#5123-内部四for第一for-将数据出现的次数进行统计"></a> 5.1.2.3 内部四for第一for: 将数据出现的次数进行统计</h4><p><code>(arr[i]/exp)%10</code>的目的是要获得目标位置的数字。</p><p>首先，将需要的那一位变为个位，比如214，想要取得十位1，此时的exp = 10，先要除exp，得到21，这样想要的十位数字1就挪到了个位，之后让21 % 10，即可得到想要的十位数字1</p><p>这里的for循环其实目的是统计每个数字的exp位（exp = 1 表示每个数字的个位，exp = 10 表示每个数字的十位……）出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  buckets[(arr[i] / exp) % <span class="number">10</span>]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以个排序演示完整过程，出现次数：为待排序数组，每个数字的个位出现的次数</strong></p><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第一for.png" alt="基数排序_分段说明第一for" style="zoom:67%;" /><h4 id="5124-内部四for第二for-转为累加数组"><a class="markdownIt-Anchor" href="#5124-内部四for第二for-转为累加数组"></a> 5.1.2.4 内部四for第二for: 转为累加数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转为累加数组。目的是让更改后的buckets[i]的值，是该数据在output中的位置</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  buckets[i] += buckets[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第二for.png" alt="基数排序_分段说明第二for.png"><p>这个累加数组中的值，就代表了每个数字最终应该存储的位置。比如53这个数字，当按照个位排完序，应该在哪里？</p><p>首先，我们应该能想到应该要遍历待排序数组，然后按照某种规则放入用来临时存储的output数组中。那么问题来了，应该正向遍历，还是逆向遍历？</p><p>假设是正向遍历，遍历到每个数字都需要考虑一些问题：</p><ul><li>有多少个数字在我前面</li><li>和我拥有相同的个位，有多少个，还有多少个没有被安排进临时数组</li><li>比如，第一个数字53，首先，获取53的个位数字3，对应到buckets数组中发现buckets[3] = 4，说明最后一个个位为3的数字应该排在第四个。通过buckets[2] = 1，说明能排在个位3前面的数字只有1个，能推出，在最后的排序结果中，以3为个位的数字应该排在序列的第2,3,4位置。问题来了，如何确定到底是那个位置，同时还要保证相同个位的数字之间相对位置不变。</li></ul><p>假设是逆序，它天然就能保证在最终结果序列中，相同个位之间相对顺序不变。比如063。</p><ul><li>buckets[3] = 4，让063排第4位，buckets[3] = 3</li><li>buckets[3] = 3，让003排第3位，buckets[3] = 2</li><li>buckets[2] = 2，让053排第2位，buckets[3] = 1</li></ul><p>这个逻辑写起来就会很轻松。</p><h4 id="5125-内部四for第三for-将数据存储到临时数组output中"><a class="markdownIt-Anchor" href="#5125-内部四for第三for-将数据存储到临时数组output中"></a> 5.1.2.5 内部四for第三for: 将数据存储到临时数组output中</h4><p>这里是整个排序中最不好懂的一部分。但是当你看到上面的说明，这里就会比较容易去理解。为了方便理解，将源代码中的两行代码拆分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 将数据存储到临时数组output中</span></span><br><span class="line"><span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="comment">// 获取这个数字的exp位</span></span><br><span class="line">  <span class="keyword">int</span> pos = (arr[i] / exp) % <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 对应到buckets数组</span></span><br><span class="line">  <span class="keyword">int</span> b = buckets[pos];</span><br><span class="line">  <span class="comment">// 数组下标从0开始,需要减1,才是arr[i]应该存储的地方</span></span><br><span class="line">  output[--b] = arr[i];</span><br><span class="line">  <span class="comment">// 让桶的数字自减</span></span><br><span class="line">  buckets[pos]--;</span><br><span class="line">  <span class="comment">//output[buckets[(arr[i] / exp) % 10] - 1] = arr[i];</span></span><br><span class="line">  <span class="comment">//buckets[(arr[i] / exp) % 10]--;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第1次：616，获取个位6，buckets[6] = 8，需要减1才是存放处，output[8 - 1] = 616，桶的数字减1，buckets[6] = 7</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_01.png" alt="基数排序_分段说明第三for_01"><ul><li>第2次：063，获取个位3，buckets[3] = 4，需要减1才是存放处，output[4 - 1] = 063，桶的数字减1，buckets[3] = 3</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_02.png" alt="基数排序_分段说明第三for_02"><ul><li>第3次：154，获取个位4，buckets[4] = 7，需要减1才是存放处，output[7 - 1] = 154，桶的数字减1，buckets[4] = 6</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_03.png" alt="基数排序_分段说明第三for_03"><ul><li>第4次：214，获取个位4，buckets[4] = 6，需要减1才是存放处，output[6 - 1] = 124，桶的数字减1，buckets[4] = 5</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_04.png" alt="基数排序_分段说明第三for_04"><ul><li>第5次：014，获取个位4，buckets[4] = 5，需要减1才是存放处，output[5 - 1] = 014，桶的数字减1，buckets[4] = 4</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_05.png" alt="基数排序_分段说明第三for_05"><ul><li>第6次：748，获取个位8，buckets[8] = 9，需要减1才是存放处，output[9 - 1] = 748，桶的数字减1，buckets[8] = 8</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_06.png" alt="基数排序_分段说明第三for_06"><ul><li>第7次：542，获取个位2，buckets[2] = 1，需要减1才是存放处，output[1 - 1] = 542，桶的数字减1，buckets[2] = 0</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_07.png" alt="基数排序_分段说明第三for_07"><ul><li>第8次：003，获取个位3，buckets[3] = 3，需要减1才是存放处，output[3 - 1] = 003，桶的数字减1，buckets[3] = 2</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_08.png" alt="基数排序_分段说明第三for_08"><ul><li>第9次：053，获取个位3，buckets[3] = 2，需要减1才是存放处，output[2 - 1] = 053，桶的数字减1，buckets[3] = 1</li></ul><img data-src="http://resource.silverbeats.cn/static/images/基数排序_分段说明第三for_09.png" alt="基数排序_分段说明第三for_09"><h3 id="513-完整代码适用于负数"><a class="markdownIt-Anchor" href="#513-完整代码适用于负数"></a> 5.1.3 完整代码（适用于负数）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span>(len == <span class="number">1</span> ||len == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span>[] temp = getMinMax(arr);</span><br><span class="line">  <span class="comment">// 应该是位数最多的那一个</span></span><br><span class="line">  <span class="keyword">int</span> arrMax = Math.max(Math.abs(temp[<span class="number">0</span>]), Math.abs(temp[<span class="number">1</span>]));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> exp = <span class="number">1</span>; arrMax / exp != <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// 存储被排序数组的临时数组</span></span><br><span class="line">    <span class="keyword">int</span>[] output = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="comment">// 桶,因为要考虑负数,桶编号从-9~9,，所以桶数组的长度是19</span></span><br><span class="line">    <span class="keyword">int</span>[] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">19</span>];</span><br><span class="line">    <span class="comment">// 将数据出现的次数进行统计,其中buckets数组下标0-8代表-9~-1,下标9代表0,10-18代表1-9</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">//获取这一位</span></span><br><span class="line">      <span class="keyword">int</span> bit = arr[i]/exp % <span class="number">10</span>;</span><br><span class="line">      buckets[bit + <span class="number">9</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转为累加数组。目的是让更改后的buckets[i]的值，是该数据在output中的位置</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">      buckets[i] += buckets[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将数据存储到临时数组output中</span></span><br><span class="line">    <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      output[buckets[(arr[i] / exp) % <span class="number">10</span> + <span class="number">9</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">      buckets[(arr[i] / exp) % <span class="number">10</span> + <span class="number">9</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将排序好的数组赋值给arr</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">      arr[i] = output[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先和上面不包含负数的基数排序相比，变动的地方如下：</p><ul><li>arrMax</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] temp = getMinMax(arr);</span><br><span class="line"><span class="keyword">int</span> arrMax = Math.max(Math.abs(temp[<span class="number">0</span>]), Math.abs(temp[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure><blockquote><p>实际上，arrMax的意义其实没有变化，都指的是这一串数字当中位数最多的那个数字，至于是正的还是负的，这无所谓，只要它位数最多。</p><p>所以，倘若这串数字包含负数，在获取位数最多的那个数字，可以这样获取。</p><p>其中getMinMax是获取arr中的最小值和最大值，返回值{min，max}</p></blockquote><ul><li>桶数组大小变动</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">19</span>];</span><br><span class="line"><span class="comment">// 将数据出现的次数进行统计,其中buckets数组下标0-8代表-9~-1,下标9代表0,10-18代表1-9</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">//获取这一位</span></span><br><span class="line">  <span class="keyword">int</span> bit = arr[i]/exp % <span class="number">10</span>;</span><br><span class="line">  buckets[bit + <span class="number">9</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line"><span class="comment">// 将数据存储到临时数组output中</span></span><br><span class="line"><span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  output[buckets[(arr[i] / exp) % <span class="number">10</span> + <span class="number">9</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">  buckets[(arr[i] / exp) % <span class="number">10</span> + <span class="number">9</span>]--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为要考虑到负数，应该有：-9，-8，-7，-6，……，0，1，2，……，9共计19个桶</p><p>因为数组下标是从0开始的，所以在第一个计数的for循环，当在得到该数字的某一位时，需要+9</p><p>同时在第三个for循环，在获取某个桶的值的时候，也需要+9</p></blockquote><h2 id="52-计数排序"><a class="markdownIt-Anchor" href="#52-计数排序"></a> 5.2 计数排序</h2><p>利用桶，空间换时间，在面对在一定范围内的大量重复数字的场景下，很适用。</p><p>比如一个省的高考成绩排名，可以声明一个长度为751的计数数组，其数组下标为0-750，代表每个分数。之后遍历整个省的所有人，统计每个分数的出现的次数，然后再遍历计数数组，即可实现有序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: countSort</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:计数排序,适用于数字的范围小，排序量大的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> min 该数组中的最小值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> max 该数组中的最大值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: int[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// arr的最小值到最大值之间的数字，即为countArr的下标</span></span><br><span class="line">  <span class="keyword">int</span>[] countArr = <span class="keyword">new</span> <span class="keyword">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 统计arr中每个数字出现的次数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++)</span><br><span class="line">    countArr[arr[j] - min]++;</span><br><span class="line">  <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">  <span class="comment">// 将countArr变为累加数组,这一步主要是实现算法稳定</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; countArr.length; m++)</span><br><span class="line">    countArr[m] += countArr[m - <span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 这一步参见基数排序的过程示意图</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = arr.length - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">    res[--countArr[arr[k] - min]] = arr[k];</span><br><span class="line">  <span class="comment">// 将排序好的数组赋值给arr</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = res[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-排序比较"><a class="markdownIt-Anchor" href="#6-排序比较"></a> 6. 排序比较</h1><table><thead><tr><th>排序</th><th>英文</th><th>平均</th><th>最坏</th><th>最好</th><th>空间</th><th>稳定性</th></tr></thead><tbody><tr><td>插入排序</td><td>Insertion</td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>n</td><td>1</td><td>稳</td></tr><tr><td>折半插入</td><td></td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>nlog<sub>2</sub>n</td><td>1</td><td>稳</td></tr><tr><td>希尔排序</td><td>Shell</td><td>n<sup>1.3</sup></td><td>n<sup>2</sup></td><td>n</td><td>1</td><td>不稳</td></tr><tr><td>堆排序</td><td>Heap</td><td>nlog<sub>2</sub>n</td><td>nlog<sub>2</sub>n</td><td>nlog<sub>2</sub>n</td><td>1</td><td>不稳</td></tr><tr><td>选择排序</td><td>Selection</td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>1</td><td>不稳</td></tr><tr><td>冒泡排序</td><td>Bubble</td><td>n<sup>2</sup></td><td>n<sup>2</sup></td><td>n</td><td>1</td><td>稳</td></tr><tr><td>快速排序</td><td>Quick</td><td>nlog<sub>2</sub>n</td><td>n<sup>2</sup></td><td>nlog<sub>2</sub>n</td><td>log<sub>2</sub>n</td><td>不稳</td></tr><tr><td>归并排序</td><td>Merge</td><td>nlog<sub>2</sub>n</td><td>nlog<sub>2</sub>n</td><td>nlog<sub>2</sub>n</td><td>n</td><td>稳</td></tr><tr><td>桶排序</td><td>Bucket</td><td>n+k</td><td>n<sup>2</sup></td><td>n</td><td>n+k</td><td>稳</td></tr><tr><td>计数排序</td><td>Counting</td><td>n+k</td><td>n+k</td><td>n+k</td><td>n+k</td><td>稳</td></tr><tr><td>基数排序</td><td>Radix</td><td>n*k</td><td>n*k</td><td>n*k</td><td>n+k</td><td>稳</td></tr></tbody></table><ul><li>经过一趟排序能够使某个关键字到达最终位置的排序：交换类排序（冒泡，快速排序）、选择类排序（简单选择，堆排序）</li><li>排序算法的关键字比较次数和原始序列无关：简单选择排序和折半插入排序</li><li>排序算法的排序趟数和原始序列有关：交换类排序（冒泡，快速排序）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo之yelee主题配置</title>
      <link href="hexo%E4%B9%8Byelee%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>hexo%E4%B9%8Byelee%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><p><a href="https://www.jianshu.com/p/f9b213097c42">使用Github搭建Hexo技术博客托管在GitHub Pages上–安装教程</a></p></li><li><p><a href="https://www.jianshu.com/p/288ab888ac42">博客系统hexo yelee搭建历程</a></p></li><li><p><a href="https://blog.csdn.net/u010996565/article/details/89196612">hexo在文章中添加图片</a></p></li><li><p><a href="https://www.jianshu.com/p/6991e8e7f01b">Hexo七牛插件安装与使用</a></p></li><li><a href="/hexo%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/" title="hexo相关命令语法">hexo相关命令语法</a></li></ul><p><img data-src="http://resource.silverbeats.cn/static/images/bg_05.png" alt="" /></p><h1 id="1-前期准备"><a class="markdownIt-Anchor" href="#1-前期准备"></a> 1. 前期准备</h1><ol><li><p>github账号、安装<a href="http://git-scm.com/">git</a></p></li><li><p><a href="http://nodejs.org">nodejs</a></p></li><li><p>notepad++或者editplus，记事本也可以</p></li><li><p>typora（后期写md格式文章用的软件）</p></li><li><p>可选内容</p><ul><li>修改node.js源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 设置 淘宝镜像源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">// 查看使用的镜像源</span><br><span class="line">npm config get registry</span><br><span class="line">// 安装淘宝镜像源</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-实操"><a class="markdownIt-Anchor" href="#2-实操"></a> 2. 实操</h1><h2 id="21-安装hexo框架"><a class="markdownIt-Anchor" href="#21-安装hexo框架"></a> 2.1 安装Hexo框架</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">// 或者</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="22-创建hexo项目"><a class="markdownIt-Anchor" href="#22-创建hexo项目"></a> 2.2 创建Hexo项目</h2><ul><li>在本地，选择要创建项目的目录</li><li>打开Git Bash（或者cmd命令行，或者powershell），并进入该目录</li><li>输入并运行<code>hexo init blog</code>之后，会在当前目录下创建blog文件夹，并初始化相关文件</li><li><code>cd blog</code>进入创建的项目，运行<code>npm install</code>下载相关依赖包</li></ul><h2 id="23-相关命令"><a class="markdownIt-Anchor" href="#23-相关命令"></a> 2.3 相关命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清理之前生成的旧文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment">#重新生成静态文件 下面是简写</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo g</span><br><span class="line"><span class="comment">#本地预览 下面是简写</span></span><br><span class="line">hexo server</span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">#合并写法</span></span><br><span class="line">hexo clean | hexo g | hexo s</span><br><span class="line"><span class="comment">#通过git提交到仓库,需要配置,见后文</span></span><br><span class="line">hexo deploy</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="24-下载yelee主题"><a class="markdownIt-Anchor" href="#24-下载yelee主题"></a> 2.4 下载yelee主题</h2><p>在当前目录下，输入命令<code>git clone https://github.com/MOxFIVE/hexo-theme-yelee themes/yelee</code>，倘若下载速度是龟速，不如直接用迅雷下zip压缩包来的快……</p><p><a href="https://pan.baidu.com/s/1OSbQMbU2MNL5xHQ7HambFg">Hexo主题压缩包，百度云，密码abcd</a></p><p>下载完成之后，需要修改项目目录下的<code>_config.yml</code>文件，找到<code>theme</code>主题字样，将后面的默认主题<code>landscape</code>修改为<code>yelee</code>。倘若之后想要更换主题也是如此。</p><h2 id="25-修改_configyml文件"><a class="markdownIt-Anchor" href="#25-修改_configyml文件"></a> 2.5 修改_config.yml文件</h2><h3 id="251-首页不显示文章列表"><a class="markdownIt-Anchor" href="#251-首页不显示文章列表"></a> 2.5.1 首页不显示文章列表</h3><p>启动后会发现左侧导航栏，点击主页后不显示文章列表</p><p>进入yelee模板页的 <code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="attr">on:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">## true: get search.xml file when the page has loaded</span></span><br><span class="line">  <span class="comment">## false: get the file when search box gets focus</span></span><br></pre></td></tr></table></figure><h3 id="252-相关链接无法跳转"><a class="markdownIt-Anchor" href="#252-相关链接无法跳转"></a> 2.5.2 相关链接无法跳转</h3><p>在<code>themes/yelee/_config.yml</code>中类似如下的内容。实际上当预览的时候会发现有相关的链接没有配置路由。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## About Page: `hexo new page about`</span></span><br><span class="line"><span class="comment">## Tags Cloud Page: `hexo new page tags`</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">所有文章:</span> <span class="string">/archives/</span></span><br><span class="line">  <span class="string">随笔:</span> <span class="string">/note/</span></span><br><span class="line">  <span class="string">标签云:</span> <span class="string">/tags/</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure><p>因为随笔、标签云、关于我这种链接，在此项目中是没有的，需要去创建。留意上方注释，已经说明如何创建。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在项目根目录下操作, 根据需要创建系统页</span></span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><h3 id="253-添加文章的字数统计和大概看完的时间"><a class="markdownIt-Anchor" href="#253-添加文章的字数统计和大概看完的时间"></a> 2.5.3 添加文章的字数统计和大概看完的时间</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#项目根路径下操作</span></span><br><span class="line">npm i -<span class="literal">-save</span> hexo<span class="literal">-wordcount</span></span><br></pre></td></tr></table></figure><p>文件配置：</p><ol><li>在<code>yelee/layout/_partial/post/word.ejs</code>下创建<code>word.ejs</code>文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--倘若出现tag标签和统计字数的文件有布局上的问题，可以对上下外边距进行调整--&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;margin-top:10px;margin-bottom: 30px&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-time&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;fa fa-keyboard-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;  字数统计: &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-count&quot;&gt;&lt;%&#x3D; wordcount(post.content) %&gt;字&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-time&quot;&gt;</span><br><span class="line">    &amp;nbsp; | &amp;nbsp;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;fa fa-hourglass-half&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;  阅读时长: &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-count&quot;&gt;&lt;%&#x3D; min2read(post.content) %&gt;分&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后在 <code>themes/yelee/layout/_partial/article.ejs</code>中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;article-inner&quot;&gt;</span><br><span class="line">    &lt;% if (theme.fancybox)&#123; %&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;hidden&quot; class&#x3D;&quot;isFancy&quot; &#x2F;&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% if (post.link || post.title)&#123; %&gt;</span><br><span class="line">      &lt;header class&#x3D;&quot;article-header&quot;&gt;</span><br><span class="line">        &lt;%- partial(&#39;post&#x2F;title&#39;, &#123;class_name: &#39;article-title&#39;&#125;) %&gt;</span><br><span class="line">        &lt;!-- 开始添加字数统计,这里才是添加的东西--&gt;</span><br><span class="line">        &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt;</span><br><span class="line">          &lt;%- partial(&#39;post&#x2F;word&#39;) %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">         &lt;!-- 添加完成 --&gt;</span><br><span class="line">      &lt;&#x2F;header&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>开启功能</li></ol><p>在yelee主题的<code>_config.yml</code>中添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word_count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="254-配置本地搜索"><a class="markdownIt-Anchor" href="#254-配置本地搜索"></a> 2.5.4 配置本地搜索</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目根目录运行</span></span><br><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-search</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后配置文件<code>themes/yelee/_config.yml</code>中修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="attr">on:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">## true: get search.xml file when the page has loaded</span></span><br><span class="line">  <span class="comment">## false: get the file when search box gets focus</span></span><br></pre></td></tr></table></figure><h3 id="255-添加网站运行时间"><a class="markdownIt-Anchor" href="#255-添加网站运行时间"></a> 2.5.5 添加网站运行时间</h3><p><code>\themes\yelee\layout\_partial</code>路径下找到<code>footer.ejs</code>添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer id&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;footer-info&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;footer-left&quot;&gt; &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;!--添加代码的位置,以及要添加的代码</span><br><span class="line">&lt;span id&#x3D;&quot;timeDate&quot;&gt;载入天数...&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;times&quot;&gt;载入时分秒...&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">        var now &#x3D; new Date();</span><br><span class="line">        function createtime() &#123;</span><br><span class="line">          var grt &#x3D; new Date(&quot;09&#x2F;13&#x2F;2020 12:49:00&quot;);&#x2F;&#x2F;此处修改你的建站时间或者网站上线时间 </span><br><span class="line">          now.setTime(now.getTime() + 250);</span><br><span class="line">          days &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 &#x2F; 60 &#x2F; 24; dnum &#x3D; Math.floor(days);</span><br><span class="line">          hours &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 &#x2F; 60 - (24 * dnum); hnum &#x3D; Math.floor(hours);</span><br><span class="line">          if (String(hnum).length &#x3D;&#x3D; 1) &#123; hnum &#x3D; &quot;0&quot; + hnum; &#125; minutes &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">          mnum &#x3D; Math.floor(minutes); if (String(mnum).length &#x3D;&#x3D; 1) &#123; mnum &#x3D; &quot;0&quot; + mnum; &#125;</span><br><span class="line">          seconds &#x3D; (now - grt) &#x2F; 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">          snum &#x3D; Math.round(seconds); if (String(snum).length &#x3D;&#x3D; 1) &#123; snum &#x3D; &quot;0&quot; + snum; &#125;</span><br><span class="line">          document.getElementById(&quot;timeDate&quot;).innerHTML &#x3D; &quot;本站已安全运行 &quot; + dnum + &quot; 天 &quot;;</span><br><span class="line">          document.getElementById(&quot;times&quot;).innerHTML &#x3D; hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        setInterval(&quot;createtime()&quot;, 250);</span><br><span class="line">      &lt;&#x2F;script&gt;</span><br><span class="line">--&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;footer-right&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    ……</span><br><span class="line">&lt;&#x2F;footer&gt;</span><br></pre></td></tr></table></figure><h3 id="256-url持久化"><a class="markdownIt-Anchor" href="#256-url持久化"></a> 2.5.6 Url持久化</h3><p>可以发现 hexo 默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。</p><p>这种链接对搜索爬虫是很不友好的，它的 url 结构超过了三层，太深了。</p><p>安装 <code>hexo-abbrlink</code> 插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-abbrlink</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后配置根目录的_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"><span class="comment">#permalink: :year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure><h3 id="257-添加二次元虚拟人物"><a class="markdownIt-Anchor" href="#257-添加二次元虚拟人物"></a> 2.5.7 添加二次元虚拟人物</h3><p>获取：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -<span class="literal">-save</span> hexo<span class="literal">-helper</span><span class="literal">-live2d</span></span><br></pre></td></tr></table></figure><p>下载人物模型，<a href="https://www.npmjs.com/package/hexo-helper-live2d">官方</a>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d<span class="literal">-widget</span><span class="literal">-model</span><span class="literal">-shizuku</span> </span><br><span class="line"><span class="comment"># 对应use: live2d-widget-model-unitychan</span></span><br><span class="line"></span><br><span class="line">npm install live2d<span class="literal">-widget</span><span class="literal">-model</span><span class="literal">-hibiki</span></span><br><span class="line"><span class="comment"># 对应use: live2d-widget-model-hibiki</span></span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">  <span class="comment">#只需要修改unitychan就可以更换虚拟人物</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-unitychan</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="258-当文章中有图片时"><a class="markdownIt-Anchor" href="#258-当文章中有图片时"></a> 2.5.8 当文章中有图片时</h3><p>图片在博文中十分常见，因博客部署在GitHub上，空间有限，推荐将图片、音频、视频等文件存放在<a href="https://www.qiniu.com/">七牛云</a>这样的地方。</p><h4 id="2581-使用七牛云同步插件"><a class="markdownIt-Anchor" href="#2581-使用七牛云同步插件"></a> 2.5.8.1 使用七牛云同步插件</h4><ol><li><p>注册账号登录，点击对象存储，创建存储空间，并绑定域名，绑定域名参考官网提供的说明</p></li><li><p>hexo安装七牛云同步插件：<code>npm install hexo-qiniu-sync --save</code></p></li><li><p>hexo的配置文件中进行七牛云配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#plugins:</span></span><br><span class="line"><span class="comment"># - hexo-qiniu-sync</span></span><br><span class="line"><span class="attr">qiniu:</span></span><br><span class="line">  <span class="attr">offline:</span> <span class="literal">true</span> <span class="comment"># true会省流量</span></span><br><span class="line">  <span class="attr">sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="comment">#这里需要填写第一步创建的存储空间的名字</span></span><br><span class="line">  <span class="string">//这里将其注释掉，不注释，执行hexo</span> <span class="string">g报错</span></span><br><span class="line">  <span class="comment"># secret_file: sec/qn.json or C:</span></span><br><span class="line">  <span class="comment">#登录自己的七牛云账号，点击右上角的投降，选择密钥管理，可以获得</span></span><br><span class="line">  <span class="attr">access_key:</span> <span class="string">your</span> <span class="string">access_key</span> </span><br><span class="line">  <span class="attr">secret_key:</span> <span class="string">your</span> <span class="string">secret_key</span></span><br><span class="line">  <span class="string">//</span> <span class="string">上传的资源子目录前缀.如设置，需与urlPrefix同步</span></span><br><span class="line">  <span class="attr">dirPrefix:</span> <span class="string">static</span></span><br><span class="line">  <span class="string">//外链前缀，第一步绑定的加速域名</span></span><br><span class="line">  <span class="attr">urlPrefix:</span> <span class="string">http://自己的加速域名/static</span></span><br><span class="line">  <span class="string">//使用默认配置即可</span></span><br><span class="line">  <span class="attr">up_host:</span> <span class="string">http://upload.qiniu.com</span></span><br><span class="line">  <span class="string">//本地目录</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">static</span></span><br><span class="line">  <span class="string">//</span> <span class="string">是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span></span><br><span class="line">  <span class="attr">update_exist:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">image:</span> </span><br><span class="line">    <span class="attr">folder:</span> <span class="string">images</span></span><br><span class="line">    <span class="attr">extend:</span> </span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">js</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">css</span></span><br></pre></td></tr></table></figure></li><li><p>在hexo根目录下创建如下目录结构，之后将对应的想要存放到七牛云的文件放到对应的文件夹即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static</span><br><span class="line">  - images</span><br><span class="line">  - js</span><br><span class="line">  - css</span><br></pre></td></tr></table></figure></li><li><p>在文章中插入图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg 图片.图片格式 title: alt: &#39;class:&#39; extend:?imageView2&#x2F;2&#x2F;w&#x2F;450 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>将本地static目录下的文件同步到七牛云</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo qiniu sync</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu s</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu sync2</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">hexo qiniu s2</span><br></pre></td></tr></table></figure></li></ol><h4 id="2582-使用picgo工具"><a class="markdownIt-Anchor" href="#2582-使用picgo工具"></a> 2.5.8.2 使用picGo工具</h4><p>同步插件在使用过程中发现，在文章使用过程中看不到预览，并且在生成过程中还是会把图片放到public目录，所以会推荐使用<a href="https://pan.baidu.com/s/1RPdP03TrigJTZgmzVs9Dgg">picGo，提取码cdef</a>工具来上传，成功后会返回外链地址，方便使用。</p><h3 id="259-文章底部不显示作者"><a class="markdownIt-Anchor" href="#259-文章底部不显示作者"></a> 2.5.9 文章底部不显示作者</h3><p>倘若出现了这种情况，可以在主题的配置文件中添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">author:</span> <span class="string">作者名字</span></span><br></pre></td></tr></table></figure><h3 id="2510-添加点击爱心效果"><a class="markdownIt-Anchor" href="#2510-添加点击爱心效果"></a> 2.5.10 添加点击爱心效果</h3><ul><li><p>下载js文件，<a href="https://pan.baidu.com/s/1dKH_FBNNGjdkTF3PslJkKQ">链接地址,密码bcde</a></p></li><li><p>在<code>theme/yelee/source</code>下创建<code>resources目录</code>并将js文件拷贝到此目录下</p></li><li><p>在<code>/themes/yelee/layout/_partial/after-footer.ejs</code>下添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;resources&#x2F;float.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;resources&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; color&#x3D;0,104,183 opacity&#x3D;1 zindex&#x3D;-1 count&#x3D;50 src&#x3D;&quot;&#x2F;resources&#x2F;particle.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;resources&#x2F;typewriter.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2511-其它"><a class="markdownIt-Anchor" href="#2511-其它"></a> 2.5.11 其它</h3><p>主题文件的_config.yml还可以配置什么：</p><ul><li>网站的ico图标</li><li>自己的头像</li><li>导航栏链接</li><li>背景图片</li><li>是否开启分享</li><li>是否需要评论、以及是否显示评论数量</li><li>文章的标题风格、字体大小</li><li>……</li></ul><h1 id="3-把本地的博客内容同步到-github-上"><a class="markdownIt-Anchor" href="#3-把本地的博客内容同步到-github-上"></a> 3. 把本地的博客内容同步到 Github 上</h1><p>因为博客托管在GitHub上，所以在建立博客仓库时，仓库的名字需要命名为：<code>用户名.github.io</code>这样就可以通过<code>用户名.github.io</code>来访问该站点了。</p><ol><li><p>创建好仓库后，需要本地生成SSH秘钥，方便通过git来进行提交</p></li><li><p>命令行输入：<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code>,之后不停的回车，期间，留意秘钥保存的路径，一般是：<code>C:\Users\你的计算机用户名\.ssh</code>，会生成两个文件：</p><ul><li>私钥：<code>id_rsa</code></li><li>公钥：<code>id_rsa.pub</code></li></ul></li><li><p>访问自己GitHub账户的setting/SSH keys，将公钥的内容复制粘贴到Key的位置（主义末尾不要留有空行），title内容随意。</p></li><li><p>安装两个跟部署相关的 hexo 插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo <span class="literal">-server</span> -<span class="literal">-save</span></span><br><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure></li><li><p>编辑全局的hexo配置文件：_config.xml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的s</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">LearnFoever</span>  <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span>  <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">silverbeats</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">418116014</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span>   <span class="comment">#网站时区。Hexo 默认使用您电脑的时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://silverbeats.github.io</span> <span class="comment">#倘若已经购买了域名的话可以填买的域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#这里配置的url持久化</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span> <span class="comment">#:year/:month/:day/:title/ </span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment">#源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span> <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment">#标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> <span class="comment">#归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment">#分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span> <span class="comment">#nclude code 文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span> <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>  <span class="comment">#跳过指定文件的渲染，可使用 glob 表达式来匹配路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment">#新建文章默认文件名</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment"># 默认布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># 在新标签中打开一个外部链接，默认为true</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span> </span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment">#是否渲染_drafts目录下的文章，默认为false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment">#启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment">#把链接改为与根目录的相对位址，默认false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span> <span class="comment">#显示未来的文章，默认false</span></span><br><span class="line"><span class="attr">highlight:</span>  <span class="comment">#代码块的设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"><span class="comment"># Category &amp; Tag #分类和标签的设置</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment">#默认分类</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yelee</span> <span class="comment"># next  yelee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。</span></span><br><span class="line"><span class="comment">## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后熟悉了要换其他也无所谓。</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:SilverBeats/SilverBeats.github.io.git,master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-neat 对静态文件进行压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span>  </span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#萌妹子</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hibiki</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
